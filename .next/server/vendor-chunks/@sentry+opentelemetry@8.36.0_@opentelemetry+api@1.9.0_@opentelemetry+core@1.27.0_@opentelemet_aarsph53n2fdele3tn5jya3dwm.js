/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm";
exports.ids = ["vendor-chunks/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm"];
exports.modules = {

/***/ "(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+core@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n\n/** If this attribute is true, it means that the parent is a remote span. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nconst SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nfunction spanHasAttributes(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasKind(span) {\n  const castSpan = span ;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasStatus(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasName(span) {\n  const castSpan = span ;\n  return !!castSpan.name;\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasParentId(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.parentSpanId;\n}\n\n/**\n * Check if a given span has events.\n * This is necessary because the base `Span` type does not have events,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasEvents(\n  span,\n) {\n  const castSpan = span ;\n  return Array.isArray(castSpan.events);\n}\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nfunction getRequestSpanData(span) {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = (span.attributes[semanticConventions.ATTR_URL_FULL] || span.attributes[semanticConventions.SEMATTRS_HTTP_URL])\n\n;\n\n  const data = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': (span.attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || span.attributes[semanticConventions.SEMATTRS_HTTP_METHOD])\n\n,\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = utils.parseUrl(maybeUrlAttribute);\n\n      data.url = utils.getSanitizedUrlString(url);\n\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  return data;\n}\n\nfunction _optionalChain$8(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n// Typescript complains if we do not use `...args: any[]` for the mixin, with:\n// A mixin class must have a constructor with a single rest parameter of type 'any[]'.ts(2545)\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Wrap an Client with things we need for OpenTelemetry support.\n *\n * Usage:\n * const OpenTelemetryClient = getWrappedClientClass(NodeClient);\n * const client = new OpenTelemetryClient(options);\n */\nfunction wrapClientClass\n\n(ClientClass) {\n  class OpenTelemetryClient extends ClientClass  {\n\n     constructor(...args) {\n      super(...args);\n    }\n\n    /** Get the OTEL tracer. */\n     get tracer() {\n      if (this._tracer) {\n        return this._tracer;\n      }\n\n      const name = '@sentry/opentelemetry';\n      const version = core.SDK_VERSION;\n      const tracer = api.trace.getTracer(name, version);\n      this._tracer = tracer;\n\n      return tracer;\n    }\n\n    /**\n     * @inheritDoc\n     */\n     async flush(timeout) {\n      const provider = this.traceProvider;\n      const spanProcessor = _optionalChain$8([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n\n      if (spanProcessor) {\n        await spanProcessor.forceFlush();\n      }\n\n      return super.flush(timeout);\n    }\n  }\n\n  return OpenTelemetryClient ;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nfunction getSpanKind(span) {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n\n  return api.SpanKind.INTERNAL;\n}\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\nconst SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nconst SENTRY_TRACE_STATE_PARENT_SPAN_ID = 'sentry.parent_span_id';\nconst SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nconst SENTRY_TRACE_STATE_URL = 'sentry.url';\n\nconst SENTRY_SCOPES_CONTEXT_KEY = api.createContextKey('sentry_scopes');\n\nconst SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_isolation_scope');\n\nconst SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_scope');\n\nconst SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_isolation_scope');\n\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nfunction getScopesFromContext(context) {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY) ;\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nfunction setScopesOnContext(context, scopes) {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nfunction setContextOnScope(scope, context) {\n  utils.addNonEnumerableProperty(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n * TODO v8: Use this for the `trace` functions.\n * */\nfunction getContextFromScope(scope) {\n  return (scope )[SCOPE_CONTEXT_FIELD];\n}\n\n/**\n *\n * @param otelSpan Checks wheter a given OTEL Span is an http request to sentry.\n * @returns boolean\n */\nfunction isSentryRequestSpan(span) {\n  if (!spanHasAttributes(span)) {\n    return false;\n  }\n\n  const { attributes } = span;\n\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[semanticConventions.SEMATTRS_HTTP_URL] || attributes[semanticConventions.ATTR_URL_FULL];\n\n  if (!httpUrl) {\n    return false;\n  }\n\n  return core.isSentryRequestUrl(httpUrl.toString(), core.getClient());\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nfunction inferSpanData(name, attributes, kind) {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || attributes[semanticConventions.SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({ attributes, name, kind }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[semanticConventions.SEMATTRS_DB_SYSTEM];\n  const opIsCache =\n    typeof attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' &&\n    attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({ attributes, name });\n  }\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[semanticConventions.SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      op: 'rpc',\n      description: name,\n      source: 'route',\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[semanticConventions.SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      op: 'message',\n      description: name,\n      source: 'route',\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[semanticConventions.SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return { op: faasTrigger.toString(), description: name, source: 'route' };\n  }\n\n  return { op: undefined, description: name, source: 'custom' };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nfunction parseSpanDescription(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n\n  return inferSpanData(name, attributes, kind);\n}\n\nfunction descriptionForDbSystem({ attributes, name }) {\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[semanticConventions.SEMATTRS_DB_STATEMENT];\n\n  const description = statement ? statement.toString() : name;\n\n  return { op: 'db', description, source: 'task' };\n}\n\n/** Only exported for tests. */\nfunction descriptionForHttpMethod(\n  { name, kind, attributes },\n  httpMethod,\n) {\n  const opParts = ['http'];\n\n  switch (kind) {\n    case api.SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case api.SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n\n  const { urlPath, url, query, fragment, hasRoute } = getSanitizedUrl(attributes, kind);\n\n  if (!urlPath) {\n    return { op: opParts.join('.'), description: name, source: 'custom' };\n  }\n\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const description = graphqlOperationsAttribute\n    ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})`\n    : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const source = hasRoute || urlPath === '/' ? 'route' : 'url';\n\n  const data = {};\n\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === api.SpanKind.CLIENT || kind === api.SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  const useInferredDescription = isClientOrServerKind || !isManualSpan;\n\n  return {\n    op: opParts.join('.'),\n    description: useInferredDescription ? description : name,\n    source: useInferredDescription ? source : 'custom',\n    data,\n  };\n}\n\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nfunction getSanitizedUrl(\n  attributes,\n  kind,\n)\n\n {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[semanticConventions.SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[semanticConventions.SEMATTRS_HTTP_URL] || attributes[semanticConventions.ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n\n  const parsedUrl = typeof httpUrl === 'string' ? utils.parseUrl(httpUrl) : undefined;\n  const url = parsedUrl ? utils.getSanitizedUrlString(parsedUrl) : undefined;\n  const query = parsedUrl && parsedUrl.search ? parsedUrl.search : undefined;\n  const fragment = parsedUrl && parsedUrl.hash ? parsedUrl.hash : undefined;\n\n  if (typeof httpRoute === 'string') {\n    return { urlPath: httpRoute, url, query, fragment, hasRoute: true };\n  }\n\n  if (kind === api.SpanKind.SERVER && typeof httpTarget === 'string') {\n    return { urlPath: utils.stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  if (parsedUrl) {\n    return { urlPath: url, url, query, fragment, hasRoute: false };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return { urlPath: utils.stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  return { urlPath: undefined, url, query, fragment, hasRoute: false };\n}\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nfunction enhanceDscWithOpenTelemetryRootSpanName(client) {\n  client.on('createDsc', (dsc, rootSpan) => {\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n    if (rootSpan) {\n      const jsonSpan = core.spanToJSON(rootSpan);\n      const attributes = jsonSpan.data || {};\n      const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n      const { description } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : { description: undefined };\n      if (source !== 'url' && description) {\n        dsc.transaction = description;\n      }\n    }\n  });\n}\n\n/**\n * Generate a TraceState for the given data.\n */\nfunction makeTraceState({\n  parentSpanId,\n  dsc,\n  sampled,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? utils.dynamicSamplingContextToSentryBaggageHeader(dsc) : undefined;\n\n  // We _always_ set the parent span ID, even if it is empty\n  // If we'd set this to 'undefined' we could not know if the trace state was set, but there was no parentSpanId,\n  // vs the trace state was not set at all (in which case we want to do fallback handling)\n  // If `''`, it should be considered \"no parent\"\n  const traceStateBase = new core$1.TraceState().set(SENTRY_TRACE_STATE_PARENT_SPAN_ID, parentSpanId || '');\n\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n\n/**\n * Generates a SpanContext that represents a PropagationContext.\n * This can be set on a `context` to make this a (virtual) active span.\n */\nfunction generateSpanContextForPropagationContext(propagationContext) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    parentSpanId: propagationContext.parentSpanId,\n    dsc: propagationContext.dsc,\n    sampled: propagationContext.sampled,\n  });\n\n  const spanContext = {\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.parentSpanId || '',\n    isRemote: true,\n    traceFlags: propagationContext.sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState,\n  };\n\n  return spanContext;\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  return api.trace.getActiveSpan();\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nfunction _optionalChain$7(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nfunction getSamplingDecision(spanContext) {\n  const { traceFlags, traceState } = spanContext;\n\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === api.TraceFlags.SAMPLED) {\n    return true;\n  }\n\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? utils.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n  if (_optionalChain$7([dsc, 'optionalAccess', _ => _.sampled]) === 'true') {\n    return true;\n  }\n  if (_optionalChain$7([dsc, 'optionalAccess', _2 => _2.sampled]) === 'false') {\n    return false;\n  }\n\n  return undefined;\n}\n\nconst setupElements = new Set();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nfunction openTelemetrySetupCheck() {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nfunction setIsSetup(element) {\n  setupElements.add(element);\n}\n\nfunction _optionalChain$6(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n/** Get the Sentry propagation context from a span context. */\nfunction getPropagationContextFromSpan(span) {\n  const spanContext = span.spanContext();\n  const { traceId, spanId, traceState } = spanContext;\n\n  // When we have a dsc trace state, it means this came from the incoming trace\n  // Then this takes presedence over the root span\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const traceStateDsc = dscString ? utils.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n  const parentSpanId = traceState ? traceState.get(SENTRY_TRACE_STATE_PARENT_SPAN_ID) || undefined : undefined;\n\n  const sampled = getSamplingDecision(spanContext);\n\n  // No trace state? --> Take DSC from root span\n  const dsc = traceStateDsc || core.getDynamicSamplingContextFromSpan(core.getRootSpan(span));\n\n  return {\n    traceId,\n    spanId,\n    sampled,\n    parentSpanId,\n    dsc,\n  };\n}\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nclass SentryPropagator extends core$1.W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n\n   constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new utils.LRUMap(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   inject(context, carrier, setter) {\n    if (core$1.isTracingSuppressed(context)) {\n      DEBUG_BUILD && utils.logger.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n\n    const activeSpan = api.trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n\n    const tracePropagationTargets = _optionalChain$6([core.getClient, 'call', _ => _(), 'optionalAccess', _2 => _2.getOptions, 'call', _3 => _3(), 'optionalAccess', _4 => _4.tracePropagationTargets]);\n    if (\n      typeof url === 'string' &&\n      tracePropagationTargets &&\n      !this._shouldInjectTraceData(tracePropagationTargets, url)\n    ) {\n      DEBUG_BUILD &&\n        utils.logger.log(\n          '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:',\n          url,\n        );\n      return;\n    }\n\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = api.propagation.getBaggage(context) || api.propagation.createBaggage({});\n\n    const { dynamicSamplingContext, traceId, spanId, sampled } = getInjectionData(context);\n\n    if (existingBaggageHeader) {\n      const baggageEntries = utils.parseBaggageHeader(existingBaggageHeader);\n\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, { value });\n        });\n      }\n    }\n\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${utils.SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== api.INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, utils.generateSentryTraceHeader(traceId, spanId, sampled));\n    }\n\n    super.inject(api.propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   extract(context, carrier, getter) {\n    const maybeSentryTraceHeader = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n\n    const sentryTrace = maybeSentryTraceHeader\n      ? Array.isArray(maybeSentryTraceHeader)\n        ? maybeSentryTraceHeader[0]\n        : maybeSentryTraceHeader\n      : undefined;\n\n    const propagationContext = utils.propagationContextFromHeaders(sentryTrace, baggage);\n\n    // Add remote parent span context\n    const ctxWithSpanContext = getContextWithRemoteActiveSpan(context, { sentryTrace, baggage });\n\n    // Also update the scope on the context (to be sure this is picked up everywhere)\n    const scopes = getScopesFromContext(ctxWithSpanContext);\n    const newScopes = {\n      scope: scopes ? scopes.scope.clone() : core.getCurrentScope().clone(),\n      isolationScope: scopes ? scopes.isolationScope : core.getIsolationScope(),\n    };\n    newScopes.scope.setPropagationContext(propagationContext);\n\n    return setScopesOnContext(ctxWithSpanContext, newScopes);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   fields() {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n\n  /** If we want to inject trace data for a given URL. */\n   _shouldInjectTraceData(tracePropagationTargets, url) {\n    if (tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = this._urlMatchesTargetsMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = utils.stringMatchesSomePattern(url, tracePropagationTargets);\n    this._urlMatchesTargetsMap.set(url, decision);\n    return decision;\n  }\n}\n\nfunction getInjectionData(context)\n\n {\n  const span = api.trace.getSpan(context);\n  const spanIsRemote = _optionalChain$6([span, 'optionalAccess', _5 => _5.spanContext, 'call', _6 => _6(), 'access', _7 => _7.isRemote]);\n\n  // If we have a local span, we can just pick everything from it\n  if (span && !spanIsRemote) {\n    const spanContext = span.spanContext();\n\n    const propagationContext = getPropagationContextFromSpan(span);\n    const dynamicSamplingContext = getDynamicSamplingContext(propagationContext, spanContext.traceId);\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext),\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  const scope = _optionalChain$6([getScopesFromContext, 'call', _8 => _8(context), 'optionalAccess', _9 => _9.scope]) || core.getCurrentScope();\n\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = getDynamicSamplingContext(propagationContext, propagationContext.traceId);\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.spanId,\n    sampled: propagationContext.sampled,\n  };\n}\n\n/** Get the DSC from a context, or fall back to use the one from the client. */\nfunction getDynamicSamplingContext(\n  propagationContext,\n  traceId,\n) {\n  // If we have a DSC on the propagation context, we just use it\n  if (_optionalChain$6([propagationContext, 'optionalAccess', _10 => _10.dsc])) {\n    return propagationContext.dsc;\n  }\n\n  // Else, we try to generate a new one\n  const client = core.getClient();\n\n  if (client) {\n    return core.getDynamicSamplingContextFromClient(traceId || propagationContext.traceId, client);\n  }\n\n  return undefined;\n}\n\nfunction getContextWithRemoteActiveSpan(\n  ctx,\n  { sentryTrace, baggage },\n) {\n  const propagationContext = utils.propagationContextFromHeaders(sentryTrace, baggage);\n\n  const spanContext = generateSpanContextForPropagationContext(propagationContext);\n  return api.trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nfunction continueTraceAsRemoteSpan(\n  ctx,\n  options,\n  callback,\n) {\n  const ctxWithSpanContext = getContextWithRemoteActiveSpan(ctx, options);\n\n  return api.context.with(ctxWithSpanContext, callback);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier) {\n  try {\n    const baggage = (carrier )[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span) {\n  const spanData = core.spanToJSON(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = _optionalChain$6([spanData, 'optionalAccess', _11 => _11[semanticConventions.SEMATTRS_HTTP_URL]]) || _optionalChain$6([spanData, 'optionalAccess', _12 => _12[semanticConventions.ATTR_URL_FULL]]);\n  if (urlAttribute) {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = _optionalChain$6([span, 'access', _13 => _13.spanContext, 'call', _14 => _14(), 'access', _15 => _15.traceState, 'optionalAccess', _16 => _16.get, 'call', _17 => _17(SENTRY_TRACE_STATE_URL)]);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n\n  return undefined;\n}\n\nfunction _optionalChain$5(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(\n        () => callback(span),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (core.spanToJSON(span).status === undefined) {\n            span.setStatus({ code: api.SpanStatusCode.ERROR });\n          }\n        },\n        () => span.end(),\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(\n  options,\n  callback,\n) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(\n        () => callback(span, () => span.end()),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (core.spanToJSON(span).status === undefined) {\n            span.setStatus({ code: api.SpanStatusCode.ERROR });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    const span = tracer.startSpan(name, spanOptions, ctx);\n\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const newContextWithActiveSpan = span ? api.trace.setSpan(api.context.active(), span) : api.trace.deleteSpan(api.context.active());\n  return api.context.with(newContextWithActiveSpan, () => callback(core.getCurrentScope()));\n}\n\nfunction getTracer() {\n  const client = core.getClient();\n  return (client && client.tracer) || api.trace.getTracer('@sentry/opentelemetry', core.SDK_VERSION);\n}\n\nfunction getSpanOptions(options) {\n  const { startTime, attributes, kind, op } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n\n  return {\n    attributes: op\n      ? {\n          [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n          ...attributes,\n        }\n      : attributes,\n    kind,\n    startTime: fixedStartTime,\n  };\n}\n\nfunction ensureTimestampInMilliseconds(timestamp) {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\n\nfunction getContext(scope, forceTransaction) {\n  const ctx = getContextForScope(scope);\n  const actualScope = _optionalChain$5([getScopesFromContext, 'call', _ => _(ctx), 'optionalAccess', _2 => _2.scope]);\n\n  const parentSpan = api.trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we need to \"simulate\" one to ensure the propagation context is correct\n  if (!parentSpan) {\n    const client = core.getClient();\n\n    if (actualScope && client) {\n      const propagationContext = actualScope.getPropagationContext();\n\n      // We store the DSC as OTEL trace state on the span context\n      const traceState = makeTraceState({\n        parentSpanId: propagationContext.parentSpanId,\n        // Not defined yet, we want to pick this up on-demand only\n        dsc: undefined,\n        sampled: propagationContext.sampled,\n      });\n\n      const spanOptions = {\n        traceId: propagationContext.traceId,\n        spanId: propagationContext.parentSpanId || propagationContext.spanId,\n        isRemote: true,\n        traceFlags: propagationContext.sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n        traceState,\n      };\n\n      // Add remote parent span context,\n      return api.trace.setSpanContext(ctx, spanOptions);\n    }\n\n    // if we have no scope or client, we just return the context as-is\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = api.trace.deleteSpan(ctx);\n\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = core.getRootSpan(parentSpan);\n  const dsc = core.getDynamicSamplingContextFromSpan(rootSpan);\n\n  const traceState = makeTraceState({\n    dsc,\n    parentSpanId: spanId !== api.INVALID_SPANID ? spanId : undefined,\n    sampled,\n  });\n\n  const spanOptions = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState,\n  };\n\n  const ctxWithSpanContext = api.trace.setSpanContext(ctxWithoutSpan, spanOptions);\n\n  return ctxWithSpanContext;\n}\n\nfunction getContextForScope(scope) {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n\n  return api.context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nfunction continueTrace(options, callback) {\n  return core.continueTrace(options, () => {\n    return continueTraceAsRemoteSpan(api.context.active(), options, callback);\n  });\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const ctx = core$1.suppressTracing(api.context.active());\n  return api.context.with(ctx, callback);\n}\n\nfunction _optionalChain$4(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n/** Ensure the `trace` context is set on all events. */\nfunction setupEventContextTrace(client) {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    const spanContext = span.spanContext();\n\n    // If we have a parent span id from trace state, use that ('' means no parent should be used)\n    // Else, pick the one from the span\n    const parentSpanIdFromTraceState = _optionalChain$4([spanContext, 'access', _ => _.traceState, 'optionalAccess', _2 => _2.get, 'call', _3 => _3(SENTRY_TRACE_STATE_PARENT_SPAN_ID)]);\n    const parent_span_id =\n      typeof parentSpanIdFromTraceState === 'string'\n        ? parentSpanIdFromTraceState || undefined\n        : spanHasParentId(span)\n          ? span.parentSpanId\n          : undefined;\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: utils.dropUndefinedKeys({\n        trace_id: spanContext.traceId,\n        span_id: spanContext.spanId,\n        parent_span_id,\n      }),\n      ...event.contexts,\n    };\n\n    const rootSpan = core.getRootSpan(span);\n\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(rootSpan),\n      ...event.sdkProcessingMetadata,\n    };\n\n    return event;\n  });\n}\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nfunction getTraceData() {\n  const headersObject = {};\n\n  api.propagation.inject(api.context.active(), headersObject);\n\n  if (!headersObject['sentry-trace']) {\n    return {};\n  }\n\n  return utils.dropUndefinedKeys({\n    'sentry-trace': headersObject['sentry-trace'],\n    baggage: headersObject.baggage,\n  });\n}\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nfunction setOpenTelemetryContextAsyncContextStrategy() {\n  function getScopes() {\n    const ctx = api.context.active();\n    const scopes = getScopesFromContext(ctx);\n\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope(),\n    };\n  }\n\n  function withScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return api.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n\n  function withSetScope(scope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n\n  function withIsolationScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function withSetIsolationScope(isolationScope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function getCurrentScope() {\n    return getScopes().scope;\n  }\n\n  function getIsolationScope() {\n    return getScopes().isolationScope;\n  }\n\n  core.setAsyncContextStrategy({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan ,\n  });\n}\n\nfunction _optionalChain$3(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nfunction wrapContextManagerClass(\n  ContextManagerClass,\n) {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n     constructor(...args) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n     with(\n      context,\n      fn,\n      thisArg,\n      ...args\n    ) {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = _optionalChain$3([currentScopes, 'optionalAccess', _ => _.scope]) || core.getCurrentScope();\n      const currentIsolationScope = _optionalChain$3([currentScopes, 'optionalAccess', _2 => _2.isolationScope]) || core.getIsolationScope();\n\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY) ;\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY) ;\n\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope =\n        isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = { scope: newCurrentScope, isolationScope: newIsolationScope };\n\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1\n        .deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n\n      setContextOnScope(newCurrentScope, ctx2);\n\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n\n  return SentryContextManager ;\n}\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nfunction groupSpansWithParents(spans) {\n  const nodeMap = new Map();\n\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nfunction getLocalParentId(span) {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? span.parentSpanId : undefined;\n}\n\nfunction createOrUpdateSpanNodeAndRefs(nodeMap, span) {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, { id, span, children: [] });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, { id, span, parentNode, children: [] });\n  parentNode.children.push(node);\n}\n\nfunction createOrGetParentNode(nodeMap, id) {\n  const existing = nodeMap.get(id);\n\n  if (existing) {\n    return existing;\n  }\n\n  return createOrUpdateNode(nodeMap, { id, children: [] });\n}\n\nfunction createOrUpdateNode(nodeMap, spanNode) {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing && existing.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated',\n} ;\n\nconst isStatusErrorMessageValid = (message) => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message );\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nfunction mapStatus(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === api.SpanStatusCode.OK) {\n      return { code: core.SPAN_STATUS_OK };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === api.SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return { code: core.SPAN_STATUS_ERROR, message: status.message };\n      } else {\n        return { code: core.SPAN_STATUS_ERROR, message: 'unknown_error' };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status && status.code === api.SpanStatusCode.UNSET) {\n    return { code: core.SPAN_STATUS_OK };\n  } else {\n    return { code: core.SPAN_STATUS_ERROR, message: 'unknown_error' };\n  }\n}\n\nfunction inferStatusFromAttributes(attributes) {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[semanticConventions.SEMATTRS_RPC_GRPC_STATUS_CODE];\n\n  const numberHttpCode =\n    typeof httpCodeAttribute === 'number'\n      ? httpCodeAttribute\n      : typeof httpCodeAttribute === 'string'\n        ? parseInt(httpCodeAttribute)\n        : undefined;\n\n  if (typeof numberHttpCode === 'number') {\n    return core.getSpanStatusFromHttpCode(numberHttpCode);\n  }\n\n  if (typeof grpcCodeAttribute === 'string') {\n    return { code: core.SPAN_STATUS_ERROR, message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error' };\n  }\n\n  return undefined;\n}\n\nfunction _optionalChain$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nclass SentrySpanExporter {\n\n   constructor(options) {\n    this._finishedSpans = [];\n    this._timeout = _optionalChain$2([options, 'optionalAccess', _ => _.timeout]) || DEFAULT_TIMEOUT;\n  }\n\n  /** Export a single span. */\n   export(span) {\n    this._finishedSpans.push(span);\n\n    // If the span has a local parent ID, we don't need to export anything just yet\n    if (getLocalParentId(span)) {\n      const openSpanCount = this._finishedSpans.length;\n      DEBUG_BUILD && utils.logger.log(`SpanExporter has ${openSpanCount} unsent spans remaining`);\n      this._cleanupOldSpans();\n      return;\n    }\n\n    this._clearTimeout();\n\n    // If we got a parent span, we try to send the span tree\n    // Wait a tick for this, to ensure we avoid race conditions\n    this._flushTimeout = setTimeout(() => {\n      this.flush();\n    }, 1);\n  }\n\n  /** Try to flush any pending spans immediately. */\n   flush() {\n    this._clearTimeout();\n\n    const openSpanCount = this._finishedSpans.length;\n\n    const remainingSpans = maybeSend(this._finishedSpans);\n\n    const remainingOpenSpanCount = remainingSpans.length;\n    const sentSpanCount = openSpanCount - remainingOpenSpanCount;\n\n    DEBUG_BUILD &&\n      utils.logger.log(`SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} unsent spans remaining`);\n\n    this._cleanupOldSpans(remainingSpans);\n  }\n\n  /** Clear the exporter. */\n   clear() {\n    this._finishedSpans = [];\n    this._clearTimeout();\n  }\n\n  /** Clear the flush timeout. */\n   _clearTimeout() {\n    if (this._flushTimeout) {\n      clearTimeout(this._flushTimeout);\n      this._flushTimeout = undefined;\n    }\n  }\n\n  /**\n   * Remove any span that is older than 5min.\n   * We do this to avoid leaking memory.\n   */\n   _cleanupOldSpans(spans = this._finishedSpans) {\n    const currentTimeSeconds = Date.now() / 1000;\n    this._finishedSpans = spans.filter(span => {\n      const shouldDrop = shouldCleanupSpan(span, currentTimeSeconds, this._timeout);\n      DEBUG_BUILD &&\n        shouldDrop &&\n        utils.logger.log(\n          `SpanExporter dropping span ${span.name} (${\n            span.spanContext().spanId\n          }) because it is pending for more than 5 minutes.`,\n        );\n      return !shouldDrop;\n    });\n  }\n}\n\n/**\n * Send the given spans, but only if they are part of a finished transaction.\n *\n * Returns the unsent spans.\n * Spans remain unsent when their parent span is not yet finished.\n * This will happen regularly, as child spans are generally finished before their parents.\n * But it _could_ also happen because, for whatever reason, a parent span was lost.\n * In this case, we'll eventually need to clean this up.\n */\nfunction maybeSend(spans) {\n  const grouped = groupSpansWithParents(spans);\n  const remaining = new Set(grouped);\n\n  const rootNodes = getCompletedRootNodes(grouped);\n\n  rootNodes.forEach(root => {\n    remaining.delete(root);\n    const span = root.span;\n    const transactionEvent = createTransactionForOtelSpan(span);\n\n    // We'll recursively add all the child spans to this array\n    const spans = transactionEvent.spans || [];\n\n    root.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, remaining);\n    });\n\n    // spans.sort() mutates the array, but we do not use this anymore after this point\n    // so we can safely mutate it here\n    transactionEvent.spans =\n      spans.length > MAX_SPAN_COUNT\n        ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n        : spans;\n\n    const measurements = core.timedEventsToMeasurements(span.events);\n    if (measurements) {\n      transactionEvent.measurements = measurements;\n    }\n\n    core.captureEvent(transactionEvent);\n  });\n\n  return Array.from(remaining)\n    .map(node => node.span)\n    .filter((span) => !!span);\n}\n\nfunction nodeIsCompletedRootNode(node) {\n  return !!node.span && !node.parentNode;\n}\n\nfunction getCompletedRootNodes(nodes) {\n  return nodes.filter(nodeIsCompletedRootNode);\n}\n\nfunction shouldCleanupSpan(span, currentTimeSeconds, maxStartTimeOffsetSeconds) {\n  const cutoff = currentTimeSeconds - maxStartTimeOffsetSeconds;\n  return core.spanTimeInputToSeconds(span.startTime) < cutoff;\n}\n\nfunction parseSpan(span) {\n  const attributes = span.attributes;\n\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ;\n  const op = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] ;\n  const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n  return { origin, op, source };\n}\n\nfunction createTransactionForOtelSpan(span) {\n  const { op, description, data, origin = 'manual', source } = getSpanData(span);\n  const capturedSpanScopes = core.getCapturedScopesOnSpan(span );\n\n  const sampleRate = span.attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ;\n\n  const attributes = utils.dropUndefinedKeys({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes),\n  });\n\n  const { traceId: trace_id, spanId: span_id } = span.spanContext();\n\n  const parentSpanIdFromTraceState = _optionalChain$2([span, 'access', _2 => _2.spanContext, 'call', _3 => _3(), 'access', _4 => _4.traceState, 'optionalAccess', _5 => _5.get, 'call', _6 => _6(SENTRY_TRACE_STATE_PARENT_SPAN_ID)]);\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take presedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id =\n    typeof parentSpanIdFromTraceState === 'string' ? parentSpanIdFromTraceState || undefined : span.parentSpanId;\n\n  const status = mapStatus(span);\n\n  const traceContext = utils.dropUndefinedKeys({\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: core.getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n  });\n\n  const transactionEvent = {\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes,\n      },\n    },\n    spans: [],\n    start_timestamp: core.spanTimeInputToSeconds(span.startTime),\n    timestamp: core.spanTimeInputToSeconds(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      ...utils.dropUndefinedKeys({\n        capturedSpanScope: capturedSpanScopes.scope,\n        capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n        sampleRate,\n        dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(span ),\n      }),\n    },\n    ...(source && {\n      transaction_info: {\n        source,\n      },\n    }),\n    _metrics_summary: core.getMetricSummaryJsonForSpan(span ),\n  };\n\n  return transactionEvent;\n}\n\nfunction createAndFinishSpanForOtelSpan(node, spans, remaining) {\n  remaining.delete(node);\n  const span = node.span;\n\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, remaining);\n    });\n    return;\n  }\n\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n\n  const { attributes, startTime, endTime, parentSpanId } = span;\n\n  const { op, description, data, origin = 'manual' } = getSpanData(span);\n  const allData = utils.dropUndefinedKeys({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data,\n  });\n\n  const status = mapStatus(span);\n\n  const spanJSON = utils.dropUndefinedKeys({\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: core.spanTimeInputToSeconds(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: core.spanTimeInputToSeconds(endTime) || undefined,\n    status: core.getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    _metrics_summary: core.getMetricSummaryJsonForSpan(span ),\n    measurements: core.timedEventsToMeasurements(span.events),\n  });\n\n  spans.push(spanJSON);\n\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, remaining);\n  });\n}\n\nfunction getSpanData(span)\n\n {\n  const { op: definedOp, source: definedSource, origin } = parseSpan(span);\n  const { op: inferredOp, description, source: inferredSource, data: inferredData } = parseSpanDescription(span);\n\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n\n  const data = { ...inferredData, ...getData(span) };\n\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data,\n  };\n}\n\n/**\n * Remove custom `sentry.` attribtues we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data) {\n  const cleanedData = { ...data };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\n\nfunction getData(span) {\n  const attributes = span.attributes;\n  const data = {};\n\n  if (span.kind !== api.SpanKind.INTERNAL) {\n    data['otel.kind'] = api.SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute ;\n  }\n\n  const requestData = getRequestSpanData(span);\n\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n\n  return data;\n}\n\nfunction _optionalChain$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\nfunction onSpanStart(span, parentContext) {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = api.trace.getSpan(parentContext);\n\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    core.addChildSpanToSpan(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan && parentSpan.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === api.ROOT_CONTEXT) {\n    scopes = {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope(),\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    core.setCapturedScopesOnSpan(span, scopes.scope, scopes.isolationScope);\n  }\n\n  core.logSpanStart(span);\n\n  const client = core.getClient();\n  _optionalChain$1([client, 'optionalAccess', _ => _.emit, 'call', _2 => _2('spanStart', span)]);\n}\n\nfunction onSpanEnd(span) {\n  core.logSpanEnd(span);\n\n  const client = core.getClient();\n  _optionalChain$1([client, 'optionalAccess', _3 => _3.emit, 'call', _4 => _4('spanEnd', span)]);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nclass SentrySpanProcessor  {\n\n   constructor(options) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async forceFlush() {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async shutdown() {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   onStart(span, parentContext) {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n   onEnd(span) {\n    onSpanEnd(span);\n\n    this._exporter.export(span);\n  }\n}\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nclass SentrySampler  {\n\n   constructor(client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n   shouldSample(\n    context,\n    traceId,\n    spanName,\n    spanKind,\n    spanAttributes,\n    _links,\n  ) {\n    const options = this._client.getOptions();\n\n    const parentSpan = api.trace.getSpan(context);\n    const parentContext = _optionalChain([parentSpan, 'optionalAccess', _ => _.spanContext, 'call', _2 => _2()]);\n\n    if (!core.hasTracingEnabled(options)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[semanticConventions.SEMATTRS_HTTP_METHOD] || spanAttributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === api.SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || _optionalChain([parentContext, 'optionalAccess', _3 => _3.isRemote]))) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op,\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes,\n    };\n\n    if (op) {\n      mergedAttributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n\n    const mutableSamplingDecision = { decision: true };\n    this._client.emit(\n      'beforeSampling',\n      {\n        spanAttributes: mergedAttributes,\n        spanName: inferredSpanName,\n        parentSampled: parentSampled,\n        parentContext: parentContext,\n      },\n      mutableSamplingDecision,\n    );\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const [sampled, sampleRate] = core.sampleSpan(options, {\n      name: inferredSpanName,\n      attributes: mergedAttributes,\n      transactionContext: {\n        name: inferredSpanName,\n        parentSampled,\n      },\n      parentSampled,\n    });\n\n    const attributes = {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    };\n\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD && utils.logger.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n\n      return {\n        ...wrapSamplingDecision({ decision: sdkTraceBase.SamplingDecision.NOT_RECORD, context, spanAttributes }),\n        attributes,\n      };\n    }\n\n    if (!sampled) {\n      return {\n        ...wrapSamplingDecision({ decision: sdkTraceBase.SamplingDecision.NOT_RECORD, context, spanAttributes }),\n        attributes,\n      };\n    }\n    return {\n      ...wrapSamplingDecision({ decision: sdkTraceBase.SamplingDecision.RECORD_AND_SAMPLED, context, spanAttributes }),\n      attributes,\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n   toString() {\n    return 'SentrySampler';\n  }\n}\n\nfunction getParentRemoteSampled(parentSpan) {\n  const traceId = parentSpan.spanContext().traceId;\n  const traceparentData = getPropagationContextFromSpan(parentSpan);\n\n  // Only inherit sampled if `traceId` is the same\n  return traceparentData && traceId === traceparentData.traceId ? traceparentData.sampled : undefined;\n}\n\nfunction getParentSampled(parentSpan, traceId, spanName) {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if (api.isSpanContextValid(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getParentRemoteSampled(parentSpan);\n      DEBUG_BUILD &&\n        utils.logger.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD && utils.logger.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nfunction wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes,\n}) {\n  const traceState = getBaseTraceState(context, spanAttributes);\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return { decision: sdkTraceBase.SamplingDecision.NOT_RECORD, traceState };\n  }\n\n  if (decision === sdkTraceBase.SamplingDecision.NOT_RECORD) {\n    return { decision, traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') };\n  }\n\n  return { decision, traceState };\n}\n\nfunction getBaseTraceState(context, spanAttributes) {\n  const parentSpan = api.trace.getSpan(context);\n  const parentContext = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.spanContext, 'call', _5 => _5()]);\n\n  let traceState = _optionalChain([parentContext, 'optionalAccess', _6 => _6.traceState]) || new core$1.TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[semanticConventions.SEMATTRS_HTTP_URL] || spanAttributes[semanticConventions.ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n\n  return traceState;\n}\n\n/**\n * This method takes an OpenTelemetry instrumentation or\n * array of instrumentations and registers them with OpenTelemetry.\n */\nfunction addOpenTelemetryInstrumentation(...instrumentations) {\n  instrumentation.registerInstrumentations({\n    instrumentations,\n  });\n}\n\nexports.getClient = core.getClient;\nexports.getCurrentHubShim = core.getCurrentHubShim;\nexports.getDynamicSamplingContextFromSpan = core.getDynamicSamplingContextFromSpan;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION;\nexports.SentryPropagator = SentryPropagator;\nexports.SentrySampler = SentrySampler;\nexports.SentrySpanProcessor = SentrySpanProcessor;\nexports.addOpenTelemetryInstrumentation = addOpenTelemetryInstrumentation;\nexports.continueTrace = continueTrace;\nexports.enhanceDscWithOpenTelemetryRootSpanName = enhanceDscWithOpenTelemetryRootSpanName;\nexports.generateSpanContextForPropagationContext = generateSpanContextForPropagationContext;\nexports.getActiveSpan = getActiveSpan;\nexports.getPropagationContextFromSpan = getPropagationContextFromSpan;\nexports.getRequestSpanData = getRequestSpanData;\nexports.getScopesFromContext = getScopesFromContext;\nexports.getSpanKind = getSpanKind;\nexports.isSentryRequestSpan = isSentryRequestSpan;\nexports.openTelemetrySetupCheck = openTelemetrySetupCheck;\nexports.setOpenTelemetryContextAsyncContextStrategy = setOpenTelemetryContextAsyncContextStrategy;\nexports.setupEventContextTrace = setupEventContextTrace;\nexports.spanHasAttributes = spanHasAttributes;\nexports.spanHasEvents = spanHasEvents;\nexports.spanHasKind = spanHasKind;\nexports.spanHasName = spanHasName;\nexports.spanHasParentId = spanHasParentId;\nexports.spanHasStatus = spanHasStatus;\nexports.startInactiveSpan = startInactiveSpan;\nexports.startSpan = startSpan;\nexports.startSpanManual = startSpanManual;\nexports.suppressTracing = suppressTracing;\nexports.withActiveSpan = withActiveSpan;\nexports.wrapClientClass = wrapClientClass;\nexports.wrapContextManagerClass = wrapContextManagerClass;\nexports.wrapSamplingDecision = wrapSamplingDecision;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n\n/** If this attribute is true, it means that the parent is a remote span. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nconst SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nfunction spanHasAttributes(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasKind(span) {\n  const castSpan = span ;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasStatus(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasName(span) {\n  const castSpan = span ;\n  return !!castSpan.name;\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasParentId(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.parentSpanId;\n}\n\n/**\n * Check if a given span has events.\n * This is necessary because the base `Span` type does not have events,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasEvents(\n  span,\n) {\n  const castSpan = span ;\n  return Array.isArray(castSpan.events);\n}\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nfunction getRequestSpanData(span) {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = (span.attributes[semanticConventions.ATTR_URL_FULL] || span.attributes[semanticConventions.SEMATTRS_HTTP_URL])\n\n;\n\n  const data = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': (span.attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || span.attributes[semanticConventions.SEMATTRS_HTTP_METHOD])\n\n,\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = utils.parseUrl(maybeUrlAttribute);\n\n      data.url = utils.getSanitizedUrlString(url);\n\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  return data;\n}\n\nfunction _optionalChain$8(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n// Typescript complains if we do not use `...args: any[]` for the mixin, with:\n// A mixin class must have a constructor with a single rest parameter of type 'any[]'.ts(2545)\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Wrap an Client with things we need for OpenTelemetry support.\n *\n * Usage:\n * const OpenTelemetryClient = getWrappedClientClass(NodeClient);\n * const client = new OpenTelemetryClient(options);\n */\nfunction wrapClientClass\n\n(ClientClass) {\n  class OpenTelemetryClient extends ClientClass  {\n\n     constructor(...args) {\n      super(...args);\n    }\n\n    /** Get the OTEL tracer. */\n     get tracer() {\n      if (this._tracer) {\n        return this._tracer;\n      }\n\n      const name = '@sentry/opentelemetry';\n      const version = core.SDK_VERSION;\n      const tracer = api.trace.getTracer(name, version);\n      this._tracer = tracer;\n\n      return tracer;\n    }\n\n    /**\n     * @inheritDoc\n     */\n     async flush(timeout) {\n      const provider = this.traceProvider;\n      const spanProcessor = _optionalChain$8([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n\n      if (spanProcessor) {\n        await spanProcessor.forceFlush();\n      }\n\n      return super.flush(timeout);\n    }\n  }\n\n  return OpenTelemetryClient ;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nfunction getSpanKind(span) {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n\n  return api.SpanKind.INTERNAL;\n}\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\nconst SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nconst SENTRY_TRACE_STATE_PARENT_SPAN_ID = 'sentry.parent_span_id';\nconst SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nconst SENTRY_TRACE_STATE_URL = 'sentry.url';\n\nconst SENTRY_SCOPES_CONTEXT_KEY = api.createContextKey('sentry_scopes');\n\nconst SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_isolation_scope');\n\nconst SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_scope');\n\nconst SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_isolation_scope');\n\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nfunction getScopesFromContext(context) {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY) ;\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nfunction setScopesOnContext(context, scopes) {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nfunction setContextOnScope(scope, context) {\n  utils.addNonEnumerableProperty(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n * TODO v8: Use this for the `trace` functions.\n * */\nfunction getContextFromScope(scope) {\n  return (scope )[SCOPE_CONTEXT_FIELD];\n}\n\n/**\n *\n * @param otelSpan Checks wheter a given OTEL Span is an http request to sentry.\n * @returns boolean\n */\nfunction isSentryRequestSpan(span) {\n  if (!spanHasAttributes(span)) {\n    return false;\n  }\n\n  const { attributes } = span;\n\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[semanticConventions.SEMATTRS_HTTP_URL] || attributes[semanticConventions.ATTR_URL_FULL];\n\n  if (!httpUrl) {\n    return false;\n  }\n\n  return core.isSentryRequestUrl(httpUrl.toString(), core.getClient());\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nfunction inferSpanData(name, attributes, kind) {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || attributes[semanticConventions.SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({ attributes, name, kind }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[semanticConventions.SEMATTRS_DB_SYSTEM];\n  const opIsCache =\n    typeof attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' &&\n    attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({ attributes, name });\n  }\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[semanticConventions.SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      op: 'rpc',\n      description: name,\n      source: 'route',\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[semanticConventions.SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      op: 'message',\n      description: name,\n      source: 'route',\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[semanticConventions.SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return { op: faasTrigger.toString(), description: name, source: 'route' };\n  }\n\n  return { op: undefined, description: name, source: 'custom' };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nfunction parseSpanDescription(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n\n  return inferSpanData(name, attributes, kind);\n}\n\nfunction descriptionForDbSystem({ attributes, name }) {\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[semanticConventions.SEMATTRS_DB_STATEMENT];\n\n  const description = statement ? statement.toString() : name;\n\n  return { op: 'db', description, source: 'task' };\n}\n\n/** Only exported for tests. */\nfunction descriptionForHttpMethod(\n  { name, kind, attributes },\n  httpMethod,\n) {\n  const opParts = ['http'];\n\n  switch (kind) {\n    case api.SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case api.SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n\n  const { urlPath, url, query, fragment, hasRoute } = getSanitizedUrl(attributes, kind);\n\n  if (!urlPath) {\n    return { op: opParts.join('.'), description: name, source: 'custom' };\n  }\n\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const description = graphqlOperationsAttribute\n    ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})`\n    : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const source = hasRoute || urlPath === '/' ? 'route' : 'url';\n\n  const data = {};\n\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === api.SpanKind.CLIENT || kind === api.SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  const useInferredDescription = isClientOrServerKind || !isManualSpan;\n\n  return {\n    op: opParts.join('.'),\n    description: useInferredDescription ? description : name,\n    source: useInferredDescription ? source : 'custom',\n    data,\n  };\n}\n\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nfunction getSanitizedUrl(\n  attributes,\n  kind,\n)\n\n {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[semanticConventions.SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[semanticConventions.SEMATTRS_HTTP_URL] || attributes[semanticConventions.ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n\n  const parsedUrl = typeof httpUrl === 'string' ? utils.parseUrl(httpUrl) : undefined;\n  const url = parsedUrl ? utils.getSanitizedUrlString(parsedUrl) : undefined;\n  const query = parsedUrl && parsedUrl.search ? parsedUrl.search : undefined;\n  const fragment = parsedUrl && parsedUrl.hash ? parsedUrl.hash : undefined;\n\n  if (typeof httpRoute === 'string') {\n    return { urlPath: httpRoute, url, query, fragment, hasRoute: true };\n  }\n\n  if (kind === api.SpanKind.SERVER && typeof httpTarget === 'string') {\n    return { urlPath: utils.stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  if (parsedUrl) {\n    return { urlPath: url, url, query, fragment, hasRoute: false };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return { urlPath: utils.stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  return { urlPath: undefined, url, query, fragment, hasRoute: false };\n}\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nfunction enhanceDscWithOpenTelemetryRootSpanName(client) {\n  client.on('createDsc', (dsc, rootSpan) => {\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n    if (rootSpan) {\n      const jsonSpan = core.spanToJSON(rootSpan);\n      const attributes = jsonSpan.data || {};\n      const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n      const { description } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : { description: undefined };\n      if (source !== 'url' && description) {\n        dsc.transaction = description;\n      }\n    }\n  });\n}\n\n/**\n * Generate a TraceState for the given data.\n */\nfunction makeTraceState({\n  parentSpanId,\n  dsc,\n  sampled,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? utils.dynamicSamplingContextToSentryBaggageHeader(dsc) : undefined;\n\n  // We _always_ set the parent span ID, even if it is empty\n  // If we'd set this to 'undefined' we could not know if the trace state was set, but there was no parentSpanId,\n  // vs the trace state was not set at all (in which case we want to do fallback handling)\n  // If `''`, it should be considered \"no parent\"\n  const traceStateBase = new core$1.TraceState().set(SENTRY_TRACE_STATE_PARENT_SPAN_ID, parentSpanId || '');\n\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n\n/**\n * Generates a SpanContext that represents a PropagationContext.\n * This can be set on a `context` to make this a (virtual) active span.\n */\nfunction generateSpanContextForPropagationContext(propagationContext) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    parentSpanId: propagationContext.parentSpanId,\n    dsc: propagationContext.dsc,\n    sampled: propagationContext.sampled,\n  });\n\n  const spanContext = {\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.parentSpanId || '',\n    isRemote: true,\n    traceFlags: propagationContext.sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState,\n  };\n\n  return spanContext;\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  return api.trace.getActiveSpan();\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nfunction _optionalChain$7(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nfunction getSamplingDecision(spanContext) {\n  const { traceFlags, traceState } = spanContext;\n\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === api.TraceFlags.SAMPLED) {\n    return true;\n  }\n\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? utils.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n  if (_optionalChain$7([dsc, 'optionalAccess', _ => _.sampled]) === 'true') {\n    return true;\n  }\n  if (_optionalChain$7([dsc, 'optionalAccess', _2 => _2.sampled]) === 'false') {\n    return false;\n  }\n\n  return undefined;\n}\n\nconst setupElements = new Set();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nfunction openTelemetrySetupCheck() {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nfunction setIsSetup(element) {\n  setupElements.add(element);\n}\n\nfunction _optionalChain$6(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n/** Get the Sentry propagation context from a span context. */\nfunction getPropagationContextFromSpan(span) {\n  const spanContext = span.spanContext();\n  const { traceId, spanId, traceState } = spanContext;\n\n  // When we have a dsc trace state, it means this came from the incoming trace\n  // Then this takes presedence over the root span\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const traceStateDsc = dscString ? utils.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n  const parentSpanId = traceState ? traceState.get(SENTRY_TRACE_STATE_PARENT_SPAN_ID) || undefined : undefined;\n\n  const sampled = getSamplingDecision(spanContext);\n\n  // No trace state? --> Take DSC from root span\n  const dsc = traceStateDsc || core.getDynamicSamplingContextFromSpan(core.getRootSpan(span));\n\n  return {\n    traceId,\n    spanId,\n    sampled,\n    parentSpanId,\n    dsc,\n  };\n}\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nclass SentryPropagator extends core$1.W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n\n   constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new utils.LRUMap(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   inject(context, carrier, setter) {\n    if (core$1.isTracingSuppressed(context)) {\n      DEBUG_BUILD && utils.logger.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n\n    const activeSpan = api.trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n\n    const tracePropagationTargets = _optionalChain$6([core.getClient, 'call', _ => _(), 'optionalAccess', _2 => _2.getOptions, 'call', _3 => _3(), 'optionalAccess', _4 => _4.tracePropagationTargets]);\n    if (\n      typeof url === 'string' &&\n      tracePropagationTargets &&\n      !this._shouldInjectTraceData(tracePropagationTargets, url)\n    ) {\n      DEBUG_BUILD &&\n        utils.logger.log(\n          '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:',\n          url,\n        );\n      return;\n    }\n\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = api.propagation.getBaggage(context) || api.propagation.createBaggage({});\n\n    const { dynamicSamplingContext, traceId, spanId, sampled } = getInjectionData(context);\n\n    if (existingBaggageHeader) {\n      const baggageEntries = utils.parseBaggageHeader(existingBaggageHeader);\n\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, { value });\n        });\n      }\n    }\n\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${utils.SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== api.INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, utils.generateSentryTraceHeader(traceId, spanId, sampled));\n    }\n\n    super.inject(api.propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   extract(context, carrier, getter) {\n    const maybeSentryTraceHeader = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n\n    const sentryTrace = maybeSentryTraceHeader\n      ? Array.isArray(maybeSentryTraceHeader)\n        ? maybeSentryTraceHeader[0]\n        : maybeSentryTraceHeader\n      : undefined;\n\n    const propagationContext = utils.propagationContextFromHeaders(sentryTrace, baggage);\n\n    // Add remote parent span context\n    const ctxWithSpanContext = getContextWithRemoteActiveSpan(context, { sentryTrace, baggage });\n\n    // Also update the scope on the context (to be sure this is picked up everywhere)\n    const scopes = getScopesFromContext(ctxWithSpanContext);\n    const newScopes = {\n      scope: scopes ? scopes.scope.clone() : core.getCurrentScope().clone(),\n      isolationScope: scopes ? scopes.isolationScope : core.getIsolationScope(),\n    };\n    newScopes.scope.setPropagationContext(propagationContext);\n\n    return setScopesOnContext(ctxWithSpanContext, newScopes);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   fields() {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n\n  /** If we want to inject trace data for a given URL. */\n   _shouldInjectTraceData(tracePropagationTargets, url) {\n    if (tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = this._urlMatchesTargetsMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = utils.stringMatchesSomePattern(url, tracePropagationTargets);\n    this._urlMatchesTargetsMap.set(url, decision);\n    return decision;\n  }\n}\n\nfunction getInjectionData(context)\n\n {\n  const span = api.trace.getSpan(context);\n  const spanIsRemote = _optionalChain$6([span, 'optionalAccess', _5 => _5.spanContext, 'call', _6 => _6(), 'access', _7 => _7.isRemote]);\n\n  // If we have a local span, we can just pick everything from it\n  if (span && !spanIsRemote) {\n    const spanContext = span.spanContext();\n\n    const propagationContext = getPropagationContextFromSpan(span);\n    const dynamicSamplingContext = getDynamicSamplingContext(propagationContext, spanContext.traceId);\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext),\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  const scope = _optionalChain$6([getScopesFromContext, 'call', _8 => _8(context), 'optionalAccess', _9 => _9.scope]) || core.getCurrentScope();\n\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = getDynamicSamplingContext(propagationContext, propagationContext.traceId);\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.spanId,\n    sampled: propagationContext.sampled,\n  };\n}\n\n/** Get the DSC from a context, or fall back to use the one from the client. */\nfunction getDynamicSamplingContext(\n  propagationContext,\n  traceId,\n) {\n  // If we have a DSC on the propagation context, we just use it\n  if (_optionalChain$6([propagationContext, 'optionalAccess', _10 => _10.dsc])) {\n    return propagationContext.dsc;\n  }\n\n  // Else, we try to generate a new one\n  const client = core.getClient();\n\n  if (client) {\n    return core.getDynamicSamplingContextFromClient(traceId || propagationContext.traceId, client);\n  }\n\n  return undefined;\n}\n\nfunction getContextWithRemoteActiveSpan(\n  ctx,\n  { sentryTrace, baggage },\n) {\n  const propagationContext = utils.propagationContextFromHeaders(sentryTrace, baggage);\n\n  const spanContext = generateSpanContextForPropagationContext(propagationContext);\n  return api.trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nfunction continueTraceAsRemoteSpan(\n  ctx,\n  options,\n  callback,\n) {\n  const ctxWithSpanContext = getContextWithRemoteActiveSpan(ctx, options);\n\n  return api.context.with(ctxWithSpanContext, callback);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier) {\n  try {\n    const baggage = (carrier )[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span) {\n  const spanData = core.spanToJSON(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = _optionalChain$6([spanData, 'optionalAccess', _11 => _11[semanticConventions.SEMATTRS_HTTP_URL]]) || _optionalChain$6([spanData, 'optionalAccess', _12 => _12[semanticConventions.ATTR_URL_FULL]]);\n  if (urlAttribute) {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = _optionalChain$6([span, 'access', _13 => _13.spanContext, 'call', _14 => _14(), 'access', _15 => _15.traceState, 'optionalAccess', _16 => _16.get, 'call', _17 => _17(SENTRY_TRACE_STATE_URL)]);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n\n  return undefined;\n}\n\nfunction _optionalChain$5(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(\n        () => callback(span),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (core.spanToJSON(span).status === undefined) {\n            span.setStatus({ code: api.SpanStatusCode.ERROR });\n          }\n        },\n        () => span.end(),\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(\n  options,\n  callback,\n) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(\n        () => callback(span, () => span.end()),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (core.spanToJSON(span).status === undefined) {\n            span.setStatus({ code: api.SpanStatusCode.ERROR });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    const span = tracer.startSpan(name, spanOptions, ctx);\n\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const newContextWithActiveSpan = span ? api.trace.setSpan(api.context.active(), span) : api.trace.deleteSpan(api.context.active());\n  return api.context.with(newContextWithActiveSpan, () => callback(core.getCurrentScope()));\n}\n\nfunction getTracer() {\n  const client = core.getClient();\n  return (client && client.tracer) || api.trace.getTracer('@sentry/opentelemetry', core.SDK_VERSION);\n}\n\nfunction getSpanOptions(options) {\n  const { startTime, attributes, kind, op } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n\n  return {\n    attributes: op\n      ? {\n          [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n          ...attributes,\n        }\n      : attributes,\n    kind,\n    startTime: fixedStartTime,\n  };\n}\n\nfunction ensureTimestampInMilliseconds(timestamp) {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\n\nfunction getContext(scope, forceTransaction) {\n  const ctx = getContextForScope(scope);\n  const actualScope = _optionalChain$5([getScopesFromContext, 'call', _ => _(ctx), 'optionalAccess', _2 => _2.scope]);\n\n  const parentSpan = api.trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we need to \"simulate\" one to ensure the propagation context is correct\n  if (!parentSpan) {\n    const client = core.getClient();\n\n    if (actualScope && client) {\n      const propagationContext = actualScope.getPropagationContext();\n\n      // We store the DSC as OTEL trace state on the span context\n      const traceState = makeTraceState({\n        parentSpanId: propagationContext.parentSpanId,\n        // Not defined yet, we want to pick this up on-demand only\n        dsc: undefined,\n        sampled: propagationContext.sampled,\n      });\n\n      const spanOptions = {\n        traceId: propagationContext.traceId,\n        spanId: propagationContext.parentSpanId || propagationContext.spanId,\n        isRemote: true,\n        traceFlags: propagationContext.sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n        traceState,\n      };\n\n      // Add remote parent span context,\n      return api.trace.setSpanContext(ctx, spanOptions);\n    }\n\n    // if we have no scope or client, we just return the context as-is\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = api.trace.deleteSpan(ctx);\n\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = core.getRootSpan(parentSpan);\n  const dsc = core.getDynamicSamplingContextFromSpan(rootSpan);\n\n  const traceState = makeTraceState({\n    dsc,\n    parentSpanId: spanId !== api.INVALID_SPANID ? spanId : undefined,\n    sampled,\n  });\n\n  const spanOptions = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState,\n  };\n\n  const ctxWithSpanContext = api.trace.setSpanContext(ctxWithoutSpan, spanOptions);\n\n  return ctxWithSpanContext;\n}\n\nfunction getContextForScope(scope) {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n\n  return api.context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nfunction continueTrace(options, callback) {\n  return core.continueTrace(options, () => {\n    return continueTraceAsRemoteSpan(api.context.active(), options, callback);\n  });\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const ctx = core$1.suppressTracing(api.context.active());\n  return api.context.with(ctx, callback);\n}\n\nfunction _optionalChain$4(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n/** Ensure the `trace` context is set on all events. */\nfunction setupEventContextTrace(client) {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    const spanContext = span.spanContext();\n\n    // If we have a parent span id from trace state, use that ('' means no parent should be used)\n    // Else, pick the one from the span\n    const parentSpanIdFromTraceState = _optionalChain$4([spanContext, 'access', _ => _.traceState, 'optionalAccess', _2 => _2.get, 'call', _3 => _3(SENTRY_TRACE_STATE_PARENT_SPAN_ID)]);\n    const parent_span_id =\n      typeof parentSpanIdFromTraceState === 'string'\n        ? parentSpanIdFromTraceState || undefined\n        : spanHasParentId(span)\n          ? span.parentSpanId\n          : undefined;\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: utils.dropUndefinedKeys({\n        trace_id: spanContext.traceId,\n        span_id: spanContext.spanId,\n        parent_span_id,\n      }),\n      ...event.contexts,\n    };\n\n    const rootSpan = core.getRootSpan(span);\n\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(rootSpan),\n      ...event.sdkProcessingMetadata,\n    };\n\n    return event;\n  });\n}\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nfunction getTraceData() {\n  const headersObject = {};\n\n  api.propagation.inject(api.context.active(), headersObject);\n\n  if (!headersObject['sentry-trace']) {\n    return {};\n  }\n\n  return utils.dropUndefinedKeys({\n    'sentry-trace': headersObject['sentry-trace'],\n    baggage: headersObject.baggage,\n  });\n}\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nfunction setOpenTelemetryContextAsyncContextStrategy() {\n  function getScopes() {\n    const ctx = api.context.active();\n    const scopes = getScopesFromContext(ctx);\n\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope(),\n    };\n  }\n\n  function withScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return api.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n\n  function withSetScope(scope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n\n  function withIsolationScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function withSetIsolationScope(isolationScope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function getCurrentScope() {\n    return getScopes().scope;\n  }\n\n  function getIsolationScope() {\n    return getScopes().isolationScope;\n  }\n\n  core.setAsyncContextStrategy({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan ,\n  });\n}\n\nfunction _optionalChain$3(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nfunction wrapContextManagerClass(\n  ContextManagerClass,\n) {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n     constructor(...args) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n     with(\n      context,\n      fn,\n      thisArg,\n      ...args\n    ) {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = _optionalChain$3([currentScopes, 'optionalAccess', _ => _.scope]) || core.getCurrentScope();\n      const currentIsolationScope = _optionalChain$3([currentScopes, 'optionalAccess', _2 => _2.isolationScope]) || core.getIsolationScope();\n\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY) ;\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY) ;\n\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope =\n        isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = { scope: newCurrentScope, isolationScope: newIsolationScope };\n\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1\n        .deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n\n      setContextOnScope(newCurrentScope, ctx2);\n\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n\n  return SentryContextManager ;\n}\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nfunction groupSpansWithParents(spans) {\n  const nodeMap = new Map();\n\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nfunction getLocalParentId(span) {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? span.parentSpanId : undefined;\n}\n\nfunction createOrUpdateSpanNodeAndRefs(nodeMap, span) {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, { id, span, children: [] });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, { id, span, parentNode, children: [] });\n  parentNode.children.push(node);\n}\n\nfunction createOrGetParentNode(nodeMap, id) {\n  const existing = nodeMap.get(id);\n\n  if (existing) {\n    return existing;\n  }\n\n  return createOrUpdateNode(nodeMap, { id, children: [] });\n}\n\nfunction createOrUpdateNode(nodeMap, spanNode) {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing && existing.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated',\n} ;\n\nconst isStatusErrorMessageValid = (message) => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message );\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nfunction mapStatus(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === api.SpanStatusCode.OK) {\n      return { code: core.SPAN_STATUS_OK };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === api.SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return { code: core.SPAN_STATUS_ERROR, message: status.message };\n      } else {\n        return { code: core.SPAN_STATUS_ERROR, message: 'unknown_error' };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status && status.code === api.SpanStatusCode.UNSET) {\n    return { code: core.SPAN_STATUS_OK };\n  } else {\n    return { code: core.SPAN_STATUS_ERROR, message: 'unknown_error' };\n  }\n}\n\nfunction inferStatusFromAttributes(attributes) {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[semanticConventions.SEMATTRS_RPC_GRPC_STATUS_CODE];\n\n  const numberHttpCode =\n    typeof httpCodeAttribute === 'number'\n      ? httpCodeAttribute\n      : typeof httpCodeAttribute === 'string'\n        ? parseInt(httpCodeAttribute)\n        : undefined;\n\n  if (typeof numberHttpCode === 'number') {\n    return core.getSpanStatusFromHttpCode(numberHttpCode);\n  }\n\n  if (typeof grpcCodeAttribute === 'string') {\n    return { code: core.SPAN_STATUS_ERROR, message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error' };\n  }\n\n  return undefined;\n}\n\nfunction _optionalChain$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nclass SentrySpanExporter {\n\n   constructor(options) {\n    this._finishedSpans = [];\n    this._timeout = _optionalChain$2([options, 'optionalAccess', _ => _.timeout]) || DEFAULT_TIMEOUT;\n  }\n\n  /** Export a single span. */\n   export(span) {\n    this._finishedSpans.push(span);\n\n    // If the span has a local parent ID, we don't need to export anything just yet\n    if (getLocalParentId(span)) {\n      const openSpanCount = this._finishedSpans.length;\n      DEBUG_BUILD && utils.logger.log(`SpanExporter has ${openSpanCount} unsent spans remaining`);\n      this._cleanupOldSpans();\n      return;\n    }\n\n    this._clearTimeout();\n\n    // If we got a parent span, we try to send the span tree\n    // Wait a tick for this, to ensure we avoid race conditions\n    this._flushTimeout = setTimeout(() => {\n      this.flush();\n    }, 1);\n  }\n\n  /** Try to flush any pending spans immediately. */\n   flush() {\n    this._clearTimeout();\n\n    const openSpanCount = this._finishedSpans.length;\n\n    const remainingSpans = maybeSend(this._finishedSpans);\n\n    const remainingOpenSpanCount = remainingSpans.length;\n    const sentSpanCount = openSpanCount - remainingOpenSpanCount;\n\n    DEBUG_BUILD &&\n      utils.logger.log(`SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} unsent spans remaining`);\n\n    this._cleanupOldSpans(remainingSpans);\n  }\n\n  /** Clear the exporter. */\n   clear() {\n    this._finishedSpans = [];\n    this._clearTimeout();\n  }\n\n  /** Clear the flush timeout. */\n   _clearTimeout() {\n    if (this._flushTimeout) {\n      clearTimeout(this._flushTimeout);\n      this._flushTimeout = undefined;\n    }\n  }\n\n  /**\n   * Remove any span that is older than 5min.\n   * We do this to avoid leaking memory.\n   */\n   _cleanupOldSpans(spans = this._finishedSpans) {\n    const currentTimeSeconds = Date.now() / 1000;\n    this._finishedSpans = spans.filter(span => {\n      const shouldDrop = shouldCleanupSpan(span, currentTimeSeconds, this._timeout);\n      DEBUG_BUILD &&\n        shouldDrop &&\n        utils.logger.log(\n          `SpanExporter dropping span ${span.name} (${\n            span.spanContext().spanId\n          }) because it is pending for more than 5 minutes.`,\n        );\n      return !shouldDrop;\n    });\n  }\n}\n\n/**\n * Send the given spans, but only if they are part of a finished transaction.\n *\n * Returns the unsent spans.\n * Spans remain unsent when their parent span is not yet finished.\n * This will happen regularly, as child spans are generally finished before their parents.\n * But it _could_ also happen because, for whatever reason, a parent span was lost.\n * In this case, we'll eventually need to clean this up.\n */\nfunction maybeSend(spans) {\n  const grouped = groupSpansWithParents(spans);\n  const remaining = new Set(grouped);\n\n  const rootNodes = getCompletedRootNodes(grouped);\n\n  rootNodes.forEach(root => {\n    remaining.delete(root);\n    const span = root.span;\n    const transactionEvent = createTransactionForOtelSpan(span);\n\n    // We'll recursively add all the child spans to this array\n    const spans = transactionEvent.spans || [];\n\n    root.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, remaining);\n    });\n\n    // spans.sort() mutates the array, but we do not use this anymore after this point\n    // so we can safely mutate it here\n    transactionEvent.spans =\n      spans.length > MAX_SPAN_COUNT\n        ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n        : spans;\n\n    const measurements = core.timedEventsToMeasurements(span.events);\n    if (measurements) {\n      transactionEvent.measurements = measurements;\n    }\n\n    core.captureEvent(transactionEvent);\n  });\n\n  return Array.from(remaining)\n    .map(node => node.span)\n    .filter((span) => !!span);\n}\n\nfunction nodeIsCompletedRootNode(node) {\n  return !!node.span && !node.parentNode;\n}\n\nfunction getCompletedRootNodes(nodes) {\n  return nodes.filter(nodeIsCompletedRootNode);\n}\n\nfunction shouldCleanupSpan(span, currentTimeSeconds, maxStartTimeOffsetSeconds) {\n  const cutoff = currentTimeSeconds - maxStartTimeOffsetSeconds;\n  return core.spanTimeInputToSeconds(span.startTime) < cutoff;\n}\n\nfunction parseSpan(span) {\n  const attributes = span.attributes;\n\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ;\n  const op = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] ;\n  const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n  return { origin, op, source };\n}\n\nfunction createTransactionForOtelSpan(span) {\n  const { op, description, data, origin = 'manual', source } = getSpanData(span);\n  const capturedSpanScopes = core.getCapturedScopesOnSpan(span );\n\n  const sampleRate = span.attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ;\n\n  const attributes = utils.dropUndefinedKeys({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes),\n  });\n\n  const { traceId: trace_id, spanId: span_id } = span.spanContext();\n\n  const parentSpanIdFromTraceState = _optionalChain$2([span, 'access', _2 => _2.spanContext, 'call', _3 => _3(), 'access', _4 => _4.traceState, 'optionalAccess', _5 => _5.get, 'call', _6 => _6(SENTRY_TRACE_STATE_PARENT_SPAN_ID)]);\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take presedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id =\n    typeof parentSpanIdFromTraceState === 'string' ? parentSpanIdFromTraceState || undefined : span.parentSpanId;\n\n  const status = mapStatus(span);\n\n  const traceContext = utils.dropUndefinedKeys({\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: core.getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n  });\n\n  const transactionEvent = {\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes,\n      },\n    },\n    spans: [],\n    start_timestamp: core.spanTimeInputToSeconds(span.startTime),\n    timestamp: core.spanTimeInputToSeconds(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      ...utils.dropUndefinedKeys({\n        capturedSpanScope: capturedSpanScopes.scope,\n        capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n        sampleRate,\n        dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(span ),\n      }),\n    },\n    ...(source && {\n      transaction_info: {\n        source,\n      },\n    }),\n    _metrics_summary: core.getMetricSummaryJsonForSpan(span ),\n  };\n\n  return transactionEvent;\n}\n\nfunction createAndFinishSpanForOtelSpan(node, spans, remaining) {\n  remaining.delete(node);\n  const span = node.span;\n\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, remaining);\n    });\n    return;\n  }\n\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n\n  const { attributes, startTime, endTime, parentSpanId } = span;\n\n  const { op, description, data, origin = 'manual' } = getSpanData(span);\n  const allData = utils.dropUndefinedKeys({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data,\n  });\n\n  const status = mapStatus(span);\n\n  const spanJSON = utils.dropUndefinedKeys({\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: core.spanTimeInputToSeconds(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: core.spanTimeInputToSeconds(endTime) || undefined,\n    status: core.getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    _metrics_summary: core.getMetricSummaryJsonForSpan(span ),\n    measurements: core.timedEventsToMeasurements(span.events),\n  });\n\n  spans.push(spanJSON);\n\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, remaining);\n  });\n}\n\nfunction getSpanData(span)\n\n {\n  const { op: definedOp, source: definedSource, origin } = parseSpan(span);\n  const { op: inferredOp, description, source: inferredSource, data: inferredData } = parseSpanDescription(span);\n\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n\n  const data = { ...inferredData, ...getData(span) };\n\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data,\n  };\n}\n\n/**\n * Remove custom `sentry.` attribtues we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data) {\n  const cleanedData = { ...data };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\n\nfunction getData(span) {\n  const attributes = span.attributes;\n  const data = {};\n\n  if (span.kind !== api.SpanKind.INTERNAL) {\n    data['otel.kind'] = api.SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute ;\n  }\n\n  const requestData = getRequestSpanData(span);\n\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n\n  return data;\n}\n\nfunction _optionalChain$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\nfunction onSpanStart(span, parentContext) {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = api.trace.getSpan(parentContext);\n\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    core.addChildSpanToSpan(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan && parentSpan.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === api.ROOT_CONTEXT) {\n    scopes = {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope(),\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    core.setCapturedScopesOnSpan(span, scopes.scope, scopes.isolationScope);\n  }\n\n  core.logSpanStart(span);\n\n  const client = core.getClient();\n  _optionalChain$1([client, 'optionalAccess', _ => _.emit, 'call', _2 => _2('spanStart', span)]);\n}\n\nfunction onSpanEnd(span) {\n  core.logSpanEnd(span);\n\n  const client = core.getClient();\n  _optionalChain$1([client, 'optionalAccess', _3 => _3.emit, 'call', _4 => _4('spanEnd', span)]);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nclass SentrySpanProcessor  {\n\n   constructor(options) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async forceFlush() {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async shutdown() {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   onStart(span, parentContext) {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n   onEnd(span) {\n    onSpanEnd(span);\n\n    this._exporter.export(span);\n  }\n}\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nclass SentrySampler  {\n\n   constructor(client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n   shouldSample(\n    context,\n    traceId,\n    spanName,\n    spanKind,\n    spanAttributes,\n    _links,\n  ) {\n    const options = this._client.getOptions();\n\n    const parentSpan = api.trace.getSpan(context);\n    const parentContext = _optionalChain([parentSpan, 'optionalAccess', _ => _.spanContext, 'call', _2 => _2()]);\n\n    if (!core.hasTracingEnabled(options)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[semanticConventions.SEMATTRS_HTTP_METHOD] || spanAttributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === api.SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || _optionalChain([parentContext, 'optionalAccess', _3 => _3.isRemote]))) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op,\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes,\n    };\n\n    if (op) {\n      mergedAttributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n\n    const mutableSamplingDecision = { decision: true };\n    this._client.emit(\n      'beforeSampling',\n      {\n        spanAttributes: mergedAttributes,\n        spanName: inferredSpanName,\n        parentSampled: parentSampled,\n        parentContext: parentContext,\n      },\n      mutableSamplingDecision,\n    );\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const [sampled, sampleRate] = core.sampleSpan(options, {\n      name: inferredSpanName,\n      attributes: mergedAttributes,\n      transactionContext: {\n        name: inferredSpanName,\n        parentSampled,\n      },\n      parentSampled,\n    });\n\n    const attributes = {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    };\n\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD && utils.logger.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n\n      return {\n        ...wrapSamplingDecision({ decision: sdkTraceBase.SamplingDecision.NOT_RECORD, context, spanAttributes }),\n        attributes,\n      };\n    }\n\n    if (!sampled) {\n      return {\n        ...wrapSamplingDecision({ decision: sdkTraceBase.SamplingDecision.NOT_RECORD, context, spanAttributes }),\n        attributes,\n      };\n    }\n    return {\n      ...wrapSamplingDecision({ decision: sdkTraceBase.SamplingDecision.RECORD_AND_SAMPLED, context, spanAttributes }),\n      attributes,\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n   toString() {\n    return 'SentrySampler';\n  }\n}\n\nfunction getParentRemoteSampled(parentSpan) {\n  const traceId = parentSpan.spanContext().traceId;\n  const traceparentData = getPropagationContextFromSpan(parentSpan);\n\n  // Only inherit sampled if `traceId` is the same\n  return traceparentData && traceId === traceparentData.traceId ? traceparentData.sampled : undefined;\n}\n\nfunction getParentSampled(parentSpan, traceId, spanName) {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if (api.isSpanContextValid(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getParentRemoteSampled(parentSpan);\n      DEBUG_BUILD &&\n        utils.logger.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD && utils.logger.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nfunction wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes,\n}) {\n  const traceState = getBaseTraceState(context, spanAttributes);\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return { decision: sdkTraceBase.SamplingDecision.NOT_RECORD, traceState };\n  }\n\n  if (decision === sdkTraceBase.SamplingDecision.NOT_RECORD) {\n    return { decision, traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') };\n  }\n\n  return { decision, traceState };\n}\n\nfunction getBaseTraceState(context, spanAttributes) {\n  const parentSpan = api.trace.getSpan(context);\n  const parentContext = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.spanContext, 'call', _5 => _5()]);\n\n  let traceState = _optionalChain([parentContext, 'optionalAccess', _6 => _6.traceState]) || new core$1.TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[semanticConventions.SEMATTRS_HTTP_URL] || spanAttributes[semanticConventions.ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n\n  return traceState;\n}\n\n/**\n * This method takes an OpenTelemetry instrumentation or\n * array of instrumentations and registers them with OpenTelemetry.\n */\nfunction addOpenTelemetryInstrumentation(...instrumentations) {\n  instrumentation.registerInstrumentations({\n    instrumentations,\n  });\n}\n\nexports.getClient = core.getClient;\nexports.getCurrentHubShim = core.getCurrentHubShim;\nexports.getDynamicSamplingContextFromSpan = core.getDynamicSamplingContextFromSpan;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION;\nexports.SentryPropagator = SentryPropagator;\nexports.SentrySampler = SentrySampler;\nexports.SentrySpanProcessor = SentrySpanProcessor;\nexports.addOpenTelemetryInstrumentation = addOpenTelemetryInstrumentation;\nexports.continueTrace = continueTrace;\nexports.enhanceDscWithOpenTelemetryRootSpanName = enhanceDscWithOpenTelemetryRootSpanName;\nexports.generateSpanContextForPropagationContext = generateSpanContextForPropagationContext;\nexports.getActiveSpan = getActiveSpan;\nexports.getPropagationContextFromSpan = getPropagationContextFromSpan;\nexports.getRequestSpanData = getRequestSpanData;\nexports.getScopesFromContext = getScopesFromContext;\nexports.getSpanKind = getSpanKind;\nexports.isSentryRequestSpan = isSentryRequestSpan;\nexports.openTelemetrySetupCheck = openTelemetrySetupCheck;\nexports.setOpenTelemetryContextAsyncContextStrategy = setOpenTelemetryContextAsyncContextStrategy;\nexports.setupEventContextTrace = setupEventContextTrace;\nexports.spanHasAttributes = spanHasAttributes;\nexports.spanHasEvents = spanHasEvents;\nexports.spanHasKind = spanHasKind;\nexports.spanHasName = spanHasName;\nexports.spanHasParentId = spanHasParentId;\nexports.spanHasStatus = spanHasStatus;\nexports.startInactiveSpan = startInactiveSpan;\nexports.startSpan = startSpan;\nexports.startSpanManual = startSpanManual;\nexports.suppressTracing = suppressTracing;\nexports.withActiveSpan = withActiveSpan;\nexports.wrapClientClass = wrapClientClass;\nexports.wrapContextManagerClass = wrapContextManagerClass;\nexports.wrapSamplingDecision = wrapSamplingDecision;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\n");

/***/ })

};
;