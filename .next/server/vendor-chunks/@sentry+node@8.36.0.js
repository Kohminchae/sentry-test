/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry+node@8.36.0";
exports.ids = ["vendor-chunks/@sentry+node@8.36.0"];
exports.modules = {

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"__sentryRewritesTunnelPath__\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"__sentryBasePath\"] = undefined;globalThis[\"__rewriteFramesDistDir__\"] = \".next\";var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+core@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\n\nconst supportedVersions = ['>=8.0.0 <11'];\n\n/**\n * Custom instrumentation for nestjs.\n *\n * This hooks into\n * 1. @Injectable decorator, which is applied on class middleware, interceptors and guards.\n * 2. @Catch decorator, which is applied on exception filters.\n */\nclass SentryNestInstrumentation extends instrumentation.InstrumentationBase {\n   static  __initStatic() {this.COMPONENT = '@nestjs/common';}\n   static  __initStatic2() {this.COMMON_ATTRIBUTES = {\n    component: SentryNestInstrumentation.COMPONENT,\n  };}\n\n   constructor(config = {}) {\n    super('sentry-nestjs', utils.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(SentryNestInstrumentation.COMPONENT, supportedVersions);\n\n    moduleDef.files.push(\n      this._getInjectableFileInstrumentation(supportedVersions),\n      this._getCatchFileInstrumentation(supportedVersions),\n    );\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @Injectable decorator.\n   */\n   _getInjectableFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/injectable.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core.isWrapped(moduleExports.Injectable)) {\n          this._unwrap(moduleExports, 'Injectable');\n        }\n        this._wrap(moduleExports, 'Injectable', this._createWrapInjectable());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Injectable');\n      },\n    );\n  }\n\n  /**\n   * Wraps the @Catch decorator.\n   */\n   _getCatchFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/catch.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core.isWrapped(moduleExports.Catch)) {\n          this._unwrap(moduleExports, 'Catch');\n        }\n        this._wrap(moduleExports, 'Catch', this._createWrapCatch());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Catch');\n      },\n    );\n  }\n\n  /**\n   * Creates a wrapper function for the @Injectable decorator.\n   */\n   _createWrapInjectable() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapInjectable(original) {\n      return function wrappedInjectable(options) {\n        return function (target) {\n          // patch middleware\n          if (typeof target.prototype.use === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.use = new Proxy(target.prototype.use, {\n              apply: (originalUse, thisArgUse, argsUse) => {\n                const [req, res, next, ...args] = argsUse;\n\n                // Check that we can reasonably assume that the target is a middleware.\n                // Without these guards, instrumentation will fail if a function named 'use' on a service, which is\n                // decorated with @Injectable, is called.\n                if (!req || !res || !next || typeof next !== 'function') {\n                  return originalUse.apply(thisArgUse, argsUse);\n                }\n\n                const prevSpan = core$1.getActiveSpan();\n\n                return core$1.startSpanManual(helpers.getMiddlewareSpanOptions(target), (span) => {\n                  // proxy next to end span on call\n                  const nextProxy = helpers.getNextProxy(next, span, prevSpan);\n                  return originalUse.apply(thisArgUse, [req, res, nextProxy, args]);\n                });\n              },\n            });\n          }\n\n          // patch guards\n          if (typeof target.prototype.canActivate === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.canActivate = new Proxy(target.prototype.canActivate, {\n              apply: (originalCanActivate, thisArgCanActivate, argsCanActivate) => {\n                const context = argsCanActivate[0];\n\n                if (!context) {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                }\n\n                return core$1.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                });\n              },\n            });\n          }\n\n          // patch pipes\n          if (typeof target.prototype.transform === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.transform = new Proxy(target.prototype.transform, {\n              apply: (originalTransform, thisArgTransform, argsTransform) => {\n                const value = argsTransform[0];\n                const metadata = argsTransform[1];\n\n                if (!value || !metadata) {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                }\n\n                return core$1.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                });\n              },\n            });\n          }\n\n          // patch interceptors\n          if (typeof target.prototype.intercept === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.intercept = new Proxy(target.prototype.intercept, {\n              apply: (originalIntercept, thisArgIntercept, argsIntercept) => {\n                const context = argsIntercept[0];\n                const next = argsIntercept[1];\n\n                const parentSpan = core$1.getActiveSpan();\n                let afterSpan;\n\n                // Check that we can reasonably assume that the target is an interceptor.\n                if (!context || !next || typeof next.handle !== 'function') {\n                  return originalIntercept.apply(thisArgIntercept, argsIntercept);\n                }\n\n                return core$1.startSpanManual(helpers.getMiddlewareSpanOptions(target), (beforeSpan) => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  next.handle = new Proxy(next.handle, {\n                    apply: (originalHandle, thisArgHandle, argsHandle) => {\n                      beforeSpan.end();\n\n                      if (parentSpan) {\n                        return core$1.withActiveSpan(parentSpan, () => {\n                          const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                          if (!context._sentryInterceptorInstrumented) {\n                            utils.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                            afterSpan = core$1.startInactiveSpan(\n                              helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'),\n                            );\n                          }\n\n                          return handleReturnObservable;\n                        });\n                      } else {\n                        const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                        if (!context._sentryInterceptorInstrumented) {\n                          utils.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                          afterSpan = core$1.startInactiveSpan(helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'));\n                        }\n\n                        return handleReturnObservable;\n                      }\n                    },\n                  });\n\n                  let returnedObservableInterceptMaybePromise;\n\n                  try {\n                    returnedObservableInterceptMaybePromise = originalIntercept.apply(thisArgIntercept, argsIntercept);\n                  } catch (e) {\n                    _optionalChain([beforeSpan, 'optionalAccess', _ => _.end, 'call', _2 => _2()]);\n                    _optionalChain([afterSpan, 'optionalAccess', _3 => _3.end, 'call', _4 => _4()]);\n                    throw e;\n                  }\n\n                  if (!afterSpan) {\n                    return returnedObservableInterceptMaybePromise;\n                  }\n\n                  // handle async interceptor\n                  if (utils.isThenable(returnedObservableInterceptMaybePromise)) {\n                    return returnedObservableInterceptMaybePromise.then(\n                      observable => {\n                        helpers.instrumentObservable(observable, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                        return observable;\n                      },\n                      e => {\n                        _optionalChain([beforeSpan, 'optionalAccess', _5 => _5.end, 'call', _6 => _6()]);\n                        _optionalChain([afterSpan, 'optionalAccess', _7 => _7.end, 'call', _8 => _8()]);\n                        throw e;\n                      },\n                    );\n                  }\n\n                  // handle sync interceptor\n                  if (typeof returnedObservableInterceptMaybePromise.subscribe === 'function') {\n                    helpers.instrumentObservable(returnedObservableInterceptMaybePromise, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                  }\n\n                  return returnedObservableInterceptMaybePromise;\n                });\n              },\n            });\n          }\n\n          return original(options)(target);\n        };\n      };\n    };\n  }\n\n  /**\n   * Creates a wrapper function for the @Catch decorator. Used to instrument exception filters.\n   */\n   _createWrapCatch() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapCatch(original) {\n      return function wrappedCatch(...exceptions) {\n        return function (target) {\n          if (typeof target.prototype.catch === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(...exceptions)(target);\n            }\n\n            target.prototype.catch = new Proxy(target.prototype.catch, {\n              apply: (originalCatch, thisArgCatch, argsCatch) => {\n                const exception = argsCatch[0];\n                const host = argsCatch[1];\n\n                if (!exception || !host) {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                }\n\n                return core$1.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                });\n              },\n            });\n          }\n\n          return original(...exceptions)(target);\n        };\n      };\n    };\n  }\n}SentryNestInstrumentation.__initStatic();SentryNestInstrumentation.__initStatic2();\n\nexports.SentryNestInstrumentation = SentryNestInstrumentation;\n//# sourceMappingURL=sentry-nest-instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst replacements = [\n  ['january', '1'],\n  ['february', '2'],\n  ['march', '3'],\n  ['april', '4'],\n  ['may', '5'],\n  ['june', '6'],\n  ['july', '7'],\n  ['august', '8'],\n  ['september', '9'],\n  ['october', '10'],\n  ['november', '11'],\n  ['december', '12'],\n  ['jan', '1'],\n  ['feb', '2'],\n  ['mar', '3'],\n  ['apr', '4'],\n  ['may', '5'],\n  ['jun', '6'],\n  ['jul', '7'],\n  ['aug', '8'],\n  ['sep', '9'],\n  ['oct', '10'],\n  ['nov', '11'],\n  ['dec', '12'],\n  ['sunday', '0'],\n  ['monday', '1'],\n  ['tuesday', '2'],\n  ['wednesday', '3'],\n  ['thursday', '4'],\n  ['friday', '5'],\n  ['saturday', '6'],\n  ['sun', '0'],\n  ['mon', '1'],\n  ['tue', '2'],\n  ['wed', '3'],\n  ['thu', '4'],\n  ['fri', '5'],\n  ['sat', '6'],\n];\n\n/**\n * Replaces names in cron expressions\n */\nfunction replaceCronNames(cronExpression) {\n  return replacements.reduce(\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement),\n    cronExpression,\n  );\n}\n\nexports.replaceCronNames = replaceCronNames;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vY29tbW9uLmpzP2E2MjkiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgcmVwbGFjZW1lbnRzID0gW1xuICBbJ2phbnVhcnknLCAnMSddLFxuICBbJ2ZlYnJ1YXJ5JywgJzInXSxcbiAgWydtYXJjaCcsICczJ10sXG4gIFsnYXByaWwnLCAnNCddLFxuICBbJ21heScsICc1J10sXG4gIFsnanVuZScsICc2J10sXG4gIFsnanVseScsICc3J10sXG4gIFsnYXVndXN0JywgJzgnXSxcbiAgWydzZXB0ZW1iZXInLCAnOSddLFxuICBbJ29jdG9iZXInLCAnMTAnXSxcbiAgWydub3ZlbWJlcicsICcxMSddLFxuICBbJ2RlY2VtYmVyJywgJzEyJ10sXG4gIFsnamFuJywgJzEnXSxcbiAgWydmZWInLCAnMiddLFxuICBbJ21hcicsICczJ10sXG4gIFsnYXByJywgJzQnXSxcbiAgWydtYXknLCAnNSddLFxuICBbJ2p1bicsICc2J10sXG4gIFsnanVsJywgJzcnXSxcbiAgWydhdWcnLCAnOCddLFxuICBbJ3NlcCcsICc5J10sXG4gIFsnb2N0JywgJzEwJ10sXG4gIFsnbm92JywgJzExJ10sXG4gIFsnZGVjJywgJzEyJ10sXG4gIFsnc3VuZGF5JywgJzAnXSxcbiAgWydtb25kYXknLCAnMSddLFxuICBbJ3R1ZXNkYXknLCAnMiddLFxuICBbJ3dlZG5lc2RheScsICczJ10sXG4gIFsndGh1cnNkYXknLCAnNCddLFxuICBbJ2ZyaWRheScsICc1J10sXG4gIFsnc2F0dXJkYXknLCAnNiddLFxuICBbJ3N1bicsICcwJ10sXG4gIFsnbW9uJywgJzEnXSxcbiAgWyd0dWUnLCAnMiddLFxuICBbJ3dlZCcsICczJ10sXG4gIFsndGh1JywgJzQnXSxcbiAgWydmcmknLCAnNSddLFxuICBbJ3NhdCcsICc2J10sXG5dO1xuXG4vKipcbiAqIFJlcGxhY2VzIG5hbWVzIGluIGNyb24gZXhwcmVzc2lvbnNcbiAqL1xuZnVuY3Rpb24gcmVwbGFjZUNyb25OYW1lcyhjcm9uRXhwcmVzc2lvbikge1xuICByZXR1cm4gcmVwbGFjZW1lbnRzLnJlZHVjZShcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHNlbnRyeS1pbnRlcm5hbC9zZGsvbm8tcmVnZXhwLWNvbnN0cnVjdG9yXG4gICAgKGFjYywgW25hbWUsIHJlcGxhY2VtZW50XSkgPT4gYWNjLnJlcGxhY2UobmV3IFJlZ0V4cChuYW1lLCAnZ2knKSwgcmVwbGFjZW1lbnQpLFxuICAgIGNyb25FeHByZXNzaW9uLFxuICApO1xufVxuXG5leHBvcnRzLnJlcGxhY2VDcm9uTmFtZXMgPSByZXBsYWNlQ3Jvbk5hbWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/cron.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/cron.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentCron(lib, monitorSlug) {\n  let jobScheduled = false;\n\n  return new Proxy(lib, {\n    construct(target, args) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n\n      jobScheduled = true;\n\n      const cronString = common.replaceCronNames(cronTime);\n\n      async function monitoredTick(context, onComplete) {\n        return core.withMonitor(\n          monitorSlug,\n          async () => {\n            try {\n              await onTick(context, onComplete);\n            } catch (e) {\n              core.captureException(e);\n              throw e;\n            }\n          },\n          {\n            schedule: { type: 'crontab', value: cronString },\n            timezone: timeZone || undefined,\n          },\n        );\n      }\n\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop) {\n      if (prop === 'from') {\n        return (param) => {\n          const { cronTime, onTick, timeZone } = param;\n\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n\n          jobScheduled = true;\n\n          const cronString = common.replaceCronNames(cronTime);\n\n          param.onTick = async (context, onComplete) => {\n            return core.withMonitor(\n              monitorSlug,\n              async () => {\n                try {\n                  await onTick(context, onComplete);\n                } catch (e) {\n                  core.captureException(e);\n                  throw e;\n                }\n              },\n              {\n                schedule: { type: 'crontab', value: cronString },\n                timezone: timeZone || undefined,\n              },\n            );\n          };\n\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentCron = instrumentCron;\n//# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jcm9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQyw2SEFBYTs7QUFFcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLFlBQVk7QUFDcEQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixvQ0FBb0M7QUFDNUQ7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkJBQTZCOztBQUUvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsNEJBQTRCLG9DQUFvQztBQUNoRTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2Nyb24uanM/ZDYxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbi5qcycpO1xuXG5jb25zdCBFUlJPUl9URVhUID0gJ0F1dG9tYXRpYyBpbnN0cnVtZW50YXRpb24gb2YgQ3JvbkpvYiBvbmx5IHN1cHBvcnRzIGNyb250YWIgc3RyaW5nJztcblxuLyoqXG4gKiBJbnN0cnVtZW50cyB0aGUgYGNyb25gIGxpYnJhcnkgdG8gc2VuZCBhIGNoZWNrLWluIGV2ZW50IHRvIFNlbnRyeSBmb3IgZWFjaCBqb2IgZXhlY3V0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqIGltcG9ydCB7IENyb25Kb2IgfSBmcm9tICdjcm9uJztcbiAqXG4gKiBjb25zdCBDcm9uSm9iV2l0aENoZWNrSW4gPSBTZW50cnkuY3Jvbi5pbnN0cnVtZW50Q3JvbihDcm9uSm9iLCAnbXktY3Jvbi1qb2InKTtcbiAqXG4gKiAvLyB1c2UgdGhlIGNvbnN0cnVjdG9yXG4gKiBjb25zdCBqb2IgPSBuZXcgQ3JvbkpvYldpdGhDaGVja0luKCcqICogKiAqIConLCAoKSA9PiB7XG4gKiAgY29uc29sZS5sb2coJ1lvdSB3aWxsIHNlZSB0aGlzIG1lc3NhZ2UgZXZlcnkgbWludXRlJyk7XG4gKiB9KTtcbiAqXG4gKiAvLyBvciBmcm9tXG4gKiBjb25zdCBqb2IgPSBDcm9uSm9iV2l0aENoZWNrSW4uZnJvbSh7IGNyb25UaW1lOiAnKiAqICogKiAqJywgb25UaWNrOiAoKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCdZb3Ugd2lsbCBzZWUgdGhpcyBtZXNzYWdlIGV2ZXJ5IG1pbnV0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudENyb24obGliLCBtb25pdG9yU2x1Zykge1xuICBsZXQgam9iU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBjb25zdHJ1Y3QodGFyZ2V0LCBhcmdzKSB7XG4gICAgICBjb25zdCBbY3JvblRpbWUsIG9uVGljaywgb25Db21wbGV0ZSwgc3RhcnQsIHRpbWVab25lLCAuLi5yZXN0XSA9IGFyZ3M7XG5cbiAgICAgIGlmICh0eXBlb2YgY3JvblRpbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGpvYlNjaGVkdWxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgam9iIG5hbWVkICcke21vbml0b3JTbHVnfScgaGFzIGFscmVhZHkgYmVlbiBzY2hlZHVsZWRgKTtcbiAgICAgIH1cblxuICAgICAgam9iU2NoZWR1bGVkID0gdHJ1ZTtcblxuICAgICAgY29uc3QgY3JvblN0cmluZyA9IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGNyb25UaW1lKTtcblxuICAgICAgYXN5bmMgZnVuY3Rpb24gbW9uaXRvcmVkVGljayhjb250ZXh0LCBvbkNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGF3YWl0IG9uVGljayhjb250ZXh0LCBvbkNvbXBsZXRlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY3JvblN0cmluZyB9LFxuICAgICAgICAgICAgdGltZXpvbmU6IHRpbWVab25lIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IHRhcmdldChjcm9uVGltZSwgbW9uaXRvcmVkVGljaywgb25Db21wbGV0ZSwgc3RhcnQsIHRpbWVab25lLCAuLi5yZXN0KTtcbiAgICB9LFxuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmIChwcm9wID09PSAnZnJvbScpIHtcbiAgICAgICAgcmV0dXJuIChwYXJhbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgY3JvblRpbWUsIG9uVGljaywgdGltZVpvbmUgfSA9IHBhcmFtO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjcm9uVGltZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoam9iU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgam9iIG5hbWVkICcke21vbml0b3JTbHVnfScgaGFzIGFscmVhZHkgYmVlbiBzY2hlZHVsZWRgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBqb2JTY2hlZHVsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgY29uc3QgY3JvblN0cmluZyA9IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGNyb25UaW1lKTtcblxuICAgICAgICAgIHBhcmFtLm9uVGljayA9IGFzeW5jIChjb250ZXh0LCBvbkNvbXBsZXRlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29yZS53aXRoTW9uaXRvcihcbiAgICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgb25UaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlKTtcbiAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY3JvblN0cmluZyB9LFxuICAgICAgICAgICAgICAgIHRpbWV6b25lOiB0aW1lWm9uZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gdGFyZ2V0LmZyb20ocGFyYW0pO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Q3JvbiA9IGluc3RydW1lbnRDcm9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3Jvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/cron.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst cron$1 = __webpack_require__(/*! ./cron.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/cron.js\");\nconst nodeCron = __webpack_require__(/*! ./node-cron.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\");\nconst nodeSchedule = __webpack_require__(/*! ./node-schedule.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\");\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nconst cron = {\n  instrumentCron: cron$1.instrumentCron,\n  instrumentNodeCron: nodeCron.instrumentNodeCron,\n  instrumentNodeSchedule: nodeSchedule.instrumentNodeSchedule,\n};\n\nexports.cron = cron;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGVBQWUsbUJBQU8sQ0FBQyx5SEFBVztBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxtSUFBZ0I7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsMklBQW9COztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2luZGV4LmpzPzBlZjIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY3JvbiQxID0gcmVxdWlyZSgnLi9jcm9uLmpzJyk7XG5jb25zdCBub2RlQ3JvbiA9IHJlcXVpcmUoJy4vbm9kZS1jcm9uLmpzJyk7XG5jb25zdCBub2RlU2NoZWR1bGUgPSByZXF1aXJlKCcuL25vZGUtc2NoZWR1bGUuanMnKTtcblxuLyoqIE1ldGhvZHMgdG8gaW5zdHJ1bWVudCBjcm9uIGxpYnJhcmllcyBmb3IgU2VudHJ5IGNoZWNrLWlucyAqL1xuY29uc3QgY3JvbiA9IHtcbiAgaW5zdHJ1bWVudENyb246IGNyb24kMS5pbnN0cnVtZW50Q3JvbixcbiAgaW5zdHJ1bWVudE5vZGVDcm9uOiBub2RlQ3Jvbi5pbnN0cnVtZW50Tm9kZUNyb24sXG4gIGluc3RydW1lbnROb2RlU2NoZWR1bGU6IG5vZGVTY2hlZHVsZS5pbnN0cnVtZW50Tm9kZVNjaGVkdWxlLFxufTtcblxuZXhwb3J0cy5jcm9uID0gY3Jvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import * as cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression, callback, options] = argArray;\n\n            if (!_optionalChain([options, 'optionalAccess', _ => _.name])) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                options.name,\n                async () => {\n                  // We have to manually catch here and capture the exception because node-cron swallows errors\n                  // https://github.com/node-cron/node-cron/issues/399\n                  try {\n                    return await callback();\n                  } catch (e) {\n                    core.captureException(e);\n                    throw e;\n                  }\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                  timezone: _optionalChain([options, 'optionalAccess', _2 => _2.timezone]),\n                },\n              );\n            }\n\n            return target.apply(thisArg, [expression, monitoredCallback, options]);\n          },\n        });\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentNodeCron = instrumentNodeCron;\n//# sourceMappingURL=node-cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9ub2RlLWNyb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDJIQUFlOztBQUUzQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyx3SEFBYztBQUNuQyxlQUFlLG1CQUFPLENBQUMsNkhBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLE9BQU8scUJBQXFCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsOEJBQThCLDZEQUE2RDtBQUMzRjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL25vZGUtY3Jvbi5qcz8xYmU5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbi5qcycpO1xuXG4vKipcbiAqIFdyYXBzIHRoZSBgbm9kZS1jcm9uYCBsaWJyYXJ5IHdpdGggY2hlY2staW4gbW9uaXRvcmluZy5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gXCJAc2VudHJ5L25vZGVcIjtcbiAqIGltcG9ydCAqIGFzIGNyb24gZnJvbSBcIm5vZGUtY3JvblwiO1xuICpcbiAqIGNvbnN0IGNyb25XaXRoQ2hlY2tJbiA9IFNlbnRyeS5jcm9uLmluc3RydW1lbnROb2RlQ3Jvbihjcm9uKTtcbiAqXG4gKiBjcm9uV2l0aENoZWNrSW4uc2NoZWR1bGUoXG4gKiAgIFwiKiAqICogKiAqXCIsXG4gKiAgICgpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhcInJ1bm5pbmcgYSB0YXNrIGV2ZXJ5IG1pbnV0ZVwiKTtcbiAqICAgfSxcbiAqICAgeyBuYW1lOiBcIm15LWNyb24tam9iXCIgfSxcbiAqICk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE5vZGVDcm9uKGxpYikge1xuICByZXR1cm4gbmV3IFByb3h5KGxpYiwge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmIChwcm9wID09PSAnc2NoZWR1bGUnICYmIHRhcmdldC5zY2hlZHVsZSkge1xuICAgICAgICAvLyBXaGVuICdnZXQnIGlzIGNhbGxlZCBmb3Igc2NoZWR1bGUsIHJldHVybiBhIHByb3hpZWQgdmVyc2lvbiBvZiB0aGUgc2NoZWR1bGUgZnVuY3Rpb25cbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXQuc2NoZWR1bGUsIHtcbiAgICAgICAgICBhcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ0FycmF5KSB7XG4gICAgICAgICAgICBjb25zdCBbZXhwcmVzc2lvbiwgY2FsbGJhY2ssIG9wdGlvbnNdID0gYXJnQXJyYXk7XG5cbiAgICAgICAgICAgIGlmICghX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5uYW1lXSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIFwibmFtZVwiIGZvciBzY2hlZHVsZWQgam9iLiBBIG5hbWUgaXMgcmVxdWlyZWQgZm9yIFNlbnRyeSBjaGVjay1pbiBtb25pdG9yaW5nLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gbWFudWFsbHkgY2F0Y2ggaGVyZSBhbmQgY2FwdHVyZSB0aGUgZXhjZXB0aW9uIGJlY2F1c2Ugbm9kZS1jcm9uIHN3YWxsb3dzIGVycm9yc1xuICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGUtY3Jvbi9ub2RlLWNyb24vaXNzdWVzLzM5OVxuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHNjaGVkdWxlOiB7IHR5cGU6ICdjcm9udGFiJywgdmFsdWU6IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGV4cHJlc3Npb24pIH0sXG4gICAgICAgICAgICAgICAgICB0aW1lem9uZTogX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLnRpbWV6b25lXSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBbZXhwcmVzc2lvbiwgbW9uaXRvcmVkQ2FsbGJhY2ssIG9wdGlvbnNdKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE5vZGVDcm9uID0gaW5zdHJ1bWVudE5vZGVDcm9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1jcm9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback, callback] = argArray;\n\n            if (\n              typeof nameOrExpression !== 'string' ||\n              typeof expressionOrCallback !== 'string' ||\n              typeof callback !== 'function'\n            ) {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                monitorSlug,\n                async () => {\n                  await _optionalChain([callback, 'optionalCall', _ => _()]);\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                },\n              );\n            }\n\n            return target.apply(thisArg, [monitorSlug, expression, monitoredCallback]);\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n\nexports.instrumentNodeSchedule = instrumentNodeSchedule;\n//# sourceMappingURL=node-schedule.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9ub2RlLXNjaGVkdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQywySEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsd0hBQWM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLDZIQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw4QkFBOEIsNkRBQTZEO0FBQzNGLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL25vZGUtc2NoZWR1bGUuanM/YTM5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24uanMnKTtcblxuLyoqXG4gKiBJbnN0cnVtZW50cyB0aGUgYG5vZGUtc2NoZWR1bGVgIGxpYnJhcnkgdG8gc2VuZCBhIGNoZWNrLWluIGV2ZW50IHRvIFNlbnRyeSBmb3IgZWFjaCBqb2IgZXhlY3V0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqIGltcG9ydCAqIGFzIHNjaGVkdWxlIGZyb20gJ25vZGUtc2NoZWR1bGUnO1xuICpcbiAqIGNvbnN0IHNjaGVkdWxlV2l0aENoZWNrSW4gPSBTZW50cnkuY3Jvbi5pbnN0cnVtZW50Tm9kZVNjaGVkdWxlKHNjaGVkdWxlKTtcbiAqXG4gKiBjb25zdCBqb2IgPSBzY2hlZHVsZVdpdGhDaGVja0luLnNjaGVkdWxlSm9iKCdteS1jcm9uLWpvYicsICcqICogKiAqIConLCAoKSA9PiB7XG4gKiAgY29uc29sZS5sb2coJ1lvdSB3aWxsIHNlZSB0aGlzIG1lc3NhZ2UgZXZlcnkgbWludXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Tm9kZVNjaGVkdWxlKGxpYikge1xuICByZXR1cm4gbmV3IFByb3h5KGxpYiwge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmIChwcm9wID09PSAnc2NoZWR1bGVKb2InKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXQuc2NoZWR1bGVKb2IsIHtcbiAgICAgICAgICBhcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ0FycmF5KSB7XG4gICAgICAgICAgICBjb25zdCBbbmFtZU9yRXhwcmVzc2lvbiwgZXhwcmVzc2lvbk9yQ2FsbGJhY2ssIGNhbGxiYWNrXSA9IGFyZ0FycmF5O1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHR5cGVvZiBuYW1lT3JFeHByZXNzaW9uICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICB0eXBlb2YgZXhwcmVzc2lvbk9yQ2FsbGJhY2sgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgIHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIkF1dG9tYXRpYyBpbnN0cnVtZW50YXRpb24gb2YgJ25vZGUtc2NoZWR1bGUnIHJlcXVpcmVzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgb2YgJ3NjaGVkdWxlSm9iJyB0byBiZSBhIGpvYiBuYW1lIHN0cmluZyBhbmQgdGhlIHNlY29uZCBwYXJhbWV0ZXIgdG8gYmUgYSBjcm9udGFiIHN0cmluZ1wiLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtb25pdG9yU2x1ZyA9IG5hbWVPckV4cHJlc3Npb247XG4gICAgICAgICAgICBjb25zdCBleHByZXNzaW9uID0gZXhwcmVzc2lvbk9yQ2FsbGJhY2s7XG5cbiAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIG1vbml0b3JlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29yZS53aXRoTW9uaXRvcihcbiAgICAgICAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCBfb3B0aW9uYWxDaGFpbihbY2FsbGJhY2ssICdvcHRpb25hbENhbGwnLCBfID0+IF8oKV0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoZXhwcmVzc2lvbikgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIFttb25pdG9yU2x1ZywgZXhwcmVzc2lvbiwgbW9uaXRvcmVkQ2FsbGJhY2tdKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Tm9kZVNjaGVkdWxlID0gaW5zdHJ1bWVudE5vZGVTY2hlZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtc2NoZWR1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcz9mMzY4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst nodeFetch = __webpack_require__(/*! ./integrations/node-fetch.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst console = __webpack_require__(/*! ./integrations/console.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ./integrations/context.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ./integrations/contextlines.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/local-variables/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ./integrations/modules.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst onuncaughtexception = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/anr/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./integrations/tracing/fastify.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst nest = __webpack_require__(/*! ./integrations/tracing/nest/nest.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst spotlight = __webpack_require__(/*! ./integrations/spotlight.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst processThread = __webpack_require__(/*! ./integrations/processThread.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js\");\nconst contextManager = __webpack_require__(/*! ./otel/contextManager.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst instrument = __webpack_require__(/*! ./otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst index$4 = __webpack_require__(/*! ./sdk/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst api = __webpack_require__(/*! ./sdk/api.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst module$1 = __webpack_require__(/*! ./utils/module.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\nconst http = __webpack_require__(/*! ./transports/http.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst client = __webpack_require__(/*! ./sdk/client.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst index$6 = __webpack_require__(/*! ./cron/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n\n\nexports.httpIntegration = index.httpIntegration;\nexports.nativeNodeFetchIntegration = nodeFetch.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.consoleIntegration = console.consoleIntegration;\nexports.nodeContextIntegration = context.nodeContextIntegration;\nexports.contextLinesIntegration = contextlines.contextLinesIntegration;\nexports.localVariablesIntegration = index$1.localVariablesIntegration;\nexports.modulesIntegration = modules.modulesIntegration;\nexports.onUncaughtExceptionIntegration = onuncaughtexception.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = onunhandledrejection.onUnhandledRejectionIntegration;\nexports.anrIntegration = index$2.anrIntegration;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = fastify.fastifyIntegration;\nexports.setupFastifyErrorHandler = fastify.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.nestIntegration = nest.nestIntegration;\nexports.setupNestErrorHandler = nest.setupNestErrorHandler;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$3.hapiIntegration;\nexports.setupHapiErrorHandler = index$3.setupHapiErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.spotlightIntegration = spotlight.spotlightIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.processThreadBreadcrumbIntegration = processThread.processThreadBreadcrumbIntegration;\nexports.SentryContextManager = contextManager.SentryContextManager;\nexports.generateInstrumentOnce = instrument.generateInstrumentOnce;\nexports.getDefaultIntegrations = index$4.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$4.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$4.init;\nexports.initWithoutDefaultIntegrations = index$4.initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = index$4.validateOpenTelemetrySetup;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$5.getAutoPerformanceIntegrations;\nexports.defaultStackParser = api.defaultStackParser;\nexports.getSentryRelease = api.getSentryRelease;\nexports.createGetModuleFromFilename = module$1.createGetModuleFromFilename;\nexports.makeNodeTransport = http.makeNodeTransport;\nexports.NodeClient = client.NodeClient;\nexports.cron = index$6.cron;\nexports.DEFAULT_USER_INCLUDES = utils.DEFAULT_USER_INCLUDES;\nexports.addRequestDataToEvent = utils.addRequestDataToEvent;\nexports.extractRequestData = utils.extractRequestData;\nexports.addOpenTelemetryInstrumentation = opentelemetry.addOpenTelemetryInstrumentation;\nexports.continueTrace = opentelemetry.continueTrace;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.createTransport = core.createTransport;\nexports.debugIntegration = core.debugIntegration;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentHub = core.getCurrentHub;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.metrics = core.metricsDefault;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.sessionTimingIntegration = core.sessionTimingIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain,\n  _optionalChainDelete\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = '';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\nfunction log(message, ...args) {\n  utils.logger.log(`[ANR] ${message}`, ...args);\n}\n\nfunction globalWithScopeFetchFn() {\n  return utils.GLOBAL_OBJ;\n}\n\n/** Fetches merged scope data */\nfunction getScopeData() {\n  const scope = core.getGlobalScope().getScopeData();\n  core.mergeScopeData(scope, core.getIsolationScope().getScopeData());\n  core.mergeScopeData(scope, core.getCurrentScope().getScopeData());\n\n  // We remove attachments because they likely won't serialize well as json\n  scope.attachments = [];\n  // We can't serialize event processor functions\n  scope.eventProcessors = [];\n\n  return scope;\n}\n\n/**\n * Gets contexts by calling all event processors. This shouldn't be called until all integrations are setup\n */\nasync function getContexts(client) {\n  let event = { message: 'ANR' };\n  const eventHint = {};\n\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n\n  return _optionalChain([event, 'optionalAccess', _2 => _2.contexts]) || {};\n}\n\nconst INTEGRATION_NAME = 'Anr';\n\nconst _anrIntegration = ((options = {}) => {\n  if (nodeVersion.NODE_VERSION.major < 16 || (nodeVersion.NODE_VERSION.major === 16 && nodeVersion.NODE_VERSION.minor < 17)) {\n    throw new Error('ANR detection requires Node 16.17.0 or later');\n  }\n\n  let worker;\n  let client;\n\n  // Hookup the scope fetch function to the global object so that it can be called from the worker thread via the\n  // debugger when it pauses\n  const gbl = globalWithScopeFetchFn();\n  gbl.__SENTRY_GET_SCOPES__ = getScopeData;\n\n  return {\n    name: INTEGRATION_NAME,\n    startWorker: () => {\n      if (worker) {\n        return;\n      }\n\n      if (client) {\n        worker = _startWorker(client, options);\n      }\n    },\n    stopWorker: () => {\n      if (worker) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        worker.then(stop => {\n          stop();\n          worker = undefined;\n        });\n      }\n    },\n    setup(initClient) {\n      client = initClient;\n\n      // setImmediate is used to ensure that all other integrations have had their setup called first.\n      // This allows us to call into all integrations to fetch the full context\n      setImmediate(() => this.startWorker());\n    },\n  } ;\n}) ;\n\nconst anrIntegration = core.defineIntegration(_anrIntegration) ;\n\n/**\n * Starts the ANR worker thread\n *\n * @returns A function to stop the worker\n */\nasync function _startWorker(\n  client,\n  integrationOptions,\n) {\n  const dsn = client.getDsn();\n\n  if (!dsn) {\n    return () => {\n      //\n    };\n  }\n\n  const contexts = await getContexts(client);\n\n  // These will not be accurate if sent later from the worker thread\n   _optionalChainDelete([contexts, 'access', _3 => _3.app, 'optionalAccess', _4 => delete _4.app_memory]);\n   _optionalChainDelete([contexts, 'access', _5 => _5.device, 'optionalAccess', _6 => delete _6.free_memory]);\n\n  const initOptions = client.getOptions();\n\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n\n  const options = {\n    debug: utils.logger.isEnabled(),\n    dsn,\n    tunnel: initOptions.tunnel,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: integrationOptions.appRootPath,\n    pollInterval: integrationOptions.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: integrationOptions.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!integrationOptions.captureStackTrace,\n    staticTags: integrationOptions.staticTags || {},\n    contexts,\n  };\n\n  if (options.captureStackTrace) {\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n    // We don't want any Node args to be passed to the worker\n    execArgv: [],\n  });\n\n  process.on('exit', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n  });\n\n  const timer = setInterval(() => {\n    try {\n      const currentSession = core.getCurrentScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? { ...currentSession, toJSON: undefined } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({ session });\n    } catch (_) {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n\n  worker.on('message', (msg) => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      core.getCurrentScope().setSession(undefined);\n    }\n  });\n\n  worker.once('error', (err) => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n\n  worker.once('exit', (code) => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n    clearInterval(timer);\n  };\n}\n\nexports.anrIntegration = anrIntegration;\nexports.base64WorkerScript = base64WorkerScript;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Capture console logs as breadcrumbs.\n */\nconst consoleIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      utils.addConsoleInstrumentationHandler(({ args, level }) => {\n        if (core.getClient() !== client) {\n          return;\n        }\n\n        core.addBreadcrumb(\n          {\n            category: 'console',\n            level: utils.severityLevelFromString(level),\n            message: utils.truncate(util.format.apply(undefined, args), 2048), // 2KB\n          },\n          {\n            input: [...args],\n            level,\n          },\n        );\n      });\n    },\n  };\n});\n\nexports.consoleIntegration = consoleIntegration;\n//# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsNEJBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQywySEFBZTs7QUFFckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsYUFBYTtBQUM3RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRCwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9jb25zb2xlLmpzP2ExMDIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ25vZGU6dXRpbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQ29uc29sZSc7XG5cbi8qKlxuICogQ2FwdHVyZSBjb25zb2xlIGxvZ3MgYXMgYnJlYWRjcnVtYnMuXG4gKi9cbmNvbnN0IGNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICB1dGlscy5hZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlcigoeyBhcmdzLCBsZXZlbCB9KSA9PiB7XG4gICAgICAgIGlmIChjb3JlLmdldENsaWVudCgpICE9PSBjbGllbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICdjb25zb2xlJyxcbiAgICAgICAgICAgIGxldmVsOiB1dGlscy5zZXZlcml0eUxldmVsRnJvbVN0cmluZyhsZXZlbCksXG4gICAgICAgICAgICBtZXNzYWdlOiB1dGlscy50cnVuY2F0ZSh1dGlsLmZvcm1hdC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpLCAyMDQ4KSwgLy8gMktCXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnB1dDogWy4uLmFyZ3NdLFxuICAgICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuZXhwb3J0cy5jb25zb2xlSW50ZWdyYXRpb24gPSBjb25zb2xlSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_child_process = __webpack_require__(/*! node:child_process */ \"node:child_process\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\nconst readFileAsync = util.promisify(node_fs.readFile);\nconst readDirAsync = util.promisify(node_fs.readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\n\nconst INTEGRATION_NAME = 'Context';\n\nconst _nodeContextIntegration = ((options = {}) => {\n  let cachedContext;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ..._optionalChain([event, 'access', _ => _.contexts, 'optionalAccess', _2 => _2.app]) },\n      os: { ...updatedContext.os, ..._optionalChain([event, 'access', _3 => _3.contexts, 'optionalAccess', _4 => _4.os]) },\n      device: { ...updatedContext.device, ..._optionalChain([event, 'access', _5 => _5.contexts, 'optionalAccess', _6 => _6.device]) },\n      culture: { ...updatedContext.culture, ..._optionalChain([event, 'access', _7 => _7.contexts, 'optionalAccess', _8 => _8.culture]) },\n      cloud_resource: { ...updatedContext.cloud_resource, ..._optionalChain([event, 'access', _9 => _9.contexts, 'optionalAccess', _10 => _10.cloud_resource]) },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) ;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nconst nodeContextIntegration = core.defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n\n  if (_optionalChain([contexts, 'optionalAccess', _11 => _11.app, 'optionalAccess', _12 => _12.app_memory])) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _13 => _13.app, 'optionalAccess', _14 => _14.free_memory]) && typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _15 => _15.availableMemory, 'optionalCall', _16 => _16()]);\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _17 => _17.device, 'optionalAccess', _18 => _18.free_memory])) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext() {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (typeof (process.versions ).icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext = { app_start_time, app_memory };\n\n  if (typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _19 => _19.availableMemory, 'optionalCall', _20 => _20()]);\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus();\n    const firstCpu = cpuInfo && cpuInfo[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS\n\n = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      node_child_process.execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return (name.split(' ') )[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = node_path.join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) ).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = _optionalChain([LINUX_VERSIONS, 'access', _21 => _21[id], 'optionalCall', _22 => _22(contents)]);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexports.getAppContext = getAppContext;\nexports.getDeviceContext = getDeviceContext;\nexports.nodeContextIntegration = nodeContextIntegration;\nexports.readDirAsync = readDirAsync;\nexports.readFileAsync = readFileAsync;\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_readline = __webpack_require__(/*! node:readline */ \"node:readline\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst LRU_FILE_CONTENTS_CACHE = new utils.LRUMap(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new utils.LRUMap(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\n\n/**\n * Get or init map value\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines, linecontext) {\n  if (!lines.length) {\n    return [];\n  }\n\n  let i = 0;\n  const line = lines[0];\n\n  if (typeof line !== 'number') {\n    return [];\n  }\n\n  let current = makeContextRange(line, linecontext);\n  const out = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = node_fs.createReadStream(path);\n    const lineReaded = node_readline.createInterface({\n      input: stream,\n    });\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      resolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e) {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      debugBuild.DEBUG_BUILD && utils.logger.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      resolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', resolve);\n\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = utils.snipLine(line, 0);\n\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event, contextLines) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n\n  if (contextLines > 0 && _optionalChain([event, 'access', _ => _.exception, 'optionalAccess', _2 => _2.values])) {\n    for (const exception of event.exception.values) {\n      if (!_optionalChain([exception, 'access', _3 => _3.stacktrace, 'optionalAccess', _4 => _4.frames, 'optionalAccess', _5 => _5.length])) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        const filename = _optionalChain([frame, 'optionalAccess', _6 => _6.filename]);\n\n        if (\n          !frame ||\n          typeof filename !== 'string' ||\n          typeof frame.lineno !== 'number' ||\n          shouldSkipContextLinesForFile(filename) ||\n          shouldSkipContextLinesForFrame(frame)\n        ) {\n          continue;\n        }\n\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    debugBuild.DEBUG_BUILD && utils.logger.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && _optionalChain([event, 'access', _7 => _7.exception, 'optionalAccess', _8 => _8.values])) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace && exception.stacktrace.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(\n  frames,\n  contextLines,\n  cache,\n) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nfunction addContextToFrame(\n  lineno,\n  frame,\n  contextLines,\n  contents,\n) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    debugBuild.DEBUG_BUILD && utils.logger.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      debugBuild.DEBUG_BUILD && utils.logger.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    debugBuild.DEBUG_BUILD && utils.logger.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n\n  frame.context_line = contents[lineno];\n\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\n\n// Compute inclusive end context range\nfunction makeRangeStart(line, linecontext) {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line, linecontext) {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line, linecontext) {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nconst _contextLinesIntegration = ((options = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) ;\n\n/**\n * Capture the lines before and after the frame's context.\n */\nconst contextLinesIntegration = core.defineIntegration(_contextLinesIntegration);\n\nexports.MAX_CONTEXTLINES_COLNO = MAX_CONTEXTLINES_COLNO;\nexports.MAX_CONTEXTLINES_LINENO = MAX_CONTEXTLINES_LINENO;\nexports._contextLinesIntegration = _contextLinesIntegration;\nexports.addContextToFrame = addContextToFrame;\nexports.contextLinesIntegration = contextLinesIntegration;\n//# sourceMappingURL=contextlines.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-fs@0.16.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        instrument.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsMEJBQTBCLG1CQUFPLENBQUMsZ05BQW1DO0FBQ3JFLGFBQWEsbUJBQU8sQ0FBQyx3SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQywySUFBdUI7O0FBRWxEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG1CQUFtQjtBQUN6RCxzQ0FBc0MsYUFBYTs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZnMuanM/NGNmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25GcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0ZpbGVTeXN0ZW0nO1xuXG4vKipcbiAqIFRoaXMgaW50ZWdyYXRpb24gd2lsbCBjcmVhdGUgc3BhbnMgZm9yIGBmc2AgQVBJIG9wZXJhdGlvbnMsIGxpa2UgcmVhZGluZyBhbmQgd3JpdGluZyBmaWxlcy5cbiAqXG4gKiAqKldBUk5JTkc6KiogVGhpcyBpbnRlZ3JhdGlvbiBtYXkgYWRkIHNpZ25pZmljYW50IG92ZXJoZWFkIHRvIHlvdXIgYXBwbGljYXRpb24uIEVzcGVjaWFsbHkgaW4gc2NlbmFyaW9zIHdpdGggYSBsb3Qgb2ZcbiAqIGZpbGUgSS9PLCBsaWtlIGZvciBleGFtcGxlIHdoZW4gcnVubmluZyBhIGZyYW1ld29yayBkZXYgc2VydmVyLCBpbmNsdWRpbmcgdGhpcyBpbnRlZ3JhdGlvbiBjYW4gbWFzc2l2ZWx5IHNsb3cgZG93blxuICogeW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIGZvciB0aGlzIGludGVncmF0aW9uLlxuICovXG5jb25zdCBmc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihcbiAgKFxuICAgIG9wdGlvbnNcblxuID0ge30sXG4gICkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgICAgc2V0dXBPbmNlKCkge1xuICAgICAgICBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gICAgICAgICAgSU5URUdSQVRJT05fTkFNRSxcbiAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgbmV3IGluc3RydW1lbnRhdGlvbkZzLkZzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgICAgICAgICAgcmVxdWlyZVBhcmVudFNwYW46IHRydWUsXG4gICAgICAgICAgICAgIGVuZEhvb2soZnVuY3Rpb25OYW1lLCB7IGFyZ3MsIHNwYW4sIGVycm9yIH0pIHtcbiAgICAgICAgICAgICAgICBzcGFuLnVwZGF0ZU5hbWUoYGZzLiR7ZnVuY3Rpb25OYW1lfWApO1xuXG4gICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiAnZmlsZScsXG4gICAgICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmZpbGUuZnMnLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVjb3JkRXJyb3JNZXNzYWdlc0FzU3BhbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiYgRlNfT1BFUkFUSU9OU19XSVRIX1BBVEhfQVJHLmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3BhdGhfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgRlNfT1BFUkFUSU9OU19XSVRIX1RBUkdFVF9QQVRILmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgndGFyZ2V0X2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdwYXRoX2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJiBGU19PUEVSQVRJT05TX1dJVEhfUFJFRklYLmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3ByZWZpeF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfRVhJU1RJTkdfUEFUSF9ORVdfUEFUSC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2V4aXN0aW5nX3BhdGhfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ25ld19wYXRoX2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9TUkNfREVTVC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3NyY19hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZGVzdF9hcmd1bWVudCcsIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfT0xEX1BBVEhfTkVXX1BBVEguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdvbGRfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnbmV3X3BhdGhfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgJiYgb3B0aW9ucy5yZWNvcmRFcnJvck1lc3NhZ2VzQXNTcGFuQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2ZzX2Vycm9yJywgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICkoKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcbik7XG5cbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9PTERfUEFUSF9ORVdfUEFUSCA9IFsncmVuYW1lJywgJ3JlbmFtZVN5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9TUkNfREVTVCA9IFsnY29weUZpbGUnLCAnY3AnLCAnY29weUZpbGVTeW5jJywgJ2NwU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX0VYSVNUSU5HX1BBVEhfTkVXX1BBVEggPSBbJ2xpbmsnLCAnbGlua1N5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9QUkVGSVggPSBbJ21rZHRlbXAnLCAnbWtkdGVtcFN5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9UQVJHRVRfUEFUSCA9IFsnc3ltbGluaycsICdzeW1saW5rU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1BBVEhfQVJHID0gW1xuICAnYWNjZXNzJyxcbiAgJ2FwcGVuZEZpbGUnLFxuICAnY2htb2QnLFxuICAnY2hvd24nLFxuICAnZXhpc3RzJyxcbiAgJ21rZGlyJyxcbiAgJ2xjaG93bicsXG4gICdsc3RhdCcsXG4gICdsdXRpbWVzJyxcbiAgJ29wZW4nLFxuICAnb3BlbmRpcicsXG4gICdyZWFkZGlyJyxcbiAgJ3JlYWRGaWxlJyxcbiAgJ3JlYWRsaW5rJyxcbiAgJ3JlYWxwYXRoJyxcbiAgJ3JlYWxwYXRoLm5hdGl2ZScsXG4gICdybScsXG4gICdybWRpcicsXG4gICdzdGF0JyxcbiAgJ3RydW5jYXRlJyxcbiAgJ3VubGluaycsXG4gICd1dGltZXMnLFxuICAnd3JpdGVGaWxlJyxcbiAgJ2FjY2Vzc1N5bmMnLFxuICAnYXBwZW5kRmlsZVN5bmMnLFxuICAnY2htb2RTeW5jJyxcbiAgJ2Nob3duU3luYycsXG4gICdleGlzdHNTeW5jJyxcbiAgJ2xjaG93blN5bmMnLFxuICAnbHN0YXRTeW5jJyxcbiAgJ2x1dGltZXNTeW5jJyxcbiAgJ29wZW5kaXJTeW5jJyxcbiAgJ21rZGlyU3luYycsXG4gICdvcGVuU3luYycsXG4gICdyZWFkZGlyU3luYycsXG4gICdyZWFkRmlsZVN5bmMnLFxuICAncmVhZGxpbmtTeW5jJyxcbiAgJ3JlYWxwYXRoU3luYycsXG4gICdyZWFscGF0aFN5bmMubmF0aXZlJyxcbiAgJ3JtZGlyU3luYycsXG4gICdybVN5bmMnLFxuICAnc3RhdFN5bmMnLFxuICAndHJ1bmNhdGVTeW5jJyxcbiAgJ3VubGlua1N5bmMnLFxuICAndXRpbWVzU3luYycsXG4gICd3cml0ZUZpbGVTeW5jJyxcbl07XG5cbmV4cG9ydHMuZnNJbnRlZ3JhdGlvbiA9IGZzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+core@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nclass SentryHttpInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-http', core.VERSION, config);\n  }\n\n  /** @inheritdoc */\n   init() {\n    return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n  }\n\n  /** Get the instrumentation for the http module. */\n   _getHttpInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'http',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /** Get the instrumentation for the https module. */\n   _getHttpsInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'https',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /**\n   * Patch the incoming request function for request isolation.\n   */\n   _getPatchIncomingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (\n      original,\n    ) => {\n      return function incomingRequest( event, ...args) {\n        // Only traces request events\n        if (event !== 'request') {\n          return original.apply(this, [event, ...args]);\n        }\n\n        instrumentation._diag.debug('http instrumentation for incoming request');\n\n        const request = args[0] ;\n\n        const isolationScope = core$1.getIsolationScope().clone();\n\n        // Update the isolation scope, isolate this request\n        isolationScope.setSDKProcessingMetadata({ request });\n\n        const client = core$1.getClient();\n        if (client && client.getOptions().autoSessionTracking) {\n          isolationScope.setRequestSession({ status: 'ok' });\n        }\n\n        // attempt to update the scope's `transactionName` based on the request URL\n        // Ideally, framework instrumentations coming after the HttpInstrumentation\n        // update the transactionName once we get a parameterized route.\n        const httpMethod = (request.method || 'GET').toUpperCase();\n        const httpTarget = utils.stripUrlQueryAndFragment(request.url || '/');\n\n        const bestEffortTransactionName = `${httpMethod} ${httpTarget}`;\n\n        isolationScope.setTransactionName(bestEffortTransactionName);\n\n        return core$1.withIsolationScope(isolationScope, () => {\n          return original.apply(this, [event, ...args]);\n        });\n      };\n    };\n  }\n\n  /**\n   * Patch the outgoing request function for breadcrumbs.\n   */\n   _getPatchOutgoingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (original) => {\n      return function outgoingRequest( ...args) {\n        instrumentation._diag.debug('http instrumentation for outgoing requests');\n\n        // Making a copy to avoid mutating the original args array\n        // We need to access and reconstruct the request options object passed to `ignoreOutgoingRequests`\n        // so that it matches what Otel instrumentation passes to `ignoreOutgoingRequestHook`.\n        // @see https://github.com/open-telemetry/opentelemetry-js/blob/7293e69c1e55ca62e15d0724d22605e61bd58952/experimental/packages/opentelemetry-instrumentation-http/src/http.ts#L756-L789\n        const argsCopy = [...args];\n\n        const options = argsCopy.shift() ;\n\n        const extraOptions =\n          typeof argsCopy[0] === 'object' && (typeof options === 'string' || options instanceof URL)\n            ? (argsCopy.shift() )\n            : undefined;\n\n        const { optionsParsed } = instrumentationHttp.getRequestInfo(options, extraOptions);\n\n        const request = original.apply(this, args) ;\n\n        request.prependListener('response', (response) => {\n          const _breadcrumbs = instrumentation.getConfig().breadcrumbs;\n          const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n          const _ignoreOutgoingRequests = instrumentation.getConfig().ignoreOutgoingRequests;\n          const shouldCreateBreadcrumb =\n            typeof _ignoreOutgoingRequests === 'function'\n              ? !_ignoreOutgoingRequests(getRequestUrl.getRequestUrl(request), optionsParsed)\n              : true;\n\n          if (breadCrumbsEnabled && shouldCreateBreadcrumb) {\n            addRequestBreadcrumb(request, response);\n          }\n        });\n\n        return request;\n      };\n    };\n  }\n\n  /** Path the outgoing get function for breadcrumbs. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n   _getPatchOutgoingGetFunction(clientRequest) {\n    return (_original) => {\n      // Re-implement http.get. This needs to be done (instead of using\n      // getPatchOutgoingRequestFunction to patch it) because we need to\n      // set the trace context header before the returned http.ClientRequest is\n      // ended. The Node.js docs state that the only differences between\n      // request and get are that (1) get defaults to the HTTP GET method and\n      // (2) the returned request object is ended immediately. The former is\n      // already true (at least in supported Node versions up to v10), so we\n      // simply follow the latter. Ref:\n      // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n      // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n      return function outgoingGetRequest(...args) {\n        const req = clientRequest(...args);\n        req.end();\n        return req;\n      };\n    };\n  }\n}\n\n/**\n * This is a minimal version of `wrap` from shimmer:\n * https://github.com/othiym23/shimmer/blob/master/index.js\n *\n * In contrast to the original implementation, this version does not allow to unwrap,\n * and does not make it clear that the method is wrapped.\n * This is necessary because we want to wrap the http module with our own code,\n * while still allowing to use the HttpInstrumentation from OTEL.\n *\n * Without this, if we'd just use `wrap` from shimmer, the OTEL instrumentation would remove our wrapping,\n * because it only allows any module to be wrapped a single time.\n */\nfunction stealthWrap(\n  nodule,\n  name,\n  wrapper,\n) {\n  const original = nodule[name];\n  const wrapped = wrapper(original);\n\n  defineProperty(nodule, name, wrapped);\n  return wrapped;\n}\n\n// Sets a property on an object, preserving its enumerability.\nfunction defineProperty(\n  obj,\n  name,\n  value,\n) {\n  const enumerable = !!obj[name] && Object.prototype.propertyIsEnumerable.call(obj, name);\n\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: enumerable,\n    writable: true,\n    value: value,\n  });\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response.statusCode;\n  const level = utils.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core$1.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = utils.parseUrl(url.toString());\n\n    const data = {\n      url: utils.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation;\n//# sourceMappingURL=SentryHttpInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./SentryHttpInstrumentation.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = instrument.generateInstrumentOnce\n\n(`${INTEGRATION_NAME}.sentry`, options => {\n  return new SentryHttpInstrumentation.SentryHttpInstrumentation({\n    breadcrumbs: _optionalChain([options, 'optionalAccess', _ => _.breadcrumbs]),\n    ignoreOutgoingRequests: _optionalChain([options, 'optionalAccess', _2 => _2.ignoreOutgoingRequests]),\n  });\n});\n\nconst instrumentOtelHttp = instrument.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation(config);\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch (e) {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/**\n * Instrument the HTTP and HTTPS modules.\n */\nconst instrumentHttp = (options = {}) => {\n  // This is the \"regular\" OTEL instrumentation that emits spans\n  if (options.spans !== false) {\n    const instrumentationConfig = getConfigWithDefaults(options);\n    instrumentOtelHttp(instrumentationConfig);\n  }\n\n  // This is the Sentry-specific instrumentation that isolates requests & creates breadcrumbs\n  // Note that this _has_ to be wrapped after the OTEL instrumentation,\n  // otherwise the isolation will not work correctly\n  instrumentSentryHttp(options);\n};\n\nconst _httpIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHttp(options);\n    },\n  };\n}) ;\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration(_httpIntegration);\n\n/**\n * Determines if @param req is a ClientRequest, meaning the request was created within the express app\n * and it's an outgoing request.\n * Checking for properties instead of using `instanceOf` to avoid importing the request classes.\n */\nfunction _isClientRequest(req) {\n  return 'outputData' in req && 'outputSize' in req && !('client' in req) && !('statusCode' in req);\n}\n\n/**\n * Detects if an incoming request is a prefetch request.\n */\nfunction isKnownPrefetchRequest(req) {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ..._optionalChain([options, 'access', _3 => _3.instrumentation, 'optionalAccess', _4 => _4._experimentalConfig]),\n\n    disableIncomingRequestInstrumentation: options.disableIncomingRequestSpans,\n\n    ignoreOutgoingRequestHook: request => {\n      const url = getRequestUrl.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests && _ignoreOutgoingRequests(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    ignoreIncomingRequestHook: request => {\n      // request.url is the only property that holds any information about the url\n      // it only consists of the URL path and query string (if any)\n      const urlPath = request.url;\n\n      const method = _optionalChain([request, 'access', _5 => _5.method, 'optionalAccess', _6 => _6.toUpperCase, 'call', _7 => _7()]);\n      // We do not capture OPTIONS/HEAD requests as transactions\n      if (method === 'OPTIONS' || method === 'HEAD') {\n        return true;\n      }\n\n      const _ignoreIncomingRequests = options.ignoreIncomingRequests;\n      if (urlPath && _ignoreIncomingRequests && _ignoreIncomingRequests(urlPath, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requireParentforIncomingSpans: false,\n    requestHook: (span, req) => {\n      addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.http');\n      if (!_isClientRequest(req) && isKnownPrefetchRequest(req)) {\n        span.setAttribute('sentry.http.prefetch', true);\n      }\n\n      _optionalChain([options, 'access', _8 => _8.instrumentation, 'optionalAccess', _9 => _9.requestHook, 'optionalCall', _10 => _10(span, req)]);\n    },\n    responseHook: (span, res) => {\n      const client = opentelemetry.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        setImmediate(() => {\n          client['_captureRequestSession']();\n        });\n      }\n\n      _optionalChain([options, 'access', _11 => _11.instrumentation, 'optionalAccess', _12 => _12.responseHook, 'optionalCall', _13 => _13(span, res)]);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      _optionalChain([options, 'access', _14 => _14.instrumentation, 'optionalAccess', _15 => _15.applyCustomAttributesOnSpan, 'optionalCall', _16 => _16(span, request, response)]);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\nexports.instrumentSentryHttp = instrumentSentryHttp;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * The key used to store the local variables on the error object.\n */\nconst LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(\n  maxPerSecond,\n  enable,\n  disable,\n) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || (isAnonymous(a) && isAnonymous(b));\n}\n\nexports.LOCAL_VARIABLES_KEY = LOCAL_VARIABLES_KEY;\nexports.createRateLimiter = createRateLimiter;\nexports.functionNamesMatch = functionNamesMatch;\nexports.isAnonymous = isAnonymous;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2NvbW1vbi5qcz9mNjcxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhlIGtleSB1c2VkIHRvIHN0b3JlIHRoZSBsb2NhbCB2YXJpYWJsZXMgb24gdGhlIGVycm9yIG9iamVjdC5cbiAqL1xuY29uc3QgTE9DQUxfVkFSSUFCTEVTX0tFWSA9ICdfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJhdGUgbGltaXRlciB0aGF0IHdpbGwgY2FsbCB0aGUgZGlzYWJsZSBjYWxsYmFjayB3aGVuIHRoZSByYXRlIGxpbWl0IGlzIHJlYWNoZWQgYW5kIHRoZSBlbmFibGUgY2FsbGJhY2tcbiAqIHdoZW4gYSB0aW1lb3V0IGhhcyBvY2N1cnJlZC5cbiAqIEBwYXJhbSBtYXhQZXJTZWNvbmQgTWF4aW11bSBudW1iZXIgb2YgY2FsbHMgcGVyIHNlY29uZFxuICogQHBhcmFtIGVuYWJsZSBDYWxsYmFjayB0byBlbmFibGUgY2FwdHVyZVxuICogQHBhcmFtIGRpc2FibGUgQ2FsbGJhY2sgdG8gZGlzYWJsZSBjYXB0dXJlXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRvIGNhbGwgdG8gaW5jcmVtZW50IHRoZSByYXRlIGxpbWl0ZXIgY291bnRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmF0ZUxpbWl0ZXIoXG4gIG1heFBlclNlY29uZCxcbiAgZW5hYmxlLFxuICBkaXNhYmxlLFxuKSB7XG4gIGxldCBjb3VudCA9IDA7XG4gIGxldCByZXRyeVNlY29uZHMgPSA1O1xuICBsZXQgZGlzYWJsZWRUaW1lb3V0ID0gMDtcblxuICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVkVGltZW91dCA9PT0gMCkge1xuICAgICAgaWYgKGNvdW50ID4gbWF4UGVyU2Vjb25kKSB7XG4gICAgICAgIHJldHJ5U2Vjb25kcyAqPSAyO1xuICAgICAgICBkaXNhYmxlKHJldHJ5U2Vjb25kcyk7XG5cbiAgICAgICAgLy8gQ2FwIGF0IG9uZSBkYXlcbiAgICAgICAgaWYgKHJldHJ5U2Vjb25kcyA+IDg2NDAwKSB7XG4gICAgICAgICAgcmV0cnlTZWNvbmRzID0gODY0MDA7XG4gICAgICAgIH1cbiAgICAgICAgZGlzYWJsZWRUaW1lb3V0ID0gcmV0cnlTZWNvbmRzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNhYmxlZFRpbWVvdXQgLT0gMTtcblxuICAgICAgaWYgKGRpc2FibGVkVGltZW91dCA9PT0gMCkge1xuICAgICAgICBlbmFibGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gIH0sIDEwMDApLnVucmVmKCk7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb3VudCArPSAxO1xuICB9O1xufVxuXG4vLyBBZGQgdHlwZXMgZm9yIHRoZSBleGNlcHRpb24gZXZlbnQgZGF0YVxuXG4vKiogQ291bGQgdGhpcyBiZSBhbiBhbm9ueW1vdXMgZnVuY3Rpb24/ICovXG5mdW5jdGlvbiBpc0Fub255bW91cyhuYW1lKSB7XG4gIHJldHVybiBuYW1lICE9PSB1bmRlZmluZWQgJiYgKG5hbWUubGVuZ3RoID09PSAwIHx8IG5hbWUgPT09ICc/JyB8fCBuYW1lID09PSAnPGFub255bW91cz4nKTtcbn1cblxuLyoqIERvIHRoZSBmdW5jdGlvbiBuYW1lcyBhcHBlYXIgdG8gbWF0Y2g/ICovXG5mdW5jdGlvbiBmdW5jdGlvbk5hbWVzTWF0Y2goYSwgYikge1xuICByZXR1cm4gYSA9PT0gYiB8fCAoaXNBbm9ueW1vdXMoYSkgJiYgaXNBbm9ueW1vdXMoYikpO1xufVxuXG5leHBvcnRzLkxPQ0FMX1ZBUklBQkxFU19LRVkgPSBMT0NBTF9WQVJJQUJMRVNfS0VZO1xuZXhwb3J0cy5jcmVhdGVSYXRlTGltaXRlciA9IGNyZWF0ZVJhdGVMaW1pdGVyO1xuZXhwb3J0cy5mdW5jdGlvbk5hbWVzTWF0Y2ggPSBmdW5jdGlvbk5hbWVzTWF0Y2g7XG5leHBvcnRzLmlzQW5vbnltb3VzID0gaXNBbm9ueW1vdXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst localVariablesAsync = __webpack_require__(/*! ./local-variables-async.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\");\nconst localVariablesSync = __webpack_require__(/*! ./local-variables-sync.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\");\n\nconst localVariablesIntegration = (options = {}) => {\n  return nodeVersion.NODE_VERSION.major < 19 ? localVariablesSync.localVariablesSyncIntegration(options) : localVariablesAsync.localVariablesAsyncIntegration(options);\n};\n\nexports.localVariablesIntegration = localVariablesIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELG9CQUFvQixtQkFBTyxDQUFDLHNJQUFzQjtBQUNsRCw0QkFBNEIsbUJBQU8sQ0FBQyxtTEFBNEI7QUFDaEUsMkJBQTJCLG1CQUFPLENBQUMsaUxBQTJCOztBQUU5RCwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvaW5kZXguanM/ZDc2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBub2RlVmVyc2lvbiA9IHJlcXVpcmUoJy4uLy4uL25vZGVWZXJzaW9uLmpzJyk7XG5jb25zdCBsb2NhbFZhcmlhYmxlc0FzeW5jID0gcmVxdWlyZSgnLi9sb2NhbC12YXJpYWJsZXMtYXN5bmMuanMnKTtcbmNvbnN0IGxvY2FsVmFyaWFibGVzU3luYyA9IHJlcXVpcmUoJy4vbG9jYWwtdmFyaWFibGVzLXN5bmMuanMnKTtcblxuY29uc3QgbG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbiA9IChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIG5vZGVWZXJzaW9uLk5PREVfVkVSU0lPTi5tYWpvciA8IDE5ID8gbG9jYWxWYXJpYWJsZXNTeW5jLmxvY2FsVmFyaWFibGVzU3luY0ludGVncmF0aW9uKG9wdGlvbnMpIDogbG9jYWxWYXJpYWJsZXNBc3luYy5sb2NhbFZhcmlhYmxlc0FzeW5jSW50ZWdyYXRpb24ob3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb24gPSBsb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZSA4LjM2LjAgKDEzZTZjOGUpIHwgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdCAqLwppbXBvcnR7U2Vzc2lvbiBhcyBlfWZyb20ibm9kZTppbnNwZWN0b3IvcHJvbWlzZXMiO2ltcG9ydHt3b3JrZXJEYXRhIGFzIHR9ZnJvbSJub2RlOndvcmtlcl90aHJlYWRzIjtjb25zdCBuPSI4LjM2LjAiLG89Z2xvYmFsVGhpcztjb25zdCBpPSJ1bmRlZmluZWQiPT10eXBlb2YgX19TRU5UUllfREVCVUdfX3x8X19TRU5UUllfREVCVUdfXyxhPVsiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIiwibG9nIiwiYXNzZXJ0IiwidHJhY2UiXSxzPXt9O2Z1bmN0aW9uIGMoZSl7aWYoISgiY29uc29sZSJpbiBvKSlyZXR1cm4gZSgpO2NvbnN0IHQ9by5jb25zb2xlLG49e30saT1PYmplY3Qua2V5cyhzKTtpLmZvckVhY2goKGU9Pntjb25zdCBvPXNbZV07bltlXT10W2VdLHRbZV09b30pKTt0cnl7cmV0dXJuIGUoKX1maW5hbGx5e2kuZm9yRWFjaCgoZT0+e3RbZV09bltlXX0pKX19IWZ1bmN0aW9uKGUsdCxpKXtjb25zdCBhPW8scz1hLl9fU0VOVFJZX189YS5fX1NFTlRSWV9ffHx7fSxjPXNbbl09c1tuXXx8e307Y1tlXXx8KGNbZV09dCgpKX0oImxvZ2dlciIsKGZ1bmN0aW9uKCl7bGV0IGU9ITE7Y29uc3QgdD17ZW5hYmxlOigpPT57ZT0hMH0sZGlzYWJsZTooKT0+e2U9ITF9LGlzRW5hYmxlZDooKT0+ZX07cmV0dXJuIGk/YS5mb3JFYWNoKChuPT57dFtuXT0oLi4udCk9PntlJiZjKCgoKT0+e28uY29uc29sZVtuXShgU2VudHJ5IExvZ2dlciBbJHtufV06YCwuLi50KX0pKX19KSk6YS5mb3JFYWNoKChlPT57dFtlXT0oKT0+e319KSksdH0pKTtjb25zdCByPSJfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyI7Y29uc3QgdT10O2Z1bmN0aW9uIGwoLi4uZSl7dS5kZWJ1ZyYmYygoKCk9PmNvbnNvbGUubG9nKCJbTG9jYWxWYXJpYWJsZXMgV29ya2VyXSIsLi4uZSkpKX1hc3luYyBmdW5jdGlvbiBmKGUsdCxuLG8pe2NvbnN0IGk9YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDp0LG93blByb3BlcnRpZXM6ITB9KTtvW25dPWkucmVzdWx0LmZpbHRlcigoZT0+Imxlbmd0aCIhPT1lLm5hbWUmJiFpc05hTihwYXJzZUludChlLm5hbWUsMTApKSkpLnNvcnQoKChlLHQpPT5wYXJzZUludChlLm5hbWUsMTApLXBhcnNlSW50KHQubmFtZSwxMCkpKS5tYXAoKGU9PmUudmFsdWU/LnZhbHVlKSl9YXN5bmMgZnVuY3Rpb24gZyhlLHQsbixvKXtjb25zdCBpPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSk7b1tuXT1pLnJlc3VsdC5tYXAoKGU9PltlLm5hbWUsZS52YWx1ZT8udmFsdWVdKSkucmVkdWNlKCgoZSxbdCxuXSk9PihlW3RdPW4sZSkpLHt9KX1mdW5jdGlvbiBkKGUsdCl7ZS52YWx1ZSYmKCJ2YWx1ZSJpbiBlLnZhbHVlP3ZvaWQgMD09PWUudmFsdWUudmFsdWV8fG51bGw9PT1lLnZhbHVlLnZhbHVlP3RbZS5uYW1lXT1gPCR7ZS52YWx1ZS52YWx1ZX0+YDp0W2UubmFtZV09ZS52YWx1ZS52YWx1ZToiZGVzY3JpcHRpb24iaW4gZS52YWx1ZSYmImZ1bmN0aW9uIiE9PWUudmFsdWUudHlwZT90W2UubmFtZV09YDwke2UudmFsdWUuZGVzY3JpcHRpb259PmA6InVuZGVmaW5lZCI9PT1lLnZhbHVlLnR5cGUmJih0W2UubmFtZV09Ijx1bmRlZmluZWQ+IikpfWFzeW5jIGZ1bmN0aW9uIGIoZSx0KXtjb25zdCBuPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSksbz17fTtmb3IoY29uc3QgdCBvZiBuLnJlc3VsdClpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJBcnJheSI9PT10Py52YWx1ZS5jbGFzc05hbWUpe2NvbnN0IG49dC52YWx1ZS5vYmplY3RJZDthd2FpdCBmKGUsbix0Lm5hbWUsbyl9ZWxzZSBpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJPYmplY3QiPT09dD8udmFsdWU/LmNsYXNzTmFtZSl7Y29uc3Qgbj10LnZhbHVlLm9iamVjdElkO2F3YWl0IGcoZSxuLHQubmFtZSxvKX1lbHNlIHQ/LnZhbHVlJiZkKHQsbyk7cmV0dXJuIG99bGV0IHA7KGFzeW5jIGZ1bmN0aW9uKCl7Y29uc3QgdD1uZXcgZTt0LmNvbm5lY3RUb01haW5UaHJlYWQoKSxsKCJDb25uZWN0ZWQgdG8gbWFpbiB0aHJlYWQiKTtsZXQgbj0hMTt0Lm9uKCJEZWJ1Z2dlci5yZXN1bWVkIiwoKCk9PntuPSExfSkpLHQub24oIkRlYnVnZ2VyLnBhdXNlZCIsKGU9PntuPSEwLGFzeW5jIGZ1bmN0aW9uKGUse3JlYXNvbjp0LGRhdGE6e29iamVjdElkOm59LGNhbGxGcmFtZXM6b30pe2lmKCJleGNlcHRpb24iIT09dCYmInByb21pc2VSZWplY3Rpb24iIT09dClyZXR1cm47aWYocD8uKCksbnVsbD09bilyZXR1cm47Y29uc3QgaT1bXTtmb3IobGV0IHQ9MDt0PG8ubGVuZ3RoO3QrKyl7Y29uc3R7c2NvcGVDaGFpbjpuLGZ1bmN0aW9uTmFtZTphLHRoaXM6c309b1t0XSxjPW4uZmluZCgoZT0+ImxvY2FsIj09PWUudHlwZSkpLHI9Imdsb2JhbCIhPT1zLmNsYXNzTmFtZSYmcy5jbGFzc05hbWU/YCR7cy5jbGFzc05hbWV9LiR7YX1gOmE7aWYodm9pZCAwPT09Yz8ub2JqZWN0Lm9iamVjdElkKWlbdF09e2Z1bmN0aW9uOnJ9O2Vsc2V7Y29uc3Qgbj1hd2FpdCBiKGUsYy5vYmplY3Qub2JqZWN0SWQpO2lbdF09e2Z1bmN0aW9uOnIsdmFyczpufX19YXdhaXQgZS5wb3N0KCJSdW50aW1lLmNhbGxGdW5jdGlvbk9uIix7ZnVuY3Rpb25EZWNsYXJhdGlvbjpgZnVuY3Rpb24oKSB7IHRoaXMuJHtyfSA9IHRoaXMuJHtyfSB8fCAke0pTT04uc3RyaW5naWZ5KGkpfTsgfWAsc2lsZW50OiEwLG9iamVjdElkOm59KSxhd2FpdCBlLnBvc3QoIlJ1bnRpbWUucmVsZWFzZU9iamVjdCIse29iamVjdElkOm59KX0odCxlLnBhcmFtcykudGhlbigoYXN5bmMoKT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSwoYXN5bmMgZT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSl9KSksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5lbmFibGUiKTtjb25zdCBvPSExIT09dS5jYXB0dXJlQWxsRXhjZXB0aW9ucztpZihhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6bz8iYWxsIjoidW5jYXVnaHQifSksbyl7Y29uc3QgZT11Lm1heEV4Y2VwdGlvbnNQZXJTZWNvbmR8fDUwO3A9ZnVuY3Rpb24oZSx0LG4pe2xldCBvPTAsaT01LGE9MDtyZXR1cm4gc2V0SW50ZXJ2YWwoKCgpPT57MD09PWE/bz5lJiYoaSo9MixuKGkpLGk+ODY0MDAmJihpPTg2NDAwKSxhPWkpOihhLT0xLDA9PT1hJiZ0KCkpLG89MH0pLDFlMykudW5yZWYoKSwoKT0+e28rPTF9fShlLChhc3luYygpPT57bCgiUmF0ZS1saW1pdCBsaWZ0ZWQuIiksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJhbGwifSl9KSwoYXN5bmMgZT0+e2woYFJhdGUtbGltaXQgZXhjZWVkZWQuIERpc2FibGluZyBjYXB0dXJpbmcgb2YgY2F1Z2h0IGV4Y2VwdGlvbnMgZm9yICR7ZX0gc2Vjb25kcy5gKSxhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6InVuY2F1Z2h0In0pfSkpfX0pKCkuY2F0Y2goKGU9PntsKCJGYWlsZWQgdG8gc3RhcnQgZGVidWdnZXIiLGUpfSkpLHNldEludGVydmFsKCgoKT0+e30pLDFlNCk7';\n\nfunction log(...args) {\n  utils.logger.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesAsyncIntegration = core.defineIntegration(((\n  integrationOptions = {},\n) => {\n  function addLocalVariablesToException(exception, localVariables) {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _ => _.stacktrace, 'optionalAccess', _2 => _2.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        frameLocalVariables.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frame.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frame.function, frameLocalVariables.function)\n      ) {\n        continue;\n      }\n\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event, hint) {\n    if (\n      hint.originalException &&\n      typeof hint.originalException === 'object' &&\n      common.LOCAL_VARIABLES_KEY in hint.originalException &&\n      Array.isArray(hint.originalException[common.LOCAL_VARIABLES_KEY])\n    ) {\n      for (const exception of _optionalChain([event, 'access', _3 => _3.exception, 'optionalAccess', _4 => _4.values]) || []) {\n        addLocalVariablesToException(exception, hint.originalException[common.LOCAL_VARIABLES_KEY]);\n      }\n\n      hint.originalException[common.LOCAL_VARIABLES_KEY] = undefined;\n    }\n\n    return event;\n  }\n\n  async function startInspector() {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  function startWorker(options) {\n    const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n    });\n\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n\n    worker.once('error', (err) => {\n      log('Worker error', err);\n    });\n\n    worker.once('exit', (code) => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n\n  return {\n    name: 'LocalVariablesAsync',\n    setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n\n      const options = {\n        ...integrationOptions,\n        debug: utils.logger.isEnabled(),\n      };\n\n      startInspector().then(\n        () => {\n          try {\n            startWorker(options);\n          } catch (e) {\n            utils.logger.error('Failed to start worker', e);\n          }\n        },\n        e => {\n          utils.logger.error('Failed to start inspector', e);\n        },\n      );\n    },\n    processEvent(event, hint) {\n      return addLocalVariablesToEvent(event, hint);\n    },\n  };\n}) );\n\nexports.base64WorkerScript = base64WorkerScript;\nexports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;\n//# sourceMappingURL=local-variables-async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\n/** Creates a container for callbacks to be called sequentially */\nfunction createCallbackList(complete) {\n  // A collection of callbacks to be executed last to first\n  let callbacks = [];\n\n  let completedCalled = false;\n  function checkedComplete(result) {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn) {\n    callbacks.push(fn);\n  }\n\n  function next(result) {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch (_) {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession  {\n  /** Throws if inspector API is not available */\n   constructor(  _session) {this._session = _session;\n    //\n  }\n\n   static async create(orDefault) {\n    if (orDefault) {\n      return orDefault;\n    }\n\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n   configureAndConnect(onPause, captureAll) {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n   setPauseOnExceptions(captureAll) {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n   getLocalVariables(objectId, complete) {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList(complete);\n\n      for (const prop of props) {\n        if (_optionalChain([prop, 'optionalAccess', _2 => _2.value, 'optionalAccess', _3 => _3.objectId]) && _optionalChain([prop, 'optionalAccess', _4 => _4.value, 'access', _5 => _5.className]) === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _6 => _6.value, 'optionalAccess', _7 => _7.objectId]) && _optionalChain([prop, 'optionalAccess', _8 => _8.value, 'optionalAccess', _9 => _9.className]) === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _10 => _10.value])) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n   _getProperties(objectId, next) {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n   _unrollArray(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => _optionalChain([v, 'optionalAccess', _11 => _11.value, 'optionalAccess', _12 => _12.value]));\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n   _unrollObject(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map(v => [v.name, _optionalChain([v, 'optionalAccess', _13 => _13.value, 'optionalAccess', _14 => _14.value])])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} );\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n   _unrollOther(prop, vars, next) {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n\n    next(vars);\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = ((\n  options = {},\n  sessionOverride,\n) => {\n  const cachedFrames = new utils.LRUMap(20);\n  let rateLimiter;\n  let shouldProcessEvent = false;\n\n  function addLocalVariablesToException(exception) {\n    const hash = hashFrames(_optionalChain([exception, 'optionalAccess', _15 => _15.stacktrace, 'optionalAccess', _16 => _16.frames]));\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _17 => _17.stacktrace, 'optionalAccess', _18 => _18.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrameVariable.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frameVariable.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frameVariable.function, cachedFrameVariable.function)\n      ) {\n        continue;\n      }\n\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event) {\n    for (const exception of _optionalChain([event, 'optionalAccess', _19 => _19.exception, 'optionalAccess', _20 => _20.values]) || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const client = core.getClient();\n      const clientOptions = _optionalChain([client, 'optionalAccess', _21 => _21.getOptions, 'call', _22 => _22()]);\n\n      if (!_optionalChain([clientOptions, 'optionalAccess', _23 => _23.includeLocalVariables])) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = nodeVersion.NODE_MAJOR < 18;\n\n      if (unsupportedNodeVersion) {\n        utils.logger.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n\n      AsyncSession.create(sessionOverride).then(\n        session => {\n          function handlePaused(\n            stackParser,\n            { params: { reason, data, callFrames } },\n            complete,\n          ) {\n            if (reason !== 'exception' && reason !== 'promiseRejection') {\n              complete();\n              return;\n            }\n\n            _optionalChain([rateLimiter, 'optionalCall', _24 => _24()]);\n\n            // data.description contains the original error.stack\n            const exceptionHash = hashFromStack(stackParser, _optionalChain([data, 'optionalAccess', _25 => _25.description]));\n\n            if (exceptionHash == undefined) {\n              complete();\n              return;\n            }\n\n            const { add, next } = createCallbackList(frames => {\n              cachedFrames.set(exceptionHash, frames);\n              complete();\n            });\n\n            // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n            // For this reason we only attempt to get local variables for the first 5 frames\n            for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const { scopeChain, functionName, this: obj } = callFrames[i];\n\n              const localScope = scopeChain.find(scope => scope.type === 'local');\n\n              // obj.className is undefined in ESM modules\n              const fn =\n                obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n              if (_optionalChain([localScope, 'optionalAccess', _26 => _26.object, 'access', _27 => _27.objectId]) === undefined) {\n                add(frames => {\n                  frames[i] = { function: fn };\n                  next(frames);\n                });\n              } else {\n                const id = localScope.object.objectId;\n                add(frames =>\n                  _optionalChain([session, 'optionalAccess', _28 => _28.getLocalVariables, 'call', _29 => _29(id, vars => {\n                    frames[i] = { function: fn, vars };\n                    next(frames);\n                  })]),\n                );\n              }\n            }\n\n            next([]);\n          }\n\n          const captureAll = options.captureAllExceptions !== false;\n\n          session.configureAndConnect(\n            (ev, complete) =>\n              handlePaused(clientOptions.stackParser, ev , complete),\n            captureAll,\n          );\n\n          if (captureAll) {\n            const max = options.maxExceptionsPerSecond || 50;\n\n            rateLimiter = common.createRateLimiter(\n              max,\n              () => {\n                utils.logger.log('Local variables rate-limit lifted.');\n                _optionalChain([session, 'optionalAccess', _30 => _30.setPauseOnExceptions, 'call', _31 => _31(true)]);\n              },\n              seconds => {\n                utils.logger.log(\n                  `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n                );\n                _optionalChain([session, 'optionalAccess', _32 => _32.setPauseOnExceptions, 'call', _33 => _33(false)]);\n              },\n            );\n          }\n\n          shouldProcessEvent = true;\n        },\n        error => {\n          utils.logger.log('The `LocalVariables` integration failed to start.', error);\n        },\n      );\n    },\n    processEvent(event) {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount() {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame() {\n      return cachedFrames.values()[0];\n    },\n  };\n}) ;\n\n/**\n * Adds local variables to exception frames.\n */\nconst localVariablesSyncIntegration = core.defineIntegration(_localVariablesSyncIntegration);\n\nexports.createCallbackList = createCallbackList;\nexports.hashFrames = hashFrames;\nexports.hashFromStack = hashFromStack;\nexports.localVariablesSyncIntegration = localVariablesSyncIntegration;\n//# sourceMappingURL=local-variables-sync.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js ***!
  \************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nlet moduleCache;\n\nconst INTEGRATION_NAME = 'Modules';\n\nconst _modulesIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n  };\n}) ;\n\n/**\n * Add node modules / packages to the event.\n */\nconst modulesIntegration = core.defineIntegration(_modulesIntegration);\n\n/** Extract information about paths */\nfunction getPaths() {\n  try {\n    return __webpack_require__.c ? Object.keys(__webpack_require__.c ) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules()\n\n {\n  const mainPaths = (__webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].paths) || [];\n  const paths = getPaths();\n  const infos\n\n = {};\n  const seen\n\n = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = node_path.dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = node_path.join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!node_fs.existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(node_fs.readFileSync(pkgfile, 'utf8'))\n\n;\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nexports.modulesIntegration = modulesIntegration;\n//# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21vZHVsZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx3QkFBUztBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVztBQUNyQyxhQUFhLG1CQUFPLENBQUMsd0hBQWM7O0FBRW5DOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUJBQWEsZUFBZSxxQkFBYTtBQUNwRCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsNENBQVksSUFBSSw0Q0FBWTtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9tb2R1bGVzLmpzP2E4ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgbm9kZV9mcyA9IHJlcXVpcmUoJ25vZGU6ZnMnKTtcbmNvbnN0IG5vZGVfcGF0aCA9IHJlcXVpcmUoJ25vZGU6cGF0aCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5sZXQgbW9kdWxlQ2FjaGU7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTW9kdWxlcyc7XG5cbmNvbnN0IF9tb2R1bGVzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJvY2Vzc0V2ZW50KGV2ZW50KSB7XG4gICAgICBldmVudC5tb2R1bGVzID0ge1xuICAgICAgICAuLi5ldmVudC5tb2R1bGVzLFxuICAgICAgICAuLi5fZ2V0TW9kdWxlcygpLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkIG5vZGUgbW9kdWxlcyAvIHBhY2thZ2VzIHRvIHRoZSBldmVudC5cbiAqL1xuY29uc3QgbW9kdWxlc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbW9kdWxlc0ludGVncmF0aW9uKTtcblxuLyoqIEV4dHJhY3QgaW5mb3JtYXRpb24gYWJvdXQgcGF0aHMgKi9cbmZ1bmN0aW9uIGdldFBhdGhzKCkge1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlLmNhY2hlID8gT2JqZWN0LmtleXMocmVxdWlyZS5jYWNoZSApIDogW107XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuLyoqIEV4dHJhY3QgaW5mb3JtYXRpb24gYWJvdXQgcGFja2FnZS5qc29uIG1vZHVsZXMgKi9cbmZ1bmN0aW9uIGNvbGxlY3RNb2R1bGVzKClcblxuIHtcbiAgY29uc3QgbWFpblBhdGhzID0gKHJlcXVpcmUubWFpbiAmJiByZXF1aXJlLm1haW4ucGF0aHMpIHx8IFtdO1xuICBjb25zdCBwYXRocyA9IGdldFBhdGhzKCk7XG4gIGNvbnN0IGluZm9zXG5cbiA9IHt9O1xuICBjb25zdCBzZWVuXG5cbiA9IHt9O1xuXG4gIHBhdGhzLmZvckVhY2gocGF0aCA9PiB7XG4gICAgbGV0IGRpciA9IHBhdGg7XG5cbiAgICAvKiogVHJhdmVyc2UgZGlyZWN0b3JpZXMgdXB3YXJkIGluIHRoZSBzZWFyY2ggb2YgcGFja2FnZS5qc29uIGZpbGUgKi9cbiAgICBjb25zdCB1cGRpciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG9yaWcgPSBkaXI7XG4gICAgICBkaXIgPSBub2RlX3BhdGguZGlybmFtZShvcmlnKTtcblxuICAgICAgaWYgKCFkaXIgfHwgb3JpZyA9PT0gZGlyIHx8IHNlZW5bb3JpZ10pIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChtYWluUGF0aHMuaW5kZXhPZihkaXIpIDwgMCkge1xuICAgICAgICByZXR1cm4gdXBkaXIoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGtnZmlsZSA9IG5vZGVfcGF0aC5qb2luKG9yaWcsICdwYWNrYWdlLmpzb24nKTtcbiAgICAgIHNlZW5bb3JpZ10gPSB0cnVlO1xuXG4gICAgICBpZiAoIW5vZGVfZnMuZXhpc3RzU3luYyhwa2dmaWxlKSkge1xuICAgICAgICByZXR1cm4gdXBkaXIoKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5mbyA9IEpTT04ucGFyc2Uobm9kZV9mcy5yZWFkRmlsZVN5bmMocGtnZmlsZSwgJ3V0ZjgnKSlcblxuO1xuICAgICAgICBpbmZvc1tpbmZvLm5hbWVdID0gaW5mby52ZXJzaW9uO1xuICAgICAgfSBjYXRjaCAoX29PKSB7XG4gICAgICAgIC8vIG5vLWVtcHR5XG4gICAgICB9XG4gICAgfTtcblxuICAgIHVwZGlyKCk7XG4gIH0pO1xuXG4gIHJldHVybiBpbmZvcztcbn1cblxuLyoqIEZldGNoZXMgdGhlIGxpc3Qgb2YgbW9kdWxlcyBhbmQgdGhlIHZlcnNpb25zIGxvYWRlZCBieSB0aGUgZW50cnkgZmlsZSBmb3IgeW91ciBub2RlLmpzIGFwcC4gKi9cbmZ1bmN0aW9uIF9nZXRNb2R1bGVzKCkge1xuICBpZiAoIW1vZHVsZUNhY2hlKSB7XG4gICAgbW9kdWxlQ2FjaGUgPSBjb2xsZWN0TW9kdWxlcygpO1xuICB9XG4gIHJldHVybiBtb2R1bGVDYWNoZTtcbn1cblxuZXhwb3J0cy5tb2R1bGVzSW50ZWdyYXRpb24gPSBtb2R1bGVzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.6.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  const _breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n  const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentation = new instrumentationUndici.UndiciInstrumentation({\n        requireParentforSpans: false,\n        ignoreRequestHook: request => {\n          const url = getAbsoluteUrl(request.origin, request.path);\n          const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n          if (shouldIgnore) {\n            return true;\n          }\n\n          // If tracing is disabled, we still want to propagate traces\n          // So we do that manually here, matching what the instrumentation does otherwise\n          if (!core.hasTracingEnabled()) {\n            const ctx = api.context.active();\n            const addedHeaders = {};\n\n            // We generate a virtual span context from the active one,\n            // Where we attach the URL to the trace state, so the propagator can pick it up\n            const activeSpan = api.trace.getSpan(ctx);\n            const propagationContext = activeSpan\n              ? opentelemetry.getPropagationContextFromSpan(activeSpan)\n              : core.getCurrentScope().getPropagationContext();\n\n            const spanContext = opentelemetry.generateSpanContextForPropagationContext(propagationContext);\n            // We know that in practice we'll _always_ haven a traceState here\n            spanContext.traceState = _optionalChain([spanContext, 'access', _2 => _2.traceState, 'optionalAccess', _3 => _3.set, 'call', _4 => _4('sentry.url', url)]);\n            const ctxWithUrlTraceState = api.trace.setSpanContext(ctx, spanContext);\n\n            api.propagation.inject(ctxWithUrlTraceState, addedHeaders);\n\n            const requestHeaders = request.headers;\n            if (Array.isArray(requestHeaders)) {\n              Object.entries(addedHeaders).forEach(headers => requestHeaders.push(...headers));\n            } else {\n              request.headers += Object.entries(addedHeaders)\n                .map(([k, v]) => `${k}: ${v}\\r\\n`)\n                .join('');\n            }\n\n            // Prevent starting a span for this request\n            return true;\n          }\n\n          return false;\n        },\n        startSpanHook: () => {\n          return {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n          };\n        },\n        responseHook: (_, { request, response }) => {\n          if (_breadcrumbs) {\n            addRequestBreadcrumb(request, response);\n          }\n        },\n      });\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n  const statusCode = response.statusCode;\n  const level = utils.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    const url = new URL(request.path, request.origin);\n    const parsedUrl = utils.parseUrl(url.toString());\n\n    const data = {\n      url: utils.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=node-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nconst onUncaughtExceptionIntegration = core.defineIntegration((options = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    },\n  };\n});\n\n/** Exported only for tests */\nfunction makeErrorHandler(client, options) {\n  const timeout = 2000;\n  let caughtFirstError = false;\n  let caughtSecondError = false;\n  let calledFatalError = false;\n  let firstError;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error) => {\n      let onFatalError = errorhandling.logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError ;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (global.process.listeners('uncaughtException') ).filter(\n        listener => {\n          // There are 3 listeners we ignore:\n          return (\n            // as soon as we're using domains this listener is attached by node itself\n            listener.name !== 'domainUncaughtExceptionClear' &&\n            // the handler we register for tracing\n            listener.tag !== 'sentry_tracingErrorCallback' &&\n            // the handler we register in this integration\n            (listener )._errorHandler !== true\n          );\n        },\n      ).length;\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (core.getClient() === client) {\n          core.captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            debugBuild.DEBUG_BUILD &&\n              utils.logger.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            errorhandling.logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n\nexports.makeErrorHandler = makeErrorHandler;\nexports.onUncaughtExceptionIntegration = onUncaughtExceptionIntegration;\n//# sourceMappingURL=onuncaughtexception.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options = {}) => {\n  const mode = options.mode || 'warn';\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, { mode }));\n    },\n  };\n}) ;\n\n/**\n * Add a global promise rejection handler.\n */\nconst onUnhandledRejectionIntegration = core.defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(\n  client,\n  options,\n) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (core.getClient() !== client) {\n      return;\n    }\n\n    core.captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n\n */\nfunction handleRejection(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason,\n  options,\n) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    utils.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      console.error(reason && reason.stack ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    utils.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    errorhandling.logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexports.makeUnhandledPromiseHandler = makeUnhandledPromiseHandler;\nexports.onUnhandledRejectionIntegration = onUnhandledRejectionIntegration;\n//# sourceMappingURL=onunhandledrejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQywySEFBZTtBQUNyQyxzQkFBc0IsbUJBQU8sQ0FBQyxtSkFBMkI7O0FBRXpEOztBQUVBLHVEQUF1RDtBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsTUFBTTtBQUMxRixLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUNBQWlDO0FBQ2xELE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyx1Q0FBdUM7QUFDdkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9vbnVuaGFuZGxlZHJlamVjdGlvbi5qcz8xZTg5Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuY29uc3QgZXJyb3JoYW5kbGluZyA9IHJlcXVpcmUoJy4uL3V0aWxzL2Vycm9yaGFuZGxpbmcuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdPblVuaGFuZGxlZFJlamVjdGlvbic7XG5cbmNvbnN0IF9vblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgbW9kZSA9IG9wdGlvbnMubW9kZSB8fCAnd2Fybic7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgZ2xvYmFsLnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcihjbGllbnQsIHsgbW9kZSB9KSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGQgYSBnbG9iYWwgcHJvbWlzZSByZWplY3Rpb24gaGFuZGxlci5cbiAqL1xuY29uc3Qgb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX29uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24pO1xuXG4vKipcbiAqIFNlbmQgYW4gZXhjZXB0aW9uIHdpdGggcmVhc29uXG4gKiBAcGFyYW0gcmVhc29uIHN0cmluZ1xuICogQHBhcmFtIHByb21pc2UgcHJvbWlzZVxuICpcbiAqIEV4cG9ydGVkIG9ubHkgZm9yIHRlc3RzLlxuICovXG5mdW5jdGlvbiBtYWtlVW5oYW5kbGVkUHJvbWlzZUhhbmRsZXIoXG4gIGNsaWVudCxcbiAgb3B0aW9ucyxcbikge1xuICByZXR1cm4gZnVuY3Rpb24gc2VuZFVuaGFuZGxlZFByb21pc2UocmVhc29uLCBwcm9taXNlKSB7XG4gICAgaWYgKGNvcmUuZ2V0Q2xpZW50KCkgIT09IGNsaWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihyZWFzb24sIHtcbiAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBwcm9taXNlLFxuICAgICAgY2FwdHVyZUNvbnRleHQ6IHtcbiAgICAgICAgZXh0cmE6IHsgdW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbjogdHJ1ZSB9LFxuICAgICAgfSxcbiAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgdHlwZTogJ29udW5oYW5kbGVkcmVqZWN0aW9uJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBoYW5kbGVSZWplY3Rpb24ocmVhc29uLCBvcHRpb25zKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBIYW5kbGVyIGZvciBgbW9kZWAgb3B0aW9uXG5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUmVqZWN0aW9uKFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICByZWFzb24sXG4gIG9wdGlvbnMsXG4pIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvN2NmNmY5ZTk2NGFhMDA3NzI5NjUzOTFjMjNhY2RhNmQ3MTk3MmE5YS9saWIvaW50ZXJuYWwvcHJvY2Vzcy9wcm9taXNlcy5qcyNMMjM0LUwyNDBcbiAgY29uc3QgcmVqZWN0aW9uV2FybmluZyA9XG4gICAgJ1RoaXMgZXJyb3Igb3JpZ2luYXRlZCBlaXRoZXIgYnkgJyArXG4gICAgJ3Rocm93aW5nIGluc2lkZSBvZiBhbiBhc3luYyBmdW5jdGlvbiB3aXRob3V0IGEgY2F0Y2ggYmxvY2ssICcgK1xuICAgICdvciBieSByZWplY3RpbmcgYSBwcm9taXNlIHdoaWNoIHdhcyBub3QgaGFuZGxlZCB3aXRoIC5jYXRjaCgpLicgK1xuICAgICcgVGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uOic7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAob3B0aW9ucy5tb2RlID09PSAnd2FybicpIHtcbiAgICB1dGlscy5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICBjb25zb2xlLndhcm4ocmVqZWN0aW9uV2FybmluZyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICBjb25zb2xlLmVycm9yKHJlYXNvbiAmJiByZWFzb24uc3RhY2sgPyByZWFzb24uc3RhY2sgOiByZWFzb24pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMubW9kZSA9PT0gJ3N0cmljdCcpIHtcbiAgICB1dGlscy5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICBjb25zb2xlLndhcm4ocmVqZWN0aW9uV2FybmluZyk7XG4gICAgfSk7XG4gICAgZXJyb3JoYW5kbGluZy5sb2dBbmRFeGl0UHJvY2VzcyhyZWFzb24pO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xufVxuXG5leHBvcnRzLm1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlciA9IG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcjtcbmV4cG9ydHMub25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9IG9uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbnVuaGFuZGxlZHJlamVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'ProcessAndThreadBreadcrumbs';\n\nconst _processThreadBreadcrumbIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(_client) {\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('child_process').subscribe((event) => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process , options);\n        }\n      });\n\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('worker_threads').subscribe((event) => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker );\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n */\nconst processThreadBreadcrumbIntegration = core.defineIntegration(_processThreadBreadcrumbIntegration);\n\nfunction captureChildProcessEvents(child, options) {\n  let hasExited = false;\n  let data;\n\n  child\n    .on('spawn', () => {\n      // This is Sentry getting macOS OS context\n      if (child.spawnfile === '/usr/bin/sw_vers') {\n        hasExited = true;\n        return;\n      }\n\n      data = { spawnfile: child.spawnfile };\n      if (options.includeChildProcessArgs) {\n        data.spawnargs = child.spawnargs;\n      }\n    })\n    .on('exit', code => {\n      if (!hasExited) {\n        hasExited = true;\n\n        // Only log for non-zero exit codes\n        if (code !== null && code !== 0) {\n          core.addBreadcrumb({\n            category: 'child_process',\n            message: `Child process exited with code '${code}'`,\n            level: 'warning',\n            data,\n          });\n        }\n      }\n    })\n    .on('error', error => {\n      if (!hasExited) {\n        hasExited = true;\n\n        core.addBreadcrumb({\n          category: 'child_process',\n          message: `Child process errored with '${error.message}'`,\n          level: 'error',\n          data,\n        });\n      }\n    });\n}\n\nfunction captureWorkerThreadEvents(worker) {\n  let threadId;\n\n  worker\n    .on('online', () => {\n      threadId = worker.threadId;\n    })\n    .on('error', error => {\n      core.addBreadcrumb({\n        category: 'worker_thread',\n        message: `Worker thread errored with '${error.message}'`,\n        level: 'error',\n        data: { threadId },\n      });\n    });\n}\n\nexports.processThreadBreadcrumbIntegration = processThreadBreadcrumbIntegration;\n//# sourceMappingURL=processThread.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Byb2Nlc3NUaHJlYWQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwyQkFBMkIsbUJBQU8sQ0FBQywwREFBMEI7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHdIQUFjOztBQUVuQzs7QUFFQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxLQUFLO0FBQzdEO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtEQUFrRCxjQUFjO0FBQ2hFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGNBQWM7QUFDOUQ7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQixPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBLDBDQUEwQztBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Byb2Nlc3NUaHJlYWQuanM/ZWM0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBkaWFnbm9zdGljc0NoYW5uZWwgPSByZXF1aXJlKCdub2RlOmRpYWdub3N0aWNzX2NoYW5uZWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQcm9jZXNzQW5kVGhyZWFkQnJlYWRjcnVtYnMnO1xuXG5jb25zdCBfcHJvY2Vzc1RocmVhZEJyZWFkY3J1bWJJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChfY2xpZW50KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIGRpYWdub3N0aWNzQ2hhbm5lbC5jaGFubmVsKCdjaGlsZF9wcm9jZXNzJykuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAncHJvY2VzcycgaW4gZXZlbnQpIHtcbiAgICAgICAgICBjYXB0dXJlQ2hpbGRQcm9jZXNzRXZlbnRzKGV2ZW50LnByb2Nlc3MgLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgZGlhZ25vc3RpY3NDaGFubmVsLmNoYW5uZWwoJ3dvcmtlcl90aHJlYWRzJykuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAnd29ya2VyJyBpbiBldmVudCkge1xuICAgICAgICAgIGNhcHR1cmVXb3JrZXJUaHJlYWRFdmVudHMoZXZlbnQud29ya2VyICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQ2FwdHVyZSBicmVhZGNydW1icyBmb3IgY2hpbGQgcHJvY2Vzc2VzIGFuZCB3b3JrZXIgdGhyZWFkcy5cbiAqL1xuY29uc3QgcHJvY2Vzc1RocmVhZEJyZWFkY3J1bWJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3Byb2Nlc3NUaHJlYWRCcmVhZGNydW1iSW50ZWdyYXRpb24pO1xuXG5mdW5jdGlvbiBjYXB0dXJlQ2hpbGRQcm9jZXNzRXZlbnRzKGNoaWxkLCBvcHRpb25zKSB7XG4gIGxldCBoYXNFeGl0ZWQgPSBmYWxzZTtcbiAgbGV0IGRhdGE7XG5cbiAgY2hpbGRcbiAgICAub24oJ3NwYXduJywgKCkgPT4ge1xuICAgICAgLy8gVGhpcyBpcyBTZW50cnkgZ2V0dGluZyBtYWNPUyBPUyBjb250ZXh0XG4gICAgICBpZiAoY2hpbGQuc3Bhd25maWxlID09PSAnL3Vzci9iaW4vc3dfdmVycycpIHtcbiAgICAgICAgaGFzRXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBkYXRhID0geyBzcGF3bmZpbGU6IGNoaWxkLnNwYXduZmlsZSB9O1xuICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZUNoaWxkUHJvY2Vzc0FyZ3MpIHtcbiAgICAgICAgZGF0YS5zcGF3bmFyZ3MgPSBjaGlsZC5zcGF3bmFyZ3M7XG4gICAgICB9XG4gICAgfSlcbiAgICAub24oJ2V4aXQnLCBjb2RlID0+IHtcbiAgICAgIGlmICghaGFzRXhpdGVkKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gT25seSBsb2cgZm9yIG5vbi16ZXJvIGV4aXQgY29kZXNcbiAgICAgICAgaWYgKGNvZGUgIT09IG51bGwgJiYgY29kZSAhPT0gMCkge1xuICAgICAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ2NoaWxkX3Byb2Nlc3MnLFxuICAgICAgICAgICAgbWVzc2FnZTogYENoaWxkIHByb2Nlc3MgZXhpdGVkIHdpdGggY29kZSAnJHtjb2RlfSdgLFxuICAgICAgICAgICAgbGV2ZWw6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIC5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICBpZiAoIWhhc0V4aXRlZCkge1xuICAgICAgICBoYXNFeGl0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgY2F0ZWdvcnk6ICdjaGlsZF9wcm9jZXNzJyxcbiAgICAgICAgICBtZXNzYWdlOiBgQ2hpbGQgcHJvY2VzcyBlcnJvcmVkIHdpdGggJyR7ZXJyb3IubWVzc2FnZX0nYCxcbiAgICAgICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdvcmtlclRocmVhZEV2ZW50cyh3b3JrZXIpIHtcbiAgbGV0IHRocmVhZElkO1xuXG4gIHdvcmtlclxuICAgIC5vbignb25saW5lJywgKCkgPT4ge1xuICAgICAgdGhyZWFkSWQgPSB3b3JrZXIudGhyZWFkSWQ7XG4gICAgfSlcbiAgICAub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgY2F0ZWdvcnk6ICd3b3JrZXJfdGhyZWFkJyxcbiAgICAgICAgbWVzc2FnZTogYFdvcmtlciB0aHJlYWQgZXJyb3JlZCB3aXRoICcke2Vycm9yLm1lc3NhZ2V9J2AsXG4gICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICBkYXRhOiB7IHRocmVhZElkIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0cy5wcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uID0gcHJvY2Vzc1RocmVhZEJyZWFkY3J1bWJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3NUaHJlYWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (typeof process === 'object' && process.env && \"development\" !== 'development') {}\n      connectToSpotlight(client, _options);\n    },\n  };\n}) ;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nconst spotlightIntegration = core.defineIntegration(_spotlightIntegration);\n\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  client.on('beforeEnvelope', (envelope) => {\n    if (failedRequests > 3) {\n      utils.logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = utils.serializeEnvelope(envelope);\n\n    const request = getNativeHttpRequest();\n    const req = request(\n      {\n        method: 'POST',\n        path: spotlightUrl.pathname,\n        hostname: spotlightUrl.hostname,\n        port: spotlightUrl.port,\n        headers: {\n          'Content-Type': 'application/x-sentry-envelope',\n        },\n      },\n      res => {\n        if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n          // Reset failed requests counter on success\n          failedRequests = 0;\n        }\n        res.on('data', () => {\n          // Drain socket\n        });\n\n        res.on('end', () => {\n          // Drain socket\n        });\n        res.setEncoding('utf8');\n      },\n    );\n\n    req.on('error', () => {\n      failedRequests++;\n      utils.logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\n\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch (e) {\n    utils.logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\n/**\n * We want to get an unpatched http request implementation to avoid capturing our own calls.\n */\nfunction getNativeHttpRequest() {\n  const { request } = http;\n  if (isWrapped(request)) {\n    return request.__sentry_original__;\n  }\n\n  return request;\n}\n\nfunction isWrapped(impl) {\n  return '__sentry_original__' in impl;\n}\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\nexports.getNativeHttpRequest = getNativeHttpRequest;\nexports.spotlightIntegration = spotlightIntegration;\n//# sourceMappingURL=spotlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsd0hBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLDJIQUFlOztBQUVyQzs7QUFFQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxhQUFvQixvQkFBb0IsRUFFekY7QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCLElBQUk7QUFDMUIsSUFBSTtBQUNKLDBEQUEwRCxJQUFJO0FBQzlEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsVUFBVTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9zcG90bGlnaHQuanM/NzY2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBodHRwID0gcmVxdWlyZSgnbm9kZTpodHRwJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdTcG90bGlnaHQnO1xuXG5jb25zdCBfc3BvdGxpZ2h0SW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBfb3B0aW9ucyA9IHtcbiAgICBzaWRlY2FyVXJsOiBvcHRpb25zLnNpZGVjYXJVcmwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODk2OS9zdHJlYW0nLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgdXRpbHMubG9nZ2VyLndhcm4oXCJbU3BvdGxpZ2h0XSBJdCBzZWVtcyB5b3UncmUgbm90IGluIGRldiBtb2RlLiBEbyB5b3UgcmVhbGx5IHdhbnQgdG8gaGF2ZSBTcG90bGlnaHQgZW5hYmxlZD9cIik7XG4gICAgICB9XG4gICAgICBjb25uZWN0VG9TcG90bGlnaHQoY2xpZW50LCBfb3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBVc2UgdGhpcyBpbnRlZ3JhdGlvbiB0byBzZW5kIGVycm9ycyBhbmQgdHJhbnNhY3Rpb25zIHRvIFNwb3RsaWdodC5cbiAqXG4gKiBMZWFybiBtb3JlIGFib3V0IHNwb3RsaWdodCBhdCBodHRwczovL3Nwb3RsaWdodGpzLmNvbVxuICpcbiAqIEltcG9ydGFudDogVGhpcyBpbnRlZ3JhdGlvbiBvbmx5IHdvcmtzIHdpdGggTm9kZSAxOCBvciBuZXdlci5cbiAqL1xuY29uc3Qgc3BvdGxpZ2h0SW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9zcG90bGlnaHRJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGNvbm5lY3RUb1Nwb3RsaWdodChjbGllbnQsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3BvdGxpZ2h0VXJsID0gcGFyc2VTaWRlY2FyVXJsKG9wdGlvbnMuc2lkZWNhclVybCk7XG4gIGlmICghc3BvdGxpZ2h0VXJsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGZhaWxlZFJlcXVlc3RzID0gMDtcblxuICBjbGllbnQub24oJ2JlZm9yZUVudmVsb3BlJywgKGVudmVsb3BlKSA9PiB7XG4gICAgaWYgKGZhaWxlZFJlcXVlc3RzID4gMykge1xuICAgICAgdXRpbHMubG9nZ2VyLndhcm4oJ1tTcG90bGlnaHRdIERpc2FibGVkIFNlbnRyeSAtPiBTcG90bGlnaHQgaW50ZWdyYXRpb24gZHVlIHRvIHRvbyBtYW55IGZhaWxlZCByZXF1ZXN0cycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcmlhbGl6ZWRFbnZlbG9wZSA9IHV0aWxzLnNlcmlhbGl6ZUVudmVsb3BlKGVudmVsb3BlKTtcblxuICAgIGNvbnN0IHJlcXVlc3QgPSBnZXROYXRpdmVIdHRwUmVxdWVzdCgpO1xuICAgIGNvbnN0IHJlcSA9IHJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBwYXRoOiBzcG90bGlnaHRVcmwucGF0aG5hbWUsXG4gICAgICAgIGhvc3RuYW1lOiBzcG90bGlnaHRVcmwuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHNwb3RsaWdodFVybC5wb3J0LFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXNlbnRyeS1lbnZlbG9wZScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlICYmIHJlcy5zdGF0dXNDb2RlID49IDIwMCAmJiByZXMuc3RhdHVzQ29kZSA8IDQwMCkge1xuICAgICAgICAgIC8vIFJlc2V0IGZhaWxlZCByZXF1ZXN0cyBjb3VudGVyIG9uIHN1Y2Nlc3NcbiAgICAgICAgICBmYWlsZWRSZXF1ZXN0cyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLm9uKCdkYXRhJywgKCkgPT4ge1xuICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICB9KTtcblxuICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAvLyBEcmFpbiBzb2NrZXRcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgcmVxLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgIGZhaWxlZFJlcXVlc3RzKys7XG4gICAgICB1dGlscy5sb2dnZXIud2FybignW1Nwb3RsaWdodF0gRmFpbGVkIHRvIHNlbmQgZW52ZWxvcGUgdG8gU3BvdGxpZ2h0IFNpZGVjYXInKTtcbiAgICB9KTtcbiAgICByZXEud3JpdGUoc2VyaWFsaXplZEVudmVsb3BlKTtcbiAgICByZXEuZW5kKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNpZGVjYXJVcmwodXJsKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBVUkwoYCR7dXJsfWApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdXRpbHMubG9nZ2VyLndhcm4oYFtTcG90bGlnaHRdIEludmFsaWQgc2lkZWNhciBVUkw6ICR7dXJsfWApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBXZSB3YW50IHRvIGdldCBhbiB1bnBhdGNoZWQgaHR0cCByZXF1ZXN0IGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIGNhcHR1cmluZyBvdXIgb3duIGNhbGxzLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVIdHRwUmVxdWVzdCgpIHtcbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBodHRwO1xuICBpZiAoaXNXcmFwcGVkKHJlcXVlc3QpKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QuX19zZW50cnlfb3JpZ2luYWxfXztcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiBpc1dyYXBwZWQoaW1wbCkge1xuICByZXR1cm4gJ19fc2VudHJ5X29yaWdpbmFsX18nIGluIGltcGw7XG59XG5cbmV4cG9ydHMuSU5URUdSQVRJT05fTkFNRSA9IElOVEVHUkFUSU9OX05BTUU7XG5leHBvcnRzLmdldE5hdGl2ZUh0dHBSZXF1ZXN0ID0gZ2V0TmF0aXZlSHR0cFJlcXVlc3Q7XG5leHBvcnRzLnNwb3RsaWdodEludGVncmF0aW9uID0gc3BvdGxpZ2h0SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcG90bGlnaHQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLCtOQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsd0hBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsOElBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLDBKQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcz9iNzE5Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkFtcXBsaWIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tYW1xcGxpYicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQW1xcGxpYic7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgY29uc3VtZUVuZEhvb2s6IChzcGFuKSA9PiB7XG4gICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5hbXFwbGliLm90ZWwuY29uc3VtZXInKTtcbiAgfSxcbiAgcHVibGlzaEhvb2s6IChzcGFuKSA9PiB7XG4gICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5hbXFwbGliLm90ZWwucHVibGlzaGVyJyk7XG4gIH0sXG59O1xuXG5jb25zdCBpbnN0cnVtZW50QW1xcGxpYiA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uQW1xcGxpYi5BbXFwbGliSW5zdHJ1bWVudGF0aW9uKGNvbmZpZykpO1xuXG5jb25zdCBfYW1xcGxpYkludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRBbXFwbGliKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuY29uc3QgYW1xcGxpYkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfYW1xcGxpYkludGVncmF0aW9uKTtcblxuZXhwb3J0cy5hbXFwbGliSW50ZWdyYXRpb24gPSBhbXFwbGliSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRBbXFwbGliID0gaW5zdHJ1bWVudEFtcXBsaWI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbXFwbGliLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err);\n  next(err);\n}\n\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY29ubmVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLCtOQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsd0hBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsOElBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLDBKQUFnQzs7QUFFaEU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY29ubmVjdC5qcz81Njk4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkNvbm5lY3QgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tY29ubmVjdCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgZW5zdXJlSXNXcmFwcGVkID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQ29ubmVjdCc7XG5cbmNvbnN0IGluc3RydW1lbnRDb25uZWN0ID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25Db25uZWN0LkNvbm5lY3RJbnN0cnVtZW50YXRpb24oKSk7XG5cbmNvbnN0IF9jb25uZWN0SW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudENvbm5lY3QoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG5jb25zdCBjb25uZWN0SW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9jb25uZWN0SW50ZWdyYXRpb24pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gY29ubmVjdEVycm9yTWlkZGxld2FyZShlcnIsIHJlcSwgcmVzLCBuZXh0KSB7XG4gIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnIpO1xuICBuZXh0KGVycik7XG59XG5cbmNvbnN0IHNldHVwQ29ubmVjdEVycm9ySGFuZGxlciA9IChhcHApID0+IHtcbiAgYXBwLnVzZShjb25uZWN0RXJyb3JNaWRkbGV3YXJlKTtcblxuICAvLyBTYWRseSwgQ29ubmVjdEluc3RydW1lbnRhdGlvbiBoYXMgbm8gcmVxdWVzdEhvb2ssIHNvIHdlIG5lZWQgdG8gYWRkIHRoZSBhdHRyaWJ1dGVzIGhlcmVcbiAgLy8gV2UgcmVnaXN0ZXIgdGhpcyBob29rIGluIHRoaXMgbWV0aG9kLCBiZWNhdXNlIGlmIHdlIHJlZ2lzdGVyIGl0IGluIHRoZSBpbnRlZ3JhdGlvbiBgc2V0dXBgLFxuICAvLyBpdCB3b3VsZCBhbHdheXMgcnVuIGV2ZW4gZm9yIHVzZXJzIHRoYXQgYXJlIG5vdCBldmVuIHVzaW5nIGNvbm5lY3RcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICBhZGRDb25uZWN0U3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgfSk7XG4gIH1cblxuICBlbnN1cmVJc1dyYXBwZWQuZW5zdXJlSXNXcmFwcGVkKGFwcC51c2UsICdjb25uZWN0Jyk7XG59O1xuXG5mdW5jdGlvbiBhZGRDb25uZWN0U3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJlcXVlc3RfaGFuZGxlclxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1snY29ubmVjdC50eXBlJ107XG5cbiAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IHNldCwgb3Igd2UgaGF2ZSBubyBjb25uZWN0IHNwYW4sIG5vIG5lZWQgdG8gcHJvY2VzcyBhZ2Fpbi4uLlxuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5jb25uZWN0JyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uY29ubmVjdGAsXG4gIH0pO1xuXG4gIC8vIEFsc28gdXBkYXRlIHRoZSBuYW1lLCB3ZSBkb24ndCBuZWVkIHRvIFwibWlkZGxld2FyZSAtIFwiIHByZWZpeFxuICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1snY29ubmVjdC5uYW1lJ107XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSk7XG4gIH1cbn1cblxuZXhwb3J0cy5jb25uZWN0SW50ZWdyYXRpb24gPSBjb25uZWN0SW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRDb25uZWN0ID0gaW5zdHJ1bWVudENvbm5lY3Q7XG5leHBvcnRzLnNldHVwQ29ubmVjdEVycm9ySGFuZGxlciA9IHNldHVwQ29ubmVjdEVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3QuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-dataloader@0.12.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentDataloader();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _ => _.description, 'optionalAccess', _2 => _2.startsWith, 'call', _3 => _3('dataloader')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n        }\n\n        // These are all possible dataloader span descriptions\n        // Still checking for the future versions\n        // in case they add support for `clear` and `prime`\n        if (\n          spanJSON.description === 'dataloader.load' ||\n          spanJSON.description === 'dataloader.loadMany' ||\n          spanJSON.description === 'dataloader.batch'\n        ) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n          // TODO: We can try adding `key` to the `data` attribute upstream.\n          // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Dataloader integration\n *\n * Capture tracing data for Dataloader.\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsMkhBQWU7O0FBRTNCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsa0NBQWtDLG1CQUFPLENBQUMsd09BQTJDO0FBQ3JGLGFBQWEsbUJBQU8sQ0FBQyx3SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyw4SUFBMEI7O0FBRXJEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9kYXRhbG9hZGVyLmpzPzIyOWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZGF0YWxvYWRlcicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0RhdGFsb2FkZXInO1xuXG5jb25zdCBpbnN0cnVtZW50RGF0YWxvYWRlciA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRGF0YWxvYWRlci5EYXRhbG9hZGVySW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50RGF0YWxvYWRlcigpO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICBpZiAoX29wdGlvbmFsQ2hhaW4oW3NwYW5KU09OLCAnYWNjZXNzJywgXyA9PiBfLmRlc2NyaXB0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5zdGFydHNXaXRoLCAnY2FsbCcsIF8zID0+IF8zKCdkYXRhbG9hZGVyJyldKSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwuZGF0YWxvYWRlcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlc2UgYXJlIGFsbCBwb3NzaWJsZSBkYXRhbG9hZGVyIHNwYW4gZGVzY3JpcHRpb25zXG4gICAgICAgIC8vIFN0aWxsIGNoZWNraW5nIGZvciB0aGUgZnV0dXJlIHZlcnNpb25zXG4gICAgICAgIC8vIGluIGNhc2UgdGhleSBhZGQgc3VwcG9ydCBmb3IgYGNsZWFyYCBhbmQgYHByaW1lYFxuICAgICAgICBpZiAoXG4gICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmxvYWQnIHx8XG4gICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmxvYWRNYW55JyB8fFxuICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5iYXRjaCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnY2FjaGUuZ2V0Jyk7XG4gICAgICAgICAgLy8gVE9ETzogV2UgY2FuIHRyeSBhZGRpbmcgYGtleWAgdG8gdGhlIGBkYXRhYCBhdHRyaWJ1dGUgdXBzdHJlYW0uXG4gICAgICAgICAgLy8gT3IgYWx0ZXJuYXRpdmVseSwgd2UgY2FuIGFkZCBgcmVxdWVzdEhvb2tgIHRvIHRoZSBkYXRhbG9hZGVyIGluc3RydW1lbnRhdGlvbi5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBEYXRhbG9hZGVyIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIERhdGFsb2FkZXIuXG4gKi9cbmNvbnN0IGRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZGF0YWxvYWRlckludGVncmF0aW9uID0gZGF0YWxvYWRlckludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50RGF0YWxvYWRlciA9IGluc3RydW1lbnREYXRhbG9hZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YWxvYWRlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-express@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Express';\n\nconst instrumentExpress = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.express');\n\n        const attributes = core.spanToJSON(span).data || {};\n        // this is one of: middleware, request_handler, router\n        const type = attributes['express.type'];\n\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n        }\n\n        // Also update the name, we don't need to \"middleware - \" prefix\n        const name = attributes['express.name'];\n        if (typeof name === 'string') {\n          span.updateName(name);\n        }\n      },\n      spanNameHook(info, defaultName) {\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD &&\n            utils.logger.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n          return defaultName;\n        }\n        if (info.layerType === 'request_handler') {\n          // type cast b/c Otel unfortunately types info.request as any :(\n          const req = info.request ;\n          const method = req.method ? req.method.toUpperCase() : 'GET';\n          core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n        }\n        return defaultName;\n      },\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    },\n  };\n}) ;\n\n/**\n * Express integration\n *\n * Capture tracing data for express.\n * In order to capture exceptions, you have to call `setupExpressErrorHandler(app)` before any other middleware and after all controllers.\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    _req,\n    res,\n    next,\n  ) {\n    const shouldHandleError = _optionalChain([options, 'optionalAccess', _ => _.shouldHandleError]) || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const client = core.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        // Check if the `SessionFlusher` is instantiated on the client to go into this branch that marks the\n        // `requestSession.status` as `Crashed`, and this check is necessary because the `SessionFlusher` is only\n        // instantiated when the the`requestHandler` middleware is initialised, which indicates that we should be\n        // running in SessionAggregates mode\n        const isSessionAggregatesMode = client['_sessionFlusher'] !== undefined;\n        if (isSessionAggregatesMode) {\n          const requestSession = core.getIsolationScope().getRequestSession();\n          // If an error bubbles to the `errorHandler`, then this is an unhandled error, and should be reported as a\n          // Crashed session. The `_requestSession.status` is checked to ensure that this error is happening within\n          // the bounds of a request, and if so the status is updated\n          if (requestSession && requestSession.status !== undefined) {\n            requestSession.status = 'crashed';\n          }\n        }\n      }\n\n      const eventId = core.captureException(error, { mechanism: { type: 'middleware', handled: false } });\n      (res ).sentry = eventId;\n      next(error);\n\n      return;\n    }\n\n    next(error);\n  };\n}\n\n/**\n * Setup an error handler for Express.\n * The error handler must be before any other middleware and after all controllers.\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressErrorHandler(options));\n  ensureIsWrapped.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFastify = __webpack_require__(/*! @opentelemetry/instrumentation-fastify */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-fastify@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fastify/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\n// We inline the types we care about here\n\nconst INTEGRATION_NAME = 'Fastify';\n\nconst instrumentFastify = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationFastify.FastifyInstrumentation({\n      requestHook(span) {\n        addFastifySpanAttributes(span);\n      },\n    }),\n);\n\nconst _fastifyIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFastify();\n    },\n  };\n}) ;\n\n/**\n * Express integration\n *\n * Capture tracing data for fastify.\n */\nconst fastifyIntegration = core.defineIntegration(_fastifyIntegration);\n\n/**\n * Setup an error handler for Fastify.\n */\nfunction setupFastifyErrorHandler(fastify) {\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (_request, _reply, error) => {\n        core.captureException(error);\n      });\n\n      // registering `onRequest` hook here instead of using Otel `onRequest` callback b/c `onRequest` hook\n      // is ironically called in the fastify `preHandler` hook which is called later in the lifecycle:\n      // https://fastify.dev/docs/latest/Reference/Lifecycle/\n      fastify.addHook('onRequest', async (request, _reply) => {\n        const reqWithRouteInfo = request ;\n\n        // Taken from Otel Fastify instrumentation:\n        // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts#L94-L96\n        const routeName = _optionalChain([reqWithRouteInfo, 'access', _ => _.routeOptions, 'optionalAccess', _2 => _2.url]) || reqWithRouteInfo.routerPath;\n        const method = _optionalChain([reqWithRouteInfo, 'access', _3 => _3.routeOptions, 'optionalAccess', _4 => _4.method]) || 'GET';\n\n        core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      });\n\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  fastify.register(plugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using fastify\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addFastifySpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(fastify.addHook, 'fastify');\n}\n\nfunction addFastifySpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Also remove `fastify -> ` prefix\n    span.updateName(name.replace(/^fastify -> /, ''));\n  }\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=fastify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsMkhBQWU7O0FBRTNCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsK0JBQStCLG1CQUFPLENBQUMsK05BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyx3SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyw4SUFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsMEpBQWdDOztBQUVoRTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVEQUF1RCxRQUFRLEVBQUUsVUFBVTtBQUMzRSxPQUFPOztBQUVQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLEtBQUs7QUFDakQsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS5qcz8xNWE3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25GYXN0aWZ5ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWZhc3RpZnknKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGVuc3VyZUlzV3JhcHBlZCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcycpO1xuXG4vLyBXZSBpbmxpbmUgdGhlIHR5cGVzIHdlIGNhcmUgYWJvdXQgaGVyZVxuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0Zhc3RpZnknO1xuXG5jb25zdCBpbnN0cnVtZW50RmFzdGlmeSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRmFzdGlmeS5GYXN0aWZ5SW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVlc3RIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkRmFzdGlmeVNwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9mYXN0aWZ5SW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEZhc3RpZnkoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEV4cHJlc3MgaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgZmFzdGlmeS5cbiAqL1xuY29uc3QgZmFzdGlmeUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZmFzdGlmeUludGVncmF0aW9uKTtcblxuLyoqXG4gKiBTZXR1cCBhbiBlcnJvciBoYW5kbGVyIGZvciBGYXN0aWZ5LlxuICovXG5mdW5jdGlvbiBzZXR1cEZhc3RpZnlFcnJvckhhbmRsZXIoZmFzdGlmeSkge1xuICBjb25zdCBwbHVnaW4gPSBPYmplY3QuYXNzaWduKFxuICAgIGZ1bmN0aW9uIChmYXN0aWZ5LCBfb3B0aW9ucywgZG9uZSkge1xuICAgICAgZmFzdGlmeS5hZGRIb29rKCdvbkVycm9yJywgYXN5bmMgKF9yZXF1ZXN0LCBfcmVwbHksIGVycm9yKSA9PiB7XG4gICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvcik7XG4gICAgICB9KTtcblxuICAgICAgLy8gcmVnaXN0ZXJpbmcgYG9uUmVxdWVzdGAgaG9vayBoZXJlIGluc3RlYWQgb2YgdXNpbmcgT3RlbCBgb25SZXF1ZXN0YCBjYWxsYmFjayBiL2MgYG9uUmVxdWVzdGAgaG9va1xuICAgICAgLy8gaXMgaXJvbmljYWxseSBjYWxsZWQgaW4gdGhlIGZhc3RpZnkgYHByZUhhbmRsZXJgIGhvb2sgd2hpY2ggaXMgY2FsbGVkIGxhdGVyIGluIHRoZSBsaWZlY3ljbGU6XG4gICAgICAvLyBodHRwczovL2Zhc3RpZnkuZGV2L2RvY3MvbGF0ZXN0L1JlZmVyZW5jZS9MaWZlY3ljbGUvXG4gICAgICBmYXN0aWZ5LmFkZEhvb2soJ29uUmVxdWVzdCcsIGFzeW5jIChyZXF1ZXN0LCBfcmVwbHkpID0+IHtcbiAgICAgICAgY29uc3QgcmVxV2l0aFJvdXRlSW5mbyA9IHJlcXVlc3QgO1xuXG4gICAgICAgIC8vIFRha2VuIGZyb20gT3RlbCBGYXN0aWZ5IGluc3RydW1lbnRhdGlvbjpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9ibG9iL21haW4vcGx1Z2lucy9ub2RlL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWZhc3RpZnkvc3JjL2luc3RydW1lbnRhdGlvbi50cyNMOTQtTDk2XG4gICAgICAgIGNvbnN0IHJvdXRlTmFtZSA9IF9vcHRpb25hbENoYWluKFtyZXFXaXRoUm91dGVJbmZvLCAnYWNjZXNzJywgXyA9PiBfLnJvdXRlT3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIudXJsXSkgfHwgcmVxV2l0aFJvdXRlSW5mby5yb3V0ZXJQYXRoO1xuICAgICAgICBjb25zdCBtZXRob2QgPSBfb3B0aW9uYWxDaGFpbihbcmVxV2l0aFJvdXRlSW5mbywgJ2FjY2VzcycsIF8zID0+IF8zLnJvdXRlT3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzQubWV0aG9kXSkgfHwgJ0dFVCc7XG5cbiAgICAgICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFRyYW5zYWN0aW9uTmFtZShgJHttZXRob2R9ICR7cm91dGVOYW1lfWApO1xuICAgICAgfSk7XG5cbiAgICAgIGRvbmUoKTtcbiAgICB9LFxuICAgIHtcbiAgICAgIFtTeW1ib2wuZm9yKCdza2lwLW92ZXJyaWRlJyldOiB0cnVlLFxuICAgICAgW1N5bWJvbC5mb3IoJ2Zhc3RpZnkuZGlzcGxheS1uYW1lJyldOiAnc2VudHJ5LWZhc3RpZnktZXJyb3ItaGFuZGxlcicsXG4gICAgfSxcbiAgKTtcblxuICBmYXN0aWZ5LnJlZ2lzdGVyKHBsdWdpbik7XG5cbiAgLy8gU2FkbHksIG1pZGRsZXdhcmUgc3BhbnMgZG8gbm90IGdvIHRocm91Z2ggYHJlcXVlc3RIb29rYCwgc28gd2UgaGFuZGxlIHRob3NlIGhlcmVcbiAgLy8gV2UgcmVnaXN0ZXIgdGhpcyBob29rIGluIHRoaXMgbWV0aG9kLCBiZWNhdXNlIGlmIHdlIHJlZ2lzdGVyIGl0IGluIHRoZSBpbnRlZ3JhdGlvbiBgc2V0dXBgLFxuICAvLyBpdCB3b3VsZCBhbHdheXMgcnVuIGV2ZW4gZm9yIHVzZXJzIHRoYXQgYXJlIG5vdCBldmVuIHVzaW5nIGZhc3RpZnlcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICBhZGRGYXN0aWZ5U3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgfSk7XG4gIH1cblxuICBlbnN1cmVJc1dyYXBwZWQuZW5zdXJlSXNXcmFwcGVkKGZhc3RpZnkuYWRkSG9vaywgJ2Zhc3RpZnknKTtcbn1cblxuZnVuY3Rpb24gYWRkRmFzdGlmeVNwYW5BdHRyaWJ1dGVzKHNwYW4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhIHx8IHt9O1xuXG4gIC8vIHRoaXMgaXMgb25lIG9mOiBtaWRkbGV3YXJlLCByZXF1ZXN0X2hhbmRsZXJcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2Zhc3RpZnkudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gZmFzdGlmeSBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuZmFzdGlmeScsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9LmZhc3RpZnlgLFxuICB9KTtcblxuICAvLyBBbHNvIHVwZGF0ZSB0aGUgbmFtZSwgd2UgZG9uJ3QgbmVlZCB0byBcIm1pZGRsZXdhcmUgLSBcIiBwcmVmaXhcbiAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZXNbJ2Zhc3RpZnkubmFtZSddIHx8IGF0dHJpYnV0ZXNbJ3BsdWdpbi5uYW1lJ10gfHwgYXR0cmlidXRlc1snaG9vay5uYW1lJ107XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBBbHNvIHJlbW92ZSBgZmFzdGlmeSAtPiBgIHByZWZpeFxuICAgIHNwYW4udXBkYXRlTmFtZShuYW1lLnJlcGxhY2UoL15mYXN0aWZ5IC0+IC8sICcnKSk7XG4gIH1cbn1cblxuZXhwb3J0cy5mYXN0aWZ5SW50ZWdyYXRpb24gPSBmYXN0aWZ5SW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRGYXN0aWZ5ID0gaW5zdHJ1bWVudEZhc3RpZnk7XG5leHBvcnRzLnNldHVwRmFzdGlmeUVycm9ySGFuZGxlciA9IHNldHVwRmFzdGlmeUVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhc3RpZnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.39.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentGenericPool();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n\n        const spanDescription = spanJSON.description;\n\n        // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n        const isGenericPoolSpan =\n          spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n        if (isGenericPoolSpan) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * GenericPool integration\n *\n * Capture tracing data for GenericPool.\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ2VuZXJpY1Bvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxtQ0FBbUMsbUJBQU8sQ0FBQyw4T0FBNkM7QUFDeEYsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjs7QUFFckQ7O0FBRUEsb0pBQW9KOztBQUVwSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9nZW5lcmljUG9vbC5qcz9lNzJiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkdlbmVyaWNQb29sID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdlbmVyaWMtcG9vbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0dlbmVyaWNQb29sJztcblxuY29uc3QgaW5zdHJ1bWVudEdlbmVyaWNQb29sID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbC5HZW5lcmljUG9vbEluc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50R2VuZXJpY1Bvb2woKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcblxuICAgICAgICBjb25zdCBzcGFuRGVzY3JpcHRpb24gPSBzcGFuSlNPTi5kZXNjcmlwdGlvbjtcblxuICAgICAgICAvLyB0eXBvIGluIGVtaXR0ZWQgc3BhbiBmb3IgdmVyc2lvbiA8PSAwLjM4LjAgb2YgQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdlbmVyaWMtcG9vbFxuICAgICAgICBjb25zdCBpc0dlbmVyaWNQb29sU3BhbiA9XG4gICAgICAgICAgc3BhbkRlc2NyaXB0aW9uID09PSAnZ2VuZXJpYy1wb29sLmFxdWlyZScgfHwgc3BhbkRlc2NyaXB0aW9uID09PSAnZ2VuZXJpYy1wb29sLmFjcXVpcmUnO1xuXG4gICAgICAgIGlmIChpc0dlbmVyaWNQb29sU3Bhbikge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwuZ2VuZXJpY19wb29sJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogR2VuZXJpY1Bvb2wgaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgR2VuZXJpY1Bvb2wuXG4gKi9cbmNvbnN0IGdlbmVyaWNQb29sSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9nZW5lcmljUG9vbEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5nZW5lcmljUG9vbEludGVncmF0aW9uID0gZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEdlbmVyaWNQb29sID0gaW5zdHJ1bWVudEdlbmVyaWNQb29sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJpY1Bvb2wuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  (_options = {}) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return new instrumentationGraphql.GraphQLInstrumentation({\n      ...options,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        const attributes = core.spanToJSON(span).data || {};\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n\n          // We guard to only do this on http.server spans\n\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data || {};\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            existingOperations.push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (existingOperations) {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n        }\n      },\n    });\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * GraphQL integration\n *\n * Capture tracing data for GraphQL.\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ3JhcGhxbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLCtOQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsd0hBQWM7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsK09BQXVCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQywwSkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsa0RBQWtELGVBQWUsRUFBRSxjQUFjLE9BQU8sY0FBYzs7QUFFdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dyYXBocWwuanM/MTRiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25HcmFwaHFsID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdyYXBocWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0dyYXBocWwnO1xuXG5jb25zdCBpbnN0cnVtZW50R3JhcGhxbCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKF9vcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gZ2V0T3B0aW9uc1dpdGhEZWZhdWx0cyhfb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbkdyYXBocWwuR3JhcGhRTEluc3RydW1lbnRhdGlvbih7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5ncmFwaHFsLm90ZWwuZ3JhcGhxbCcpO1xuXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YSB8fCB7fTtcblxuICAgICAgICAvLyBJZiBvcGVyYXRpb24ubmFtZSBpcyBub3Qgc2V0LCB3ZSBmYWxsIGJhY2sgdG8gdXNlIG9wZXJhdGlvbi50eXBlIG9ubHlcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uVHlwZSA9IGF0dHJpYnV0ZXNbJ2dyYXBocWwub3BlcmF0aW9uLnR5cGUnXTtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uTmFtZSA9IGF0dHJpYnV0ZXNbJ2dyYXBocWwub3BlcmF0aW9uLm5hbWUnXTtcblxuICAgICAgICBpZiAob3B0aW9ucy51c2VPcGVyYXRpb25OYW1lRm9yUm9vdFNwYW4gJiYgb3BlcmF0aW9uVHlwZSkge1xuICAgICAgICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihzcGFuKTtcblxuICAgICAgICAgIC8vIFdlIGd1YXJkIHRvIG9ubHkgZG8gdGhpcyBvbiBodHRwLnNlcnZlciBzcGFuc1xuXG4gICAgICAgICAgY29uc3Qgcm9vdFNwYW5BdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHJvb3RTcGFuKS5kYXRhIHx8IHt9O1xuXG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdPcGVyYXRpb25zID0gcm9vdFNwYW5BdHRyaWJ1dGVzW29wZW50ZWxlbWV0cnkuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTl0gfHwgW107XG5cbiAgICAgICAgICBjb25zdCBuZXdPcGVyYXRpb24gPSBvcGVyYXRpb25OYW1lID8gYCR7b3BlcmF0aW9uVHlwZX0gJHtvcGVyYXRpb25OYW1lfWAgOiBgJHtvcGVyYXRpb25UeXBlfWA7XG5cbiAgICAgICAgICAvLyBXZSBrZWVwIHRyYWNrIG9mIGVhY2ggb3BlcmF0aW9uIG9uIHRoZSByb290IHNwYW5cbiAgICAgICAgICAvLyBUaGlzIGNhbiBlaXRoZXIgYmUgYSBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MgKGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBvcGVyYXRpb25zKVxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGV4aXN0aW5nT3BlcmF0aW9ucykpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nT3BlcmF0aW9ucy5wdXNoKG5ld09wZXJhdGlvbik7XG4gICAgICAgICAgICByb290U3Bhbi5zZXRBdHRyaWJ1dGUob3BlbnRlbGVtZXRyeS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OLCBleGlzdGluZ09wZXJhdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXhpc3RpbmdPcGVyYXRpb25zKSB7XG4gICAgICAgICAgICByb290U3Bhbi5zZXRBdHRyaWJ1dGUob3BlbnRlbGVtZXRyeS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OLCBbZXhpc3RpbmdPcGVyYXRpb25zLCBuZXdPcGVyYXRpb25dKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKG9wZW50ZWxlbWV0cnkuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTiwgbmV3T3BlcmF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4pO1xuXG5jb25zdCBfZ3JhcGhxbEludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIC8vIFdlIHNldCBkZWZhdWx0cyBoZXJlLCB0b28sIGJlY2F1c2Ugb3RoZXJ3aXNlIHdlJ2QgdXBkYXRlIHRoZSBpbnN0cnVtZW50YXRpb24gY29uZmlnXG4gICAgICAvLyB0byB0aGUgY29uZmlnIHdpdGhvdXQgZGVmYXVsdHMsIGFzIGBnZW5lcmF0ZUluc3RydW1lbnRPbmNlYCBhdXRvbWF0aWNhbGx5IGNhbGxzIGBzZXRDb25maWcob3B0aW9ucylgXG4gICAgICAvLyB3aGVuIGJlaW5nIGNhbGxlZCB0aGUgc2Vjb25kIHRpbWVcbiAgICAgIGluc3RydW1lbnRHcmFwaHFsKGdldE9wdGlvbnNXaXRoRGVmYXVsdHMob3B0aW9ucykpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogR3JhcGhRTCBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBHcmFwaFFMLlxuICovXG5jb25zdCBncmFwaHFsSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9ncmFwaHFsSW50ZWdyYXRpb24pO1xuXG5mdW5jdGlvbiBnZXRPcHRpb25zV2l0aERlZmF1bHRzKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICBpZ25vcmVSZXNvbHZlU3BhbnM6IHRydWUsXG4gICAgaWdub3JlVHJpdmlhbFJlc29sdmVTcGFuczogdHJ1ZSxcbiAgICB1c2VPcGVyYXRpb25OYW1lRm9yUm9vdFNwYW46IHRydWUsXG4gICAgLi4ub3B0aW9ucyxcbiAgfTtcbn1cblxuZXhwb3J0cy5ncmFwaHFsSW50ZWdyYXRpb24gPSBncmFwaHFsSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRHcmFwaHFsID0gaW5zdHJ1bWVudEdyYXBocWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncmFwaHFsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Hapi integration\n *\n * Capture tracing data for Hapi.\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return event && (event ).error !== undefined;\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route && route.path) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([route, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          utils.logger.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  ensureIsWrapped.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaGFwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsMkhBQWU7O0FBRTNCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsNEJBQTRCLG1CQUFPLENBQUMsc05BQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyx3SEFBYztBQUNuQyxjQUFjLG1CQUFPLENBQUMsMkhBQWU7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMseUlBQXlCO0FBQ3BELG1CQUFtQixtQkFBTyxDQUFDLGlKQUE2QjtBQUN4RCx3QkFBd0IsbUJBQU8sQ0FBQyw2SkFBbUM7O0FBRW5FOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsc0NBQXNDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCx1SEFBdUgsRUFBRSxXQUFXO0FBQzdMO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLEtBQUs7QUFDakQsR0FBRztBQUNIOztBQUVBLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIsc0JBQXNCO0FBQ3RCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaGFwaS9pbmRleC5qcz8xMTM3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25IYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWhhcGknKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBlbnN1cmVJc1dyYXBwZWQgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdIYXBpJztcblxuY29uc3QgaW5zdHJ1bWVudEhhcGkgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkhhcGkuSGFwaUluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2hhcGlJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50SGFwaSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogSGFwaSBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBIYXBpLlxuICogSWYgeW91IGFsc28gd2FudCB0byBjYXB0dXJlIGVycm9ycywgeW91IG5lZWQgdG8gY2FsbCBgc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcilgIGFmdGVyIHlvdSBzZXQgdXAgeW91ciBzZXJ2ZXIuXG4gKi9cbmNvbnN0IGhhcGlJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2hhcGlJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGlzRXJyb3JFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQgJiYgKGV2ZW50ICkuZXJyb3IgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gc2VuZEVycm9yVG9TZW50cnkoZXJyb3JEYXRhKSB7XG4gIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvckRhdGEsIHtcbiAgICBtZWNoYW5pc206IHtcbiAgICAgIHR5cGU6ICdoYXBpJyxcbiAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgZGF0YToge1xuICAgICAgICBmdW5jdGlvbjogJ2hhcGlFcnJvclBsdWdpbicsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufVxuXG5jb25zdCBoYXBpRXJyb3JQbHVnaW4gPSB7XG4gIG5hbWU6ICdTZW50cnlIYXBpRXJyb3JQbHVnaW4nLFxuICB2ZXJzaW9uOiBjb3JlLlNES19WRVJTSU9OLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICByZWdpc3RlcjogYXN5bmMgZnVuY3Rpb24gKHNlcnZlckFyZykge1xuICAgIGNvbnN0IHNlcnZlciA9IHNlcnZlckFyZyA7XG5cbiAgICBzZXJ2ZXIuZXZlbnRzLm9uKHsgbmFtZTogJ3JlcXVlc3QnLCBjaGFubmVsczogWydlcnJvciddIH0sIChyZXF1ZXN0LCBldmVudCkgPT4ge1xuICAgICAgaWYgKGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSAhPT0gY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSkge1xuICAgICAgICBjb25zdCByb3V0ZSA9IHJlcXVlc3Qucm91dGU7XG4gICAgICAgIGlmIChyb3V0ZSAmJiByb3V0ZS5wYXRoKSB7XG4gICAgICAgICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFRyYW5zYWN0aW9uTmFtZShgJHtfb3B0aW9uYWxDaGFpbihbcm91dGUsICdhY2Nlc3MnLCBfID0+IF8ubWV0aG9kLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi50b1VwcGVyQ2FzZSwgJ2NhbGwnLCBfMyA9PiBfMygpXSkgfHwgJ0dFVCd9ICR7cm91dGUucGF0aH1gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgICAgIHV0aWxzLmxvZ2dlci53YXJuKCdJc29sYXRpb24gc2NvcGUgaXMgc3RpbGwgdGhlIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlIC0gc2tpcHBpbmcgc2V0dGluZyB0cmFuc2FjdGlvbk5hbWUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRXJyb3JFdmVudChldmVudCkpIHtcbiAgICAgICAgc2VuZEVycm9yVG9TZW50cnkoZXZlbnQuZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxufTtcblxuLyoqXG4gKiBBZGQgYSBIYXBpIHBsdWdpbiB0byBjYXB0dXJlIGVycm9ycyB0byBTZW50cnkuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNldHVwSGFwaUVycm9ySGFuZGxlcihzZXJ2ZXIpIHtcbiAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKGhhcGlFcnJvclBsdWdpbik7XG5cbiAgLy8gU2FkbHksIG1pZGRsZXdhcmUgc3BhbnMgZG8gbm90IGdvIHRocm91Z2ggYHJlcXVlc3RIb29rYCwgc28gd2UgaGFuZGxlIHRob3NlIGhlcmVcbiAgLy8gV2UgcmVnaXN0ZXIgdGhpcyBob29rIGluIHRoaXMgbWV0aG9kLCBiZWNhdXNlIGlmIHdlIHJlZ2lzdGVyIGl0IGluIHRoZSBpbnRlZ3JhdGlvbiBgc2V0dXBgLFxuICAvLyBpdCB3b3VsZCBhbHdheXMgcnVuIGV2ZW4gZm9yIHVzZXJzIHRoYXQgYXJlIG5vdCBldmVuIHVzaW5nIGhhcGlcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICBhZGRIYXBpU3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gIGVuc3VyZUlzV3JhcHBlZC5lbnN1cmVJc1dyYXBwZWQoc2VydmVyLnJlZ2lzdGVyLCAnaGFwaScpO1xufVxuXG5mdW5jdGlvbiBhZGRIYXBpU3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IHJvdXRlciwgcGx1Z2luLCBzZXJ2ZXIuZXh0XG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydoYXBpLnR5cGUnXTtcblxuICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgc2V0LCBvciB3ZSBoYXZlIG5vIEhhcGkgc3Bhbiwgbm8gbmVlZCB0byBwcm9jZXNzIGFnYWluLi4uXG4gIGlmIChhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gfHwgIXR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLmhhcGknLFxuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBgJHt0eXBlfS5oYXBpYCxcbiAgfSk7XG59XG5cbmV4cG9ydHMuaGFwaUVycm9yUGx1Z2luID0gaGFwaUVycm9yUGx1Z2luO1xuZXhwb3J0cy5oYXBpSW50ZWdyYXRpb24gPSBoYXBpSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRIYXBpID0gaW5zdHJ1bWVudEhhcGk7XG5leHBvcnRzLnNldHVwSGFwaUVycm9ySGFuZGxlciA9IHNldHVwSGFwaUVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index$1 = __webpack_require__(/*! ../http/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./fastify.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index = __webpack_require__(/*! ./hapi/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst nest = __webpack_require__(/*! ./nest/nest.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    fastify.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    // For now, we do not include prisma by default because it has ESM issues\n    // See https://github.com/prisma/prisma/issues/23410\n    // TODO v8: Figure out a better solution for this, maybe only disable in ESM mode?\n    // prismaIntegration(),\n    nest.nestIntegration(),\n    index.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    index$1.instrumentOtelHttp,\n    express.instrumentExpress,\n    connect.instrumentConnect,\n    fastify.instrumentFastify,\n    index.instrumentHapi,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    nest.instrumentNest,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxnQkFBZ0IsbUJBQU8sQ0FBQyw4SUFBa0I7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsK0lBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsK0lBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsK0lBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsK0lBQWM7QUFDdEMsb0JBQW9CLG1CQUFPLENBQUMsdUpBQWtCO0FBQzlDLGdCQUFnQixtQkFBTyxDQUFDLCtJQUFjO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQyxxSkFBaUI7QUFDdkMsY0FBYyxtQkFBTyxDQUFDLDJJQUFZO0FBQ2xDLFlBQVksbUJBQU8sQ0FBQyx1SUFBVTtBQUM5QixvQkFBb0IsbUJBQU8sQ0FBQyx1SkFBa0I7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLDJJQUFZO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLGlKQUFlO0FBQ3hDLGNBQWMsbUJBQU8sQ0FBQywySUFBWTtBQUNsQyxlQUFlLG1CQUFPLENBQUMsNklBQWE7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLG1KQUFnQjtBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQyxpSkFBZTtBQUN4QyxjQUFjLG1CQUFPLENBQUMsMklBQVk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEMsZ0RBQWdEO0FBQ2hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9pbmRleC5qcz8zMDk4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluZGV4JDEgPSByZXF1aXJlKCcuLi9odHRwL2luZGV4LmpzJyk7XG5jb25zdCBhbXFwbGliID0gcmVxdWlyZSgnLi9hbXFwbGliLmpzJyk7XG5jb25zdCBjb25uZWN0ID0gcmVxdWlyZSgnLi9jb25uZWN0LmpzJyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnLi9leHByZXNzLmpzJyk7XG5jb25zdCBmYXN0aWZ5ID0gcmVxdWlyZSgnLi9mYXN0aWZ5LmpzJyk7XG5jb25zdCBnZW5lcmljUG9vbCA9IHJlcXVpcmUoJy4vZ2VuZXJpY1Bvb2wuanMnKTtcbmNvbnN0IGdyYXBocWwgPSByZXF1aXJlKCcuL2dyYXBocWwuanMnKTtcbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi9oYXBpL2luZGV4LmpzJyk7XG5jb25zdCBrYWZrYSA9IHJlcXVpcmUoJy4va2Fma2EuanMnKTtcbmNvbnN0IGtvYSA9IHJlcXVpcmUoJy4va29hLmpzJyk7XG5jb25zdCBscnVtZW1vaXplciA9IHJlcXVpcmUoJy4vbHJ1bWVtb2l6ZXIuanMnKTtcbmNvbnN0IG1vbmdvID0gcmVxdWlyZSgnLi9tb25nby5qcycpO1xuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCcuL21vbmdvb3NlLmpzJyk7XG5jb25zdCBteXNxbCA9IHJlcXVpcmUoJy4vbXlzcWwuanMnKTtcbmNvbnN0IG15c3FsMiA9IHJlcXVpcmUoJy4vbXlzcWwyLmpzJyk7XG5jb25zdCBuZXN0ID0gcmVxdWlyZSgnLi9uZXN0L25lc3QuanMnKTtcbmNvbnN0IHBvc3RncmVzID0gcmVxdWlyZSgnLi9wb3N0Z3Jlcy5qcycpO1xuY29uc3QgcmVkaXMgPSByZXF1aXJlKCcuL3JlZGlzLmpzJyk7XG5cbi8qKlxuICogV2l0aCBPVEVMLCBhbGwgcGVyZm9ybWFuY2UgaW50ZWdyYXRpb25zIHdpbGwgYmUgYWRkZWQsIGFzIE9URUwgb25seSBpbml0aWFsaXplcyB0aGVtIHdoZW4gdGhlIHBhdGNoZWQgcGFja2FnZSBpcyBhY3R1YWxseSByZXF1aXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zKCkge1xuICByZXR1cm4gW1xuICAgIGV4cHJlc3MuZXhwcmVzc0ludGVncmF0aW9uKCksXG4gICAgZmFzdGlmeS5mYXN0aWZ5SW50ZWdyYXRpb24oKSxcbiAgICBncmFwaHFsLmdyYXBocWxJbnRlZ3JhdGlvbigpLFxuICAgIG1vbmdvLm1vbmdvSW50ZWdyYXRpb24oKSxcbiAgICBtb25nb29zZS5tb25nb29zZUludGVncmF0aW9uKCksXG4gICAgbXlzcWwubXlzcWxJbnRlZ3JhdGlvbigpLFxuICAgIG15c3FsMi5teXNxbDJJbnRlZ3JhdGlvbigpLFxuICAgIHJlZGlzLnJlZGlzSW50ZWdyYXRpb24oKSxcbiAgICBwb3N0Z3Jlcy5wb3N0Z3Jlc0ludGVncmF0aW9uKCksXG4gICAgLy8gRm9yIG5vdywgd2UgZG8gbm90IGluY2x1ZGUgcHJpc21hIGJ5IGRlZmF1bHQgYmVjYXVzZSBpdCBoYXMgRVNNIGlzc3Vlc1xuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcHJpc21hL3ByaXNtYS9pc3N1ZXMvMjM0MTBcbiAgICAvLyBUT0RPIHY4OiBGaWd1cmUgb3V0IGEgYmV0dGVyIHNvbHV0aW9uIGZvciB0aGlzLCBtYXliZSBvbmx5IGRpc2FibGUgaW4gRVNNIG1vZGU/XG4gICAgLy8gcHJpc21hSW50ZWdyYXRpb24oKSxcbiAgICBuZXN0Lm5lc3RJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4LmhhcGlJbnRlZ3JhdGlvbigpLFxuICAgIGtvYS5rb2FJbnRlZ3JhdGlvbigpLFxuICAgIGNvbm5lY3QuY29ubmVjdEludGVncmF0aW9uKCksXG4gICAgZ2VuZXJpY1Bvb2wuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbigpLFxuICAgIGthZmthLmthZmthSW50ZWdyYXRpb24oKSxcbiAgICBhbXFwbGliLmFtcXBsaWJJbnRlZ3JhdGlvbigpLFxuICAgIGxydW1lbW9pemVyLmxydU1lbW9pemVySW50ZWdyYXRpb24oKSxcbiAgXTtcbn1cblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIG1ldGhvZHMgdG8gaW5zdHJ1bWVudCBPVEVMLCB3aGVuIHByZWxvYWQgaW5zdHJ1bWVudGF0aW9uLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZCgpIHtcbiAgcmV0dXJuIFtcbiAgICBpbmRleCQxLmluc3RydW1lbnRPdGVsSHR0cCxcbiAgICBleHByZXNzLmluc3RydW1lbnRFeHByZXNzLFxuICAgIGNvbm5lY3QuaW5zdHJ1bWVudENvbm5lY3QsXG4gICAgZmFzdGlmeS5pbnN0cnVtZW50RmFzdGlmeSxcbiAgICBpbmRleC5pbnN0cnVtZW50SGFwaSxcbiAgICBrYWZrYS5pbnN0cnVtZW50S2Fma2EsXG4gICAga29hLmluc3RydW1lbnRLb2EsXG4gICAgbHJ1bWVtb2l6ZXIuaW5zdHJ1bWVudExydU1lbW9pemVyLFxuICAgIG5lc3QuaW5zdHJ1bWVudE5lc3QsXG4gICAgbW9uZ28uaW5zdHJ1bWVudE1vbmdvLFxuICAgIG1vbmdvb3NlLmluc3RydW1lbnRNb25nb29zZSxcbiAgICBteXNxbC5pbnN0cnVtZW50TXlzcWwsXG4gICAgbXlzcWwyLmluc3RydW1lbnRNeXNxbDIsXG4gICAgcG9zdGdyZXMuaW5zdHJ1bWVudFBvc3RncmVzLFxuICAgIGluZGV4Lmluc3RydW1lbnRIYXBpLFxuICAgIGdyYXBocWwuaW5zdHJ1bWVudEdyYXBocWwsXG4gICAgcmVkaXMuaW5zdHJ1bWVudFJlZGlzLFxuICAgIGdlbmVyaWNQb29sLmluc3RydW1lbnRHZW5lcmljUG9vbCxcbiAgICBhbXFwbGliLmluc3RydW1lbnRBbXFwbGliLFxuICBdO1xufVxuXG5leHBvcnRzLmdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucyA9IGdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucztcbmV4cG9ydHMuZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZCA9IGdldE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb25Ub1ByZWxvYWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.4.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * KafkaJs integration\n *\n * Capture tracing data for KafkaJs.\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQyw4TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQywwSkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanM/MWI3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25LYWZrYWpzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWthZmthanMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0thZmthJztcblxuY29uc3QgaW5zdHJ1bWVudEthZmthID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25LYWZrYWpzLkthZmthSnNJbnN0cnVtZW50YXRpb24oe1xuICAgICAgY29uc3VtZXJIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5rYWZrYWpzLm90ZWwuY29uc3VtZXInKTtcbiAgICAgIH0sXG4gICAgICBwcm9kdWNlckhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmthZmthanMub3RlbC5wcm9kdWNlcicpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9rYWZrYUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRLYWZrYSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogS2Fma2FKcyBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBLYWZrYUpzLlxuICovXG5jb25zdCBrYWZrYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa2Fma2FJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEthZmthID0gaW5zdHJ1bWVudEthZmthO1xuZXhwb3J0cy5rYWZrYUludGVncmF0aW9uID0ga2Fma2FJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWthZmthLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKoa.KoaInstrumentation({\n      requestHook(span, info) {\n        addKoaSpanAttributes(span);\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && utils.logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const attributes = core.spanToJSON(span).data;\n        const route = attributes && attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = _optionalChain([info, 'optionalAccess', _ => _.context, 'optionalAccess', _2 => _2.request, 'optionalAccess', _3 => _3.method, 'optionalAccess', _4 => _4.toUpperCase, 'call', _5 => _5()]) || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    }),\n);\n\nconst _koaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa();\n    },\n  };\n}) ;\n\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error);\n      throw error;\n    }\n  });\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'koa');\n};\n\nfunction addKoaSpanAttributes(span) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.http.otel.koa');\n\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, router\n  const type = attributes['koa.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n  }\n\n  // Also update the name\n  const name = attributes['koa.name'];\n  if (typeof name === 'string') {\n    // Somehow, name is sometimes `''` for middleware spans\n    // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n    span.updateName(name || '< unknown >');\n  }\n}\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva29hLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQywySEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwyQkFBMkIsbUJBQU8sQ0FBQyxtTkFBb0M7QUFDdkUsNEJBQTRCLG1CQUFPLENBQUMsNkxBQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyx3SEFBYztBQUNuQyxjQUFjLG1CQUFPLENBQUMsMkhBQWU7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMsc0lBQXNCO0FBQ2pELG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQywwSkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsUUFBUSxFQUFFLE1BQU07QUFDekU7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDREQUE0RCxLQUFLO0FBQ2pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCLHNCQUFzQjtBQUN0Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tvYS5qcz8wZGU4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Lb2EgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hJyk7XG5jb25zdCBzZW1hbnRpY0NvbnZlbnRpb25zID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBlbnN1cmVJc1dyYXBwZWQgPSByZXF1aXJlKCcuLi8uLi91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLb2EnO1xuXG5jb25zdCBpbnN0cnVtZW50S29hID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25Lb2EuS29hSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVlc3RIb29rKHNwYW4sIGluZm8pIHtcbiAgICAgICAgYWRkS29hU3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG5cbiAgICAgICAgaWYgKGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSA9PT0gY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSkge1xuICAgICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgdXRpbHMubG9nZ2VyLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcbiAgICAgICAgY29uc3Qgcm91dGUgPSBhdHRyaWJ1dGVzICYmIGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUk9VVEVdO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IF9vcHRpb25hbENoYWluKFtpbmZvLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uY29udGV4dCwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIucmVxdWVzdCwgJ29wdGlvbmFsQWNjZXNzJywgXzMgPT4gXzMubWV0aG9kLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC50b1VwcGVyQ2FzZSwgJ2NhbGwnLCBfNSA9PiBfNSgpXSkgfHwgJ0dFVCc7XG4gICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3JvdXRlfWApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2tvYUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRLb2EoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG5jb25zdCBrb2FJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2tvYUludGVncmF0aW9uKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNvbnN0IHNldHVwS29hRXJyb3JIYW5kbGVyID0gKGFwcCkgPT4ge1xuICBhcHAudXNlKGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgbmV4dCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9KTtcblxuICBlbnN1cmVJc1dyYXBwZWQuZW5zdXJlSXNXcmFwcGVkKGFwcC51c2UsICdrb2EnKTtcbn07XG5cbmZ1bmN0aW9uIGFkZEtvYVNwYW5BdHRyaWJ1dGVzKHNwYW4pIHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uaHR0cC5vdGVsLmtvYScpO1xuXG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YSB8fCB7fTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogbWlkZGxld2FyZSwgcm91dGVyXG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydrb2EudHlwZSddO1xuXG4gIGlmICh0eXBlKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCBgJHt0eXBlfS5rb2FgKTtcbiAgfVxuXG4gIC8vIEFsc28gdXBkYXRlIHRoZSBuYW1lXG4gIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGVzWydrb2EubmFtZSddO1xuICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gU29tZWhvdywgbmFtZSBpcyBzb21ldGltZXMgYCcnYCBmb3IgbWlkZGxld2FyZSBzcGFuc1xuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9pc3N1ZXMvMjIyMFxuICAgIHNwYW4udXBkYXRlTmFtZShuYW1lIHx8ICc8IHVua25vd24gPicpO1xuICB9XG59XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEtvYSA9IGluc3RydW1lbnRLb2E7XG5leHBvcnRzLmtvYUludGVncmF0aW9uID0ga29hSW50ZWdyYXRpb247XG5leHBvcnRzLnNldHVwS29hRXJyb3JIYW5kbGVyID0gc2V0dXBLb2FFcnJvckhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rb2EuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * LruMemoizer integration\n *\n * Propagate traces through LruMemoizer.\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxtQ0FBbUMsbUJBQU8sQ0FBQyw4T0FBNkM7QUFDeEYsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjs7QUFFckQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2xydW1lbW9pemVyLmpzP2E1MTciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTHJ1TWVtb2l6ZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbHJ1LW1lbW9pemVyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTHJ1TWVtb2l6ZXInO1xuXG5jb25zdCBpbnN0cnVtZW50THJ1TWVtb2l6ZXIgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkxydU1lbW9pemVyLkxydU1lbW9pemVySW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50THJ1TWVtb2l6ZXIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIExydU1lbW9pemVyIGludGVncmF0aW9uXG4gKlxuICogUHJvcGFnYXRlIHRyYWNlcyB0aHJvdWdoIExydU1lbW9pemVyLlxuICovXG5jb25zdCBscnVNZW1vaXplckludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudExydU1lbW9pemVyID0gaW5zdHJ1bWVudExydU1lbW9pemVyO1xuZXhwb3J0cy5scnVNZW1vaXplckludGVncmF0aW9uID0gbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxydW1lbW9pemVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.47.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * MongoDB integration\n *\n * Capture tracing data for MongoDB.\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQywrTkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQywwSkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvLmpzPzQwYWUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTW9uZ29kYiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb25nbyc7XG5cbmNvbnN0IGluc3RydW1lbnRNb25nbyA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uTW9uZ29kYi5Nb25nb0RCSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nbycpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9tb25nb0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nbygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogTW9uZ29EQiBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBNb25nb0RCLlxuICovXG5jb25zdCBtb25nb0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbW9uZ29JbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE1vbmdvID0gaW5zdHJ1bWVudE1vbmdvO1xuZXhwb3J0cy5tb25nb0ludGVncmF0aW9uID0gbW9uZ29JbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Mongoose integration\n *\n * Capture tracing data for Mongoose.\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxnQ0FBZ0MsbUJBQU8sQ0FBQyxrT0FBeUM7QUFDakYsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQywwSkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvb3NlLmpzPzljOWMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTW9uZ29vc2UgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29vc2UnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vbmdvb3NlJztcblxuY29uc3QgaW5zdHJ1bWVudE1vbmdvb3NlID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25Nb25nb29zZS5Nb25nb29zZUluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubW9uZ29vc2UnKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfbW9uZ29vc2VJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TW9uZ29vc2UoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIE1vbmdvb3NlIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIE1vbmdvb3NlLlxuICovXG5jb25zdCBtb25nb29zZUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbW9uZ29vc2VJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE1vbmdvb3NlID0gaW5zdHJ1bWVudE1vbmdvb3NlO1xuZXhwb3J0cy5tb25nb29zZUludGVncmF0aW9uID0gbW9uZ29vc2VJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvb3NlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * MySQL integration\n *\n * Capture tracing data for mysql.\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCw2QkFBNkIsbUJBQU8sQ0FBQyx5TkFBc0M7QUFDM0UsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjs7QUFFckQ7O0FBRUEsa0lBQWtJOztBQUVsSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanM/Y2I3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25NeXNxbCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ015c3FsJztcblxuY29uc3QgaW5zdHJ1bWVudE15c3FsID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25NeXNxbC5NeVNRTEluc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfbXlzcWxJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TXlzcWwoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIE15U1FMIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIG15c3FsLlxuICovXG5jb25zdCBteXNxbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbXlzcWxJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE15c3FsID0gaW5zdHJ1bWVudE15c3FsO1xuZXhwb3J0cy5teXNxbEludGVncmF0aW9uID0gbXlzcWxJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * MySQL2 integration\n *\n * Capture tracing data for mysql2\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsOEJBQThCLG1CQUFPLENBQUMsNE5BQXVDO0FBQzdFLGFBQWEsbUJBQU8sQ0FBQyx3SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyw4SUFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsMEpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9teXNxbDIuanM/ODVkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25NeXNxbDIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNeXNxbDInO1xuXG5jb25zdCBpbnN0cnVtZW50TXlzcWwyID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25NeXNxbDIuTXlTUUwySW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5teXNxbDInKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfbXlzcWwySW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE15c3FsMigpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogTXlTUUwyIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIG15c3FsMlxuICovXG5jb25zdCBteXNxbDJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX215c3FsMkludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TXlzcWwyID0gaW5zdHJ1bWVudE15c3FsMjtcbmV4cG9ydHMubXlzcWwySW50ZWdyYXRpb24gPSBteXNxbDJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsMi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst sentryPatched = 'sentryPatched';\n\n/**\n * Helper checking if a concrete target class is already patched.\n *\n * We already guard duplicate patching with isWrapped. However, isWrapped checks whether a file has been patched, whereas we use this check for concrete target classes.\n * This check might not be necessary, but better to play it safe.\n */\nfunction isPatched(target) {\n  if (target.sentryPatched) {\n    return true;\n  }\n\n  utils.addNonEnumerableProperty(target, sentryPatched, true);\n  return false;\n}\n\n/**\n * Returns span options for nest middleware spans.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction getMiddlewareSpanOptions(target, name = undefined) {\n  const span_name = _nullishCoalesce(name, () => ( target.name)); // fallback to class name if no name is provided\n\n  return {\n    name: span_name,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'middleware.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.middleware.nestjs',\n    },\n  };\n}\n\n/**\n * Adds instrumentation to a js observable and attaches the span to an active parent span.\n */\nfunction instrumentObservable(observable, activeSpan) {\n  if (activeSpan) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    observable.subscribe = new Proxy(observable.subscribe, {\n      apply: (originalSubscribe, thisArgSubscribe, argsSubscribe) => {\n        return core.withActiveSpan(activeSpan, () => {\n          const subscription = originalSubscribe.apply(thisArgSubscribe, argsSubscribe);\n          subscription.add(() => activeSpan.end());\n          return subscription;\n        });\n      },\n    });\n  }\n}\n\n/**\n * Proxies the next() call in a nestjs middleware to end the span when it is called.\n */\nfunction getNextProxy(next, span, prevSpan) {\n  return new Proxy(next, {\n    apply: (originalNext, thisArgNext, argsNext) => {\n      span.end();\n\n      if (prevSpan) {\n        return core.withActiveSpan(prevSpan, () => {\n          return Reflect.apply(originalNext, thisArgNext, argsNext);\n        });\n      } else {\n        return Reflect.apply(originalNext, thisArgNext, argsNext);\n      }\n    },\n  });\n}\n\nexports.getMiddlewareSpanOptions = getMiddlewareSpanOptions;\nexports.getNextProxy = getNextProxy;\nexports.instrumentObservable = instrumentObservable;\nexports.isPatched = isPatched;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQywySEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsd0hBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLDJIQUFlOztBQUVyQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTs7QUFFbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSxnQ0FBZ0M7QUFDaEMsb0JBQW9CO0FBQ3BCLDRCQUE0QjtBQUM1QixpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL25lc3QvaGVscGVycy5qcz9lYjZiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9udWxsaXNoQ29hbGVzY2Vcbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5jb25zdCBzZW50cnlQYXRjaGVkID0gJ3NlbnRyeVBhdGNoZWQnO1xuXG4vKipcbiAqIEhlbHBlciBjaGVja2luZyBpZiBhIGNvbmNyZXRlIHRhcmdldCBjbGFzcyBpcyBhbHJlYWR5IHBhdGNoZWQuXG4gKlxuICogV2UgYWxyZWFkeSBndWFyZCBkdXBsaWNhdGUgcGF0Y2hpbmcgd2l0aCBpc1dyYXBwZWQuIEhvd2V2ZXIsIGlzV3JhcHBlZCBjaGVja3Mgd2hldGhlciBhIGZpbGUgaGFzIGJlZW4gcGF0Y2hlZCwgd2hlcmVhcyB3ZSB1c2UgdGhpcyBjaGVjayBmb3IgY29uY3JldGUgdGFyZ2V0IGNsYXNzZXMuXG4gKiBUaGlzIGNoZWNrIG1pZ2h0IG5vdCBiZSBuZWNlc3NhcnksIGJ1dCBiZXR0ZXIgdG8gcGxheSBpdCBzYWZlLlxuICovXG5mdW5jdGlvbiBpc1BhdGNoZWQodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQuc2VudHJ5UGF0Y2hlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdXRpbHMuYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwgc2VudHJ5UGF0Y2hlZCwgdHJ1ZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHNwYW4gb3B0aW9ucyBmb3IgbmVzdCBtaWRkbGV3YXJlIHNwYW5zLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlXG5mdW5jdGlvbiBnZXRNaWRkbGV3YXJlU3Bhbk9wdGlvbnModGFyZ2V0LCBuYW1lID0gdW5kZWZpbmVkKSB7XG4gIGNvbnN0IHNwYW5fbmFtZSA9IF9udWxsaXNoQ29hbGVzY2UobmFtZSwgKCkgPT4gKCB0YXJnZXQubmFtZSkpOyAvLyBmYWxsYmFjayB0byBjbGFzcyBuYW1lIGlmIG5vIG5hbWUgaXMgcHJvdmlkZWRcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IHNwYW5fbmFtZSxcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogJ21pZGRsZXdhcmUubmVzdGpzJyxcbiAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8ubWlkZGxld2FyZS5uZXN0anMnLFxuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogQWRkcyBpbnN0cnVtZW50YXRpb24gdG8gYSBqcyBvYnNlcnZhYmxlIGFuZCBhdHRhY2hlcyB0aGUgc3BhbiB0byBhbiBhY3RpdmUgcGFyZW50IHNwYW4uXG4gKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRPYnNlcnZhYmxlKG9ic2VydmFibGUsIGFjdGl2ZVNwYW4pIHtcbiAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgb2JzZXJ2YWJsZS5zdWJzY3JpYmUgPSBuZXcgUHJveHkob2JzZXJ2YWJsZS5zdWJzY3JpYmUsIHtcbiAgICAgIGFwcGx5OiAob3JpZ2luYWxTdWJzY3JpYmUsIHRoaXNBcmdTdWJzY3JpYmUsIGFyZ3NTdWJzY3JpYmUpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aEFjdGl2ZVNwYW4oYWN0aXZlU3BhbiwgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG9yaWdpbmFsU3Vic2NyaWJlLmFwcGx5KHRoaXNBcmdTdWJzY3JpYmUsIGFyZ3NTdWJzY3JpYmUpO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQoKCkgPT4gYWN0aXZlU3Bhbi5lbmQoKSk7XG4gICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogUHJveGllcyB0aGUgbmV4dCgpIGNhbGwgaW4gYSBuZXN0anMgbWlkZGxld2FyZSB0byBlbmQgdGhlIHNwYW4gd2hlbiBpdCBpcyBjYWxsZWQuXG4gKi9cbmZ1bmN0aW9uIGdldE5leHRQcm94eShuZXh0LCBzcGFuLCBwcmV2U3Bhbikge1xuICByZXR1cm4gbmV3IFByb3h5KG5leHQsIHtcbiAgICBhcHBseTogKG9yaWdpbmFsTmV4dCwgdGhpc0FyZ05leHQsIGFyZ3NOZXh0KSA9PiB7XG4gICAgICBzcGFuLmVuZCgpO1xuXG4gICAgICBpZiAocHJldlNwYW4pIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aEFjdGl2ZVNwYW4ocHJldlNwYW4sICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseShvcmlnaW5hbE5leHQsIHRoaXNBcmdOZXh0LCBhcmdzTmV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkob3JpZ2luYWxOZXh0LCB0aGlzQXJnTmV4dCwgYXJnc05leHQpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmdldE1pZGRsZXdhcmVTcGFuT3B0aW9ucyA9IGdldE1pZGRsZXdhcmVTcGFuT3B0aW9ucztcbmV4cG9ydHMuZ2V0TmV4dFByb3h5ID0gZ2V0TmV4dFByb3h5O1xuZXhwb3J0cy5pbnN0cnVtZW50T2JzZXJ2YWJsZSA9IGluc3RydW1lbnRPYnNlcnZhYmxlO1xuZXhwb3J0cy5pc1BhdGNoZWQgPSBpc1BhdGNoZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationNestjsCore = __webpack_require__(/*! @opentelemetry/instrumentation-nestjs-core */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-nestjs-core@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-nestjs-core/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst sentryNestInstrumentation = __webpack_require__(/*! ./sentry-nest-instrumentation.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Nest';\n\nconst instrumentNestCore = instrument.generateInstrumentOnce('Nest-Core', () => {\n  return new instrumentationNestjsCore.NestInstrumentation();\n});\n\nconst instrumentNestCommon = instrument.generateInstrumentOnce('Nest-Common', () => {\n  return new sentryNestInstrumentation.SentryNestInstrumentation();\n});\n\nconst instrumentNest = Object.assign(\n  () => {\n    instrumentNestCore();\n    instrumentNestCommon();\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _nestIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentNest();\n    },\n  };\n}) ;\n\n/**\n * Nest framework integration\n *\n * Capture tracing data for nest.\n */\nconst nestIntegration = core.defineIntegration(_nestIntegration);\n\n/**\n * Setup an error handler for Nest.\n */\nfunction setupNestErrorHandler(app, baseFilter) {\n  // Sadly, NestInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using Nest.js\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addNestSpanAttributes(span);\n    });\n  }\n\n  app.useGlobalInterceptors({\n    intercept(context, next) {\n      if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n        utils.logger.warn('Isolation scope is still the default isolation scope, skipping setting transactionName.');\n        return next.handle();\n      }\n\n      if (context.getType() === 'http') {\n        const req = context.switchToHttp().getRequest();\n        if (req.route) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([req, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${req.route.path}`);\n        }\n      }\n\n      return next.handle();\n    },\n  });\n\n  const wrappedFilter = new Proxy(baseFilter, {\n    get(target, prop, receiver) {\n      if (prop === 'catch') {\n        const originalCatch = Reflect.get(target, prop, receiver);\n\n        return (exception, host) => {\n          const exceptionIsObject = typeof exception === 'object' && exception !== null;\n          const exceptionStatusCode = exceptionIsObject && 'status' in exception ? exception.status : null;\n          const exceptionErrorProperty = exceptionIsObject && 'error' in exception ? exception.error : null;\n\n          /*\n          Don't report expected NestJS control flow errors\n          - `HttpException` errors will have a `status` property\n          - `RpcException` errors will have an `error` property\n           */\n          if (exceptionStatusCode !== null || exceptionErrorProperty !== null) {\n            return originalCatch.apply(target, [exception, host]);\n          }\n\n          core.captureException(exception);\n          return originalCatch.apply(target, [exception, host]);\n        };\n      }\n      return Reflect.get(target, prop, receiver);\n    },\n  });\n\n  app.useGlobalFilters(wrappedFilter);\n}\n\nfunction addNestSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: app_creation, request_context, handler\n  const type = attributes['nestjs.type'];\n\n  // If this is already set, or we have no nest.js span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.nestjs',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.nestjs`,\n  });\n}\n\nexports.instrumentNest = instrumentNest;\nexports.nestIntegration = nestIntegration;\nexports.setupNestErrorHandler = setupNestErrorHandler;\n//# sourceMappingURL=nest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9uZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQywySEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxrQ0FBa0MsbUJBQU8sQ0FBQywyT0FBNEM7QUFDdEYsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQywySEFBZTtBQUNyQyxtQkFBbUIsbUJBQU8sQ0FBQyxpSkFBNkI7QUFDeEQsa0NBQWtDLG1CQUFPLENBQUMsNExBQWtDOztBQUU1RTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxJQUFJLHNCQUFzQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseURBQXlELHFIQUFxSCxFQUFFLGVBQWU7QUFDL0w7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHO0FBQ0g7O0FBRUEsc0JBQXNCO0FBQ3RCLHVCQUF1QjtBQUN2Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL25lc3QvbmVzdC5qcz9lNWYwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25OZXN0anNDb3JlID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW5lc3Rqcy1jb3JlJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IHNlbnRyeU5lc3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL3NlbnRyeS1uZXN0LWluc3RydW1lbnRhdGlvbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ05lc3QnO1xuXG5jb25zdCBpbnN0cnVtZW50TmVzdENvcmUgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoJ05lc3QtQ29yZScsICgpID0+IHtcbiAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb25OZXN0anNDb3JlLk5lc3RJbnN0cnVtZW50YXRpb24oKTtcbn0pO1xuXG5jb25zdCBpbnN0cnVtZW50TmVzdENvbW1vbiA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSgnTmVzdC1Db21tb24nLCAoKSA9PiB7XG4gIHJldHVybiBuZXcgc2VudHJ5TmVzdEluc3RydW1lbnRhdGlvbi5TZW50cnlOZXN0SW5zdHJ1bWVudGF0aW9uKCk7XG59KTtcblxuY29uc3QgaW5zdHJ1bWVudE5lc3QgPSBPYmplY3QuYXNzaWduKFxuICAoKSA9PiB7XG4gICAgaW5zdHJ1bWVudE5lc3RDb3JlKCk7XG4gICAgaW5zdHJ1bWVudE5lc3RDb21tb24oKTtcbiAgfSxcbiAgeyBpZDogSU5URUdSQVRJT05fTkFNRSB9LFxuKTtcblxuY29uc3QgX25lc3RJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TmVzdCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogTmVzdCBmcmFtZXdvcmsgaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgbmVzdC5cbiAqL1xuY29uc3QgbmVzdEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbmVzdEludGVncmF0aW9uKTtcblxuLyoqXG4gKiBTZXR1cCBhbiBlcnJvciBoYW5kbGVyIGZvciBOZXN0LlxuICovXG5mdW5jdGlvbiBzZXR1cE5lc3RFcnJvckhhbmRsZXIoYXBwLCBiYXNlRmlsdGVyKSB7XG4gIC8vIFNhZGx5LCBOZXN0SW5zdHJ1bWVudGF0aW9uIGhhcyBubyByZXF1ZXN0SG9vaywgc28gd2UgbmVlZCB0byBhZGQgdGhlIGF0dHJpYnV0ZXMgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgTmVzdC5qc1xuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZE5lc3RTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFwcC51c2VHbG9iYWxJbnRlcmNlcHRvcnMoe1xuICAgIGludGVyY2VwdChjb250ZXh0LCBuZXh0KSB7XG4gICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpID09PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgIHV0aWxzLmxvZ2dlci53YXJuKCdJc29sYXRpb24gc2NvcGUgaXMgc3RpbGwgdGhlIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlLCBza2lwcGluZyBzZXR0aW5nIHRyYW5zYWN0aW9uTmFtZS4nKTtcbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250ZXh0LmdldFR5cGUoKSA9PT0gJ2h0dHAnKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IGNvbnRleHQuc3dpdGNoVG9IdHRwKCkuZ2V0UmVxdWVzdCgpO1xuICAgICAgICBpZiAocmVxLnJvdXRlKSB7XG4gICAgICAgICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFRyYW5zYWN0aW9uTmFtZShgJHtfb3B0aW9uYWxDaGFpbihbcmVxLCAnYWNjZXNzJywgXyA9PiBfLm1ldGhvZCwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIudG9VcHBlckNhc2UsICdjYWxsJywgXzMgPT4gXzMoKV0pIHx8ICdHRVQnfSAke3JlcS5yb3V0ZS5wYXRofWApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZSgpO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHdyYXBwZWRGaWx0ZXIgPSBuZXcgUHJveHkoYmFzZUZpbHRlciwge1xuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ2NhdGNoJykge1xuICAgICAgICBjb25zdCBvcmlnaW5hbENhdGNoID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG5cbiAgICAgICAgcmV0dXJuIChleGNlcHRpb24sIGhvc3QpID0+IHtcbiAgICAgICAgICBjb25zdCBleGNlcHRpb25Jc09iamVjdCA9IHR5cGVvZiBleGNlcHRpb24gPT09ICdvYmplY3QnICYmIGV4Y2VwdGlvbiAhPT0gbnVsbDtcbiAgICAgICAgICBjb25zdCBleGNlcHRpb25TdGF0dXNDb2RlID0gZXhjZXB0aW9uSXNPYmplY3QgJiYgJ3N0YXR1cycgaW4gZXhjZXB0aW9uID8gZXhjZXB0aW9uLnN0YXR1cyA6IG51bGw7XG4gICAgICAgICAgY29uc3QgZXhjZXB0aW9uRXJyb3JQcm9wZXJ0eSA9IGV4Y2VwdGlvbklzT2JqZWN0ICYmICdlcnJvcicgaW4gZXhjZXB0aW9uID8gZXhjZXB0aW9uLmVycm9yIDogbnVsbDtcblxuICAgICAgICAgIC8qXG4gICAgICAgICAgRG9uJ3QgcmVwb3J0IGV4cGVjdGVkIE5lc3RKUyBjb250cm9sIGZsb3cgZXJyb3JzXG4gICAgICAgICAgLSBgSHR0cEV4Y2VwdGlvbmAgZXJyb3JzIHdpbGwgaGF2ZSBhIGBzdGF0dXNgIHByb3BlcnR5XG4gICAgICAgICAgLSBgUnBjRXhjZXB0aW9uYCBlcnJvcnMgd2lsbCBoYXZlIGFuIGBlcnJvcmAgcHJvcGVydHlcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBpZiAoZXhjZXB0aW9uU3RhdHVzQ29kZSAhPT0gbnVsbCB8fCBleGNlcHRpb25FcnJvclByb3BlcnR5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxDYXRjaC5hcHBseSh0YXJnZXQsIFtleGNlcHRpb24sIGhvc3RdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXhjZXB0aW9uKTtcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWxDYXRjaC5hcHBseSh0YXJnZXQsIFtleGNlcHRpb24sIGhvc3RdKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICB9LFxuICB9KTtcblxuICBhcHAudXNlR2xvYmFsRmlsdGVycyh3cmFwcGVkRmlsdGVyKTtcbn1cblxuZnVuY3Rpb24gYWRkTmVzdFNwYW5BdHRyaWJ1dGVzKHNwYW4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhIHx8IHt9O1xuXG4gIC8vIHRoaXMgaXMgb25lIG9mOiBhcHBfY3JlYXRpb24sIHJlcXVlc3RfY29udGV4dCwgaGFuZGxlclxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1snbmVzdGpzLnR5cGUnXTtcblxuICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgc2V0LCBvciB3ZSBoYXZlIG5vIG5lc3QuanMgc3Bhbiwgbm8gbmVlZCB0byBwcm9jZXNzIGFnYWluLi4uXG4gIGlmIChhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gfHwgIXR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLm5lc3RqcycsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9Lm5lc3Rqc2AsXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnROZXN0ID0gaW5zdHJ1bWVudE5lc3Q7XG5leHBvcnRzLm5lc3RJbnRlZ3JhdGlvbiA9IG5lc3RJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0dXBOZXN0RXJyb3JIYW5kbGVyID0gc2V0dXBOZXN0RXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmVzdC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Postgres integration\n *\n * Capture tracing data for pg.\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwwQkFBMEIsbUJBQU8sQ0FBQyxnTkFBbUM7QUFDckUsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQywwSkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXMuanM/YjdiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25QZyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUG9zdGdyZXMnO1xuXG5jb25zdCBpbnN0cnVtZW50UG9zdGdyZXMgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvblBnLlBnSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgICAgcmVxdWVzdEhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwucG9zdGdyZXMnKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfcG9zdGdyZXNJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50UG9zdGdyZXMoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIFBvc3RncmVzIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIHBnLlxuICovXG5jb25zdCBwb3N0Z3Jlc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcG9zdGdyZXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFBvc3RncmVzID0gaW5zdHJ1bWVudFBvc3RncmVzO1xuZXhwb3J0cy5wb3N0Z3Jlc0ludGVncmF0aW9uID0gcG9zdGdyZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvc3RncmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst prismaInstrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(instrument)/./node_modules/.pnpm/@prisma+instrumentation@5.19.1/node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nconst instrumentPrisma = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => {\n  const EsmInteropPrismaInstrumentation =\n    // @ts-expect-error We need to do the following for interop reasons\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    _optionalChain([prismaInstrumentation, 'access', _ => _.default, 'optionalAccess', _2 => _2.PrismaInstrumentation]) || prismaInstrumentation.PrismaInstrumentation;\n\n  return new EsmInteropPrismaInstrumentation({});\n});\n\nconst _prismaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _3 => _3.description, 'optionalAccess', _4 => _4.startsWith, 'call', _5 => _5('prisma:')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        if (spanJSON.description === 'prisma:engine:db_query') {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Prisma integration\n *\n * Capture tracing data for prisma.\n * Note: This requieres to set:\n * previewFeatures = [\"tracing\"]\n * For the prisma client.\n * See https://www.prisma.io/docs/concepts/components/prisma-client/opentelemetry-tracing for more details.\n */\nconst prismaIntegration = core.defineIntegration(_prismaIntegration);\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcHJpc21hLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQywySEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCw4QkFBOEIsbUJBQU8sQ0FBQyxvSkFBeUI7QUFDL0QsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhJQUEwQjs7QUFFckQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQ0FBK0M7QUFDL0MsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcHJpc21hLmpzPzJlNTciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHByaXNtYUluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BwcmlzbWEvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUHJpc21hJztcblxuY29uc3QgaW5zdHJ1bWVudFByaXNtYSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiB7XG4gIGNvbnN0IEVzbUludGVyb3BQcmlzbWFJbnN0cnVtZW50YXRpb24gPVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgbmVlZCB0byBkbyB0aGUgZm9sbG93aW5nIGZvciBpbnRlcm9wIHJlYXNvbnNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgX29wdGlvbmFsQ2hhaW4oW3ByaXNtYUluc3RydW1lbnRhdGlvbiwgJ2FjY2VzcycsIF8gPT4gXy5kZWZhdWx0LCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5QcmlzbWFJbnN0cnVtZW50YXRpb25dKSB8fCBwcmlzbWFJbnN0cnVtZW50YXRpb24uUHJpc21hSW5zdHJ1bWVudGF0aW9uO1xuXG4gIHJldHVybiBuZXcgRXNtSW50ZXJvcFByaXNtYUluc3RydW1lbnRhdGlvbih7fSk7XG59KTtcblxuY29uc3QgX3ByaXNtYUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRQcmlzbWEoKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgaWYgKF9vcHRpb25hbENoYWluKFtzcGFuSlNPTiwgJ2FjY2VzcycsIF8zID0+IF8zLmRlc2NyaXB0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC5zdGFydHNXaXRoLCAnY2FsbCcsIF81ID0+IF81KCdwcmlzbWE6JyldKSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwucHJpc21hJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdwcmlzbWE6ZW5naW5lOmRiX3F1ZXJ5Jykge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdkYi5zeXN0ZW0nLCAncHJpc21hJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogUHJpc21hIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIHByaXNtYS5cbiAqIE5vdGU6IFRoaXMgcmVxdWllcmVzIHRvIHNldDpcbiAqIHByZXZpZXdGZWF0dXJlcyA9IFtcInRyYWNpbmdcIl1cbiAqIEZvciB0aGUgcHJpc21hIGNsaWVudC5cbiAqIFNlZSBodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9jb25jZXB0cy9jb21wb25lbnRzL3ByaXNtYS1jbGllbnQvb3BlbnRlbGVtZXRyeS10cmFjaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmNvbnN0IHByaXNtYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcHJpc21hSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRQcmlzbWEgPSBpbnN0cnVtZW50UHJpc21hO1xuZXhwb3J0cy5wcmlzbWFJbnRlZ3JhdGlvbiA9IHByaXNtYUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJpc21hLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis4 = __webpack_require__(/*! @opentelemetry/instrumentation-redis-4 */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_optionalChain([_redisOptions, 'optionalAccess', _ => _.cachePrefixes]) ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = _optionalChain([core.spanToJSON, 'call', _2 => _2(span), 'access', _3 => _3.data, 'optionalAccess', _4 => _4['net.peer.name']]);\n  const networkPeerPort = _optionalChain([core.spanToJSON, 'call', _5 => _5(span), 'access', _6 => _6.data, 'optionalAccess', _7 => _7['net.peer.port']]);\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(utils.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = instrument.generateInstrumentOnce('IORedis', () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedis4 = instrument.generateInstrumentOnce('Redis-4', () => {\n  return new instrumentationRedis4.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedis4();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Redis integration for \"ioredis\"\n *\n * Capture tracing data for redis and ioredis.\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDJIQUFlOztBQUUzQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLCtOQUF3QztBQUMvRSw4QkFBOEIsbUJBQU8sQ0FBQywrTkFBd0M7QUFDOUUsYUFBYSxtQkFBTyxDQUFDLHdIQUFjO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQywySEFBZTtBQUNyQyxtQkFBbUIsbUJBQU8sQ0FBQyw4SUFBMEI7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMsZ0pBQTJCOztBQUV0RDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsa0ZBQWtGO0FBQzNHOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0M7QUFDeEMsR0FBRztBQUNILElBQUksc0JBQXNCO0FBQzFCOztBQUVBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanM/NjAwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uSW9yZWRpcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1pb3JlZGlzJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb25SZWRpczQgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMtNCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCByZWRpc0NhY2hlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcmVkaXNDYWNoZS5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1JlZGlzJztcblxubGV0IF9yZWRpc09wdGlvbnMgPSB7fTtcblxuY29uc3QgY2FjaGVSZXNwb25zZUhvb2sgPSAoc3BhbiwgcmVkaXNDb21tYW5kLCBjbWRBcmdzLCByZXNwb25zZSkgPT4ge1xuICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLnJlZGlzJyk7XG5cbiAgY29uc3Qgc2FmZUtleSA9IHJlZGlzQ2FjaGUuZ2V0Q2FjaGVLZXlTYWZlbHkocmVkaXNDb21tYW5kLCBjbWRBcmdzKTtcbiAgY29uc3QgY2FjaGVPcGVyYXRpb24gPSByZWRpc0NhY2hlLmdldENhY2hlT3BlcmF0aW9uKHJlZGlzQ29tbWFuZCk7XG5cbiAgaWYgKFxuICAgICFzYWZlS2V5IHx8XG4gICAgIWNhY2hlT3BlcmF0aW9uIHx8XG4gICAgIV9vcHRpb25hbENoYWluKFtfcmVkaXNPcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uY2FjaGVQcmVmaXhlc10pIHx8XG4gICAgIXJlZGlzQ2FjaGUuc2hvdWxkQ29uc2lkZXJGb3JDYWNoZShyZWRpc0NvbW1hbmQsIHNhZmVLZXksIF9yZWRpc09wdGlvbnMuY2FjaGVQcmVmaXhlcylcbiAgKSB7XG4gICAgLy8gbm90IHJlbGV2YW50IGZvciBjYWNoZVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIG90ZWwvaW9yZWRpcyBzZWVtcyB0byBiZSB1c2luZyB0aGUgb2xkIHN0YW5kYXJkLCBhcyB0aGVyZSB3YXMgYSBjaGFuZ2UgdG8gdGhvc2UgcGFyYW1zOiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1zcGVjaWZpY2F0aW9uL2lzc3Vlcy8zMTk5XG4gIC8vIFdlIGFyZSB1c2luZyBwYXJhbXMgYmFzZWQgb24gdGhlIGRvY3M6IGh0dHBzOi8vb3BlbnRlbGVtZXRyeS5pby9kb2NzL3NwZWNzL3NlbWNvbnYvYXR0cmlidXRlcy1yZWdpc3RyeS9uZXR3b3JrL1xuICBjb25zdCBuZXR3b3JrUGVlckFkZHJlc3MgPSBfb3B0aW9uYWxDaGFpbihbY29yZS5zcGFuVG9KU09OLCAnY2FsbCcsIF8yID0+IF8yKHNwYW4pLCAnYWNjZXNzJywgXzMgPT4gXzMuZGF0YSwgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzRbJ25ldC5wZWVyLm5hbWUnXV0pO1xuICBjb25zdCBuZXR3b3JrUGVlclBvcnQgPSBfb3B0aW9uYWxDaGFpbihbY29yZS5zcGFuVG9KU09OLCAnY2FsbCcsIF81ID0+IF81KHNwYW4pLCAnYWNjZXNzJywgXzYgPT4gXzYuZGF0YSwgJ29wdGlvbmFsQWNjZXNzJywgXzcgPT4gXzdbJ25ldC5wZWVyLnBvcnQnXV0pO1xuICBpZiAobmV0d29ya1BlZXJQb3J0ICYmIG5ldHdvcmtQZWVyQWRkcmVzcykge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7ICduZXR3b3JrLnBlZXIuYWRkcmVzcyc6IG5ldHdvcmtQZWVyQWRkcmVzcywgJ25ldHdvcmsucGVlci5wb3J0JzogbmV0d29ya1BlZXJQb3J0IH0pO1xuICB9XG5cbiAgY29uc3QgY2FjaGVJdGVtU2l6ZSA9IHJlZGlzQ2FjaGUuY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZShyZXNwb25zZSk7XG5cbiAgaWYgKGNhY2hlSXRlbVNpemUpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUsIGNhY2hlSXRlbVNpemUpO1xuICB9XG5cbiAgaWYgKHJlZGlzQ2FjaGUuaXNJbkNvbW1hbmRzKHJlZGlzQ2FjaGUuR0VUX0NPTU1BTkRTLCByZWRpc0NvbW1hbmQpICYmIGNhY2hlSXRlbVNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVCwgY2FjaGVJdGVtU2l6ZSA+IDApO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogY2FjaGVPcGVyYXRpb24sXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWV06IHNhZmVLZXksXG4gIH0pO1xuXG4gIGNvbnN0IHNwYW5EZXNjcmlwdGlvbiA9IHNhZmVLZXkuam9pbignLCAnKTtcblxuICBzcGFuLnVwZGF0ZU5hbWUodXRpbHMudHJ1bmNhdGUoc3BhbkRlc2NyaXB0aW9uLCAxMDI0KSk7XG59O1xuXG5jb25zdCBpbnN0cnVtZW50SU9SZWRpcyA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSgnSU9SZWRpcycsICgpID0+IHtcbiAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb25Jb3JlZGlzLklPUmVkaXNJbnN0cnVtZW50YXRpb24oe1xuICAgIHJlc3BvbnNlSG9vazogY2FjaGVSZXNwb25zZUhvb2ssXG4gIH0pO1xufSk7XG5cbmNvbnN0IGluc3RydW1lbnRSZWRpczQgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoJ1JlZGlzLTQnLCAoKSA9PiB7XG4gIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uUmVkaXM0LlJlZGlzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICByZXNwb25zZUhvb2s6IGNhY2hlUmVzcG9uc2VIb29rLFxuICB9KTtcbn0pO1xuXG4vKiogVG8gYmUgYWJsZSB0byBwcmVsb2FkIGFsbCBSZWRpcyBPVGVsIGluc3RydW1lbnRhdGlvbnMgd2l0aCBqdXN0IG9uZSBJRCAoXCJSZWRpc1wiKSwgYWxsIHRoZSBpbnN0cnVtZW50YXRpb25zIGFyZSBnZW5lcmF0ZWQgaW4gdGhpcyBvbmUgZnVuY3Rpb24gICovXG5jb25zdCBpbnN0cnVtZW50UmVkaXMgPSBPYmplY3QuYXNzaWduKFxuICAoKSA9PiB7XG4gICAgaW5zdHJ1bWVudElPUmVkaXMoKTtcbiAgICBpbnN0cnVtZW50UmVkaXM0KCk7XG5cbiAgICAvLyB0b2RvOiBpbXBsZW1lbnQgdGhlbSBncmFkdWFsbHlcbiAgICAvLyBuZXcgTGVnYWN5UmVkaXNJbnN0cnVtZW50YXRpb24oe30pLFxuICB9LFxuICB7IGlkOiBJTlRFR1JBVElPTl9OQU1FIH0sXG4pO1xuXG5jb25zdCBfcmVkaXNJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBfcmVkaXNPcHRpb25zID0gb3B0aW9ucztcbiAgICAgIGluc3RydW1lbnRSZWRpcygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogUmVkaXMgaW50ZWdyYXRpb24gZm9yIFwiaW9yZWRpc1wiXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIHJlZGlzIGFuZCBpb3JlZGlzLlxuICovXG5jb25zdCByZWRpc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcmVkaXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFJlZGlzID0gaW5zdHJ1bWVudFJlZGlzO1xuZXhwb3J0cy5yZWRpc0ludGVncmF0aW9uID0gcmVkaXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst NODE_VERSION = utils.parseSemver(process.versions.node) ;\nconst NODE_MAJOR = NODE_VERSION.major;\n\nexports.NODE_MAJOR = NODE_MAJOR;\nexports.NODE_VERSION = NODE_VERSION;\n//# sourceMappingURL=nodeVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvbm9kZVZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxjQUFjLG1CQUFPLENBQUMsMkhBQWU7O0FBRXJDO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvbm9kZVZlcnNpb24uanM/MzljZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuY29uc3QgTk9ERV9WRVJTSU9OID0gdXRpbHMucGFyc2VTZW12ZXIocHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSA7XG5jb25zdCBOT0RFX01BSk9SID0gTk9ERV9WRVJTSU9OLm1ham9yO1xuXG5leHBvcnRzLk5PREVfTUFKT1IgPSBOT0RFX01BSk9SO1xuZXhwb3J0cy5OT0RFX1ZFUlNJT04gPSBOT0RFX1ZFUlNJT047XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlVmVyc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst contextAsyncHooks = __webpack_require__(/*! @opentelemetry/context-async-hooks */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+context-async-hooks@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/build/src/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Hub are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nconst SentryContextManager = opentelemetry.wrapContextManagerClass(contextAsyncHooks.AsyncLocalStorageContextManager);\n\nexports.SentryContextManager = SentryContextManager;\n//# sourceMappingURL=contextManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9jb250ZXh0TWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDBCQUEwQixtQkFBTyxDQUFDLG1OQUFvQztBQUN0RSxzQkFBc0IsbUJBQU8sQ0FBQywrT0FBdUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9vdGVsL2NvbnRleHRNYW5hZ2VyLmpzPzE5ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29udGV4dEFzeW5jSG9va3MgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb250ZXh0LWFzeW5jLWhvb2tzJyk7XG5jb25zdCBvcGVudGVsZW1ldHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9vcGVudGVsZW1ldHJ5Jyk7XG5cbi8qKlxuICogVGhpcyBpcyBhIGN1c3RvbSBDb250ZXh0TWFuYWdlciBmb3IgT3BlblRlbGVtZXRyeSwgd2hpY2ggZXh0ZW5kcyB0aGUgZGVmYXVsdCBBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyLlxuICogSXQgZW5zdXJlcyB0aGF0IHdlIGNyZWF0ZSBhIG5ldyBodWIgcGVyIGNvbnRleHQsIHNvIHRoYXQgdGhlIE9URUwgQ29udGV4dCAmIHRoZSBTZW50cnkgSHViIGFyZSBhbHdheXMgaW4gc3luYy5cbiAqXG4gKiBOb3RlIHRoYXQgd2UgY3VycmVudGx5IG9ubHkgc3VwcG9ydCBBc3luY0hvb2tzIHdpdGggdGhpcyxcbiAqIGJ1dCBzaW5jZSB0aGlzIHNob3VsZCB3b3JrIGZvciBOb2RlIDE0KyBhbnlob3cgdGhhdCBzaG91bGQgYmUgZ29vZCBlbm91Z2guXG4gKi9cbmNvbnN0IFNlbnRyeUNvbnRleHRNYW5hZ2VyID0gb3BlbnRlbGVtZXRyeS53cmFwQ29udGV4dE1hbmFnZXJDbGFzcyhjb250ZXh0QXN5bmNIb29rcy5Bc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyKTtcblxuZXhwb3J0cy5TZW50cnlDb250ZXh0TWFuYWdlciA9IFNlbnRyeUNvbnRleHRNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dE1hbmFnZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/** Exported only for tests. */\nconst INSTRUMENTED = {};\n\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nfunction generateInstrumentOnce(\n  name,\n  creator,\n) {\n  return Object.assign(\n    (options) => {\n      const instrumented = INSTRUMENTED[name];\n      if (instrumented) {\n        // If options are provided, ensure we update them\n        if (options) {\n          instrumented.setConfig(options);\n        }\n        return;\n      }\n\n      const instrumentation = creator(options);\n      INSTRUMENTED[name] = instrumentation;\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n    { id: name },\n  );\n}\n\nexports.INSTRUMENTED = INSTRUMENTED;\nexports.generateInstrumentOnce = generateInstrumentOnce;\n//# sourceMappingURL=instrument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9pbnN0cnVtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsc0JBQXNCLG1CQUFPLENBQUMsK09BQXVCOztBQUVyRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLE1BQU0sVUFBVTtBQUNoQjtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL290ZWwvaW5zdHJ1bWVudC5qcz83ZjRhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcblxuLyoqIEV4cG9ydGVkIG9ubHkgZm9yIHRlc3RzLiAqL1xuY29uc3QgSU5TVFJVTUVOVEVEID0ge307XG5cbi8qKlxuICogSW5zdHJ1bWVudCBhbiBPcGVuVGVsZW1ldHJ5IGluc3RydW1lbnRhdGlvbiBvbmNlLlxuICogVGhpcyB3aWxsIHNraXAgcnVubmluZyBpbnN0cnVtZW50YXRpb24gYWdhaW4gaWYgaXQgd2FzIGFscmVhZHkgaW5zdHJ1bWVudGVkLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBuYW1lLFxuICBjcmVhdG9yLFxuKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgIChvcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50ZWQgPSBJTlNUUlVNRU5URURbbmFtZV07XG4gICAgICBpZiAoaW5zdHJ1bWVudGVkKSB7XG4gICAgICAgIC8vIElmIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCBlbnN1cmUgd2UgdXBkYXRlIHRoZW1cbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBpbnN0cnVtZW50ZWQuc2V0Q29uZmlnKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gY3JlYXRvcihvcHRpb25zKTtcbiAgICAgIElOU1RSVU1FTlRFRFtuYW1lXSA9IGluc3RydW1lbnRhdGlvbjtcblxuICAgICAgb3BlbnRlbGVtZXRyeS5hZGRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcbiAgICB7IGlkOiBuYW1lIH0sXG4gICk7XG59XG5cbmV4cG9ydHMuSU5TVFJVTUVOVEVEID0gSU5TVFJVTUVOVEVEO1xuZXhwb3J0cy5nZW5lcmF0ZUluc3RydW1lbnRPbmNlID0gZ2VuZXJhdGVJbnN0cnVtZW50T25jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/base.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/base.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n* This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n* With the following LICENSE:\n*\n* (The MIT License)\n*\n* Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* 'Software'), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:*\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.*\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\nclass Agent extends http.Agent {\n\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      if (typeof (options ).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort() {\n    return _nullishCoalesce(this[INTERNAL].defaultPort, () => ( (this.protocol === 'https:' ? 443 : 80)));\n  }\n\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol() {\n    return _nullishCoalesce(this[INTERNAL].protocol, () => ( (this.isSecureEndpoint() ? 'https:' : 'http:')));\n  }\n\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n\nexports.Agent = Agent;\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsMkhBQWU7O0FBRTNCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLG1CQUFPLENBQUMsOEJBQVk7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Byb3h5L2Jhc2UuanM/MGI5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfbnVsbGlzaENvYWxlc2NlXG59ID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBodHRwID0gcmVxdWlyZSgnbm9kZTpodHRwJyk7XG5yZXF1aXJlKCdub2RlOmh0dHBzJyk7XG5cbi8qKlxuKiBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgZm9ya2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL1Rvb1RhbGxOYXRlL3Byb3h5LWFnZW50cy90cmVlL2IxMzMyOTVmZDE2ZjY0NzU1NzhiNmIxNWJkOWI0ZTMzZWNiMGQwYjdcbiogV2l0aCB0aGUgZm9sbG93aW5nIExJQ0VOU0U6XG4qXG4qIChUaGUgTUlUIExpY2Vuc2UpXG4qXG4qIENvcHlyaWdodCAoYykgMjAxMyBOYXRoYW4gUmFqbGljaCA8bmF0aGFuQHRvb3RhbGxuYXRlLm5ldD4qXG4qXG4qIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuKiBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiogJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4qIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOipcbipcbiogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuKlxuKlxuKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4qIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbiogSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbiogQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbiogVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcbiogU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4qL1xuXG5jb25zdCBJTlRFUk5BTCA9IFN5bWJvbCgnQWdlbnRCYXNlSW50ZXJuYWxTdGF0ZScpO1xuXG5jbGFzcyBBZ2VudCBleHRlbmRzIGh0dHAuQWdlbnQge1xuXG4gIC8vIFNldCBieSBgaHR0cC5BZ2VudGAgLSBtaXNzaW5nIGZyb20gYEB0eXBlcy9ub2RlYFxuXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzW0lOVEVSTkFMXSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYW4gYGh0dHBgIG9yIGBodHRwc2AgcmVxdWVzdC5cbiAgICovXG4gIGlzU2VjdXJlRW5kcG9pbnQob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAvLyBGaXJzdCBjaGVjayB0aGUgYHNlY3VyZUVuZHBvaW50YCBwcm9wZXJ0eSBleHBsaWNpdGx5LCBzaW5jZSB0aGlzXG4gICAgICAvLyBtZWFucyB0aGF0IGEgcGFyZW50IGBBZ2VudGAgaXMgXCJwYXNzaW5nIHRocm91Z2hcIiB0byB0aGlzIGluc3RhbmNlLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgaWYgKHR5cGVvZiAob3B0aW9ucyApLnNlY3VyZUVuZHBvaW50ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2VjdXJlRW5kcG9pbnQ7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGV4cGxpY2l0IGBzZWN1cmVgIGVuZHBvaW50LCBjaGVjayBpZiBgcHJvdG9jb2xgIHByb3BlcnR5IGlzXG4gICAgICAvLyBzZXQuIFRoaXMgd2lsbCB1c3VhbGx5IGJlIHRoZSBjYXNlIHNpbmNlIHVzaW5nIGEgZnVsbCBzdHJpbmcgVVJMXG4gICAgICAvLyBvciBgVVJMYCBpbnN0YW5jZSBzaG91bGQgYmUgdGhlIG1vc3QgY29tbW9uIHVzYWdlLlxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnByb3RvY29sID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmluYWxseSwgaWYgbm8gYHByb3RvY29sYCBwcm9wZXJ0eSB3YXMgc2V0LCB0aGVuIGZhbGwgYmFjayB0b1xuICAgIC8vIGNoZWNraW5nIHRoZSBzdGFjayB0cmFjZSBvZiB0aGUgY3VycmVudCBjYWxsIHN0YWNrLCBhbmQgdHJ5IHRvXG4gICAgLy8gZGV0ZWN0IHRoZSBcImh0dHBzXCIgbW9kdWxlLlxuICAgIGNvbnN0IHsgc3RhY2sgfSA9IG5ldyBFcnJvcigpO1xuICAgIGlmICh0eXBlb2Ygc3RhY2sgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHN0YWNrLnNwbGl0KCdcXG4nKS5zb21lKGwgPT4gbC5pbmRleE9mKCcoaHR0cHMuanM6JykgIT09IC0xIHx8IGwuaW5kZXhPZignbm9kZTpodHRwczonKSAhPT0gLTEpO1xuICB9XG5cbiAgY3JlYXRlU29ja2V0KHJlcSwgb3B0aW9ucywgY2IpIHtcbiAgICBjb25zdCBjb25uZWN0T3B0cyA9IHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBzZWN1cmVFbmRwb2ludDogdGhpcy5pc1NlY3VyZUVuZHBvaW50KG9wdGlvbnMpLFxuICAgIH07XG4gICAgUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IHRoaXMuY29ubmVjdChyZXEsIGNvbm5lY3RPcHRzKSlcbiAgICAgIC50aGVuKHNvY2tldCA9PiB7XG4gICAgICAgIGlmIChzb2NrZXQgaW5zdGFuY2VvZiBodHRwLkFnZW50KSB7XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgYWRkUmVxdWVzdCgpYCBpc24ndCBkZWZpbmVkIGluIGBAdHlwZXMvbm9kZWBcbiAgICAgICAgICByZXR1cm4gc29ja2V0LmFkZFJlcXVlc3QocmVxLCBjb25uZWN0T3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1tJTlRFUk5BTF0uY3VycmVudFNvY2tldCA9IHNvY2tldDtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgY3JlYXRlU29ja2V0KClgIGlzbid0IGRlZmluZWQgaW4gYEB0eXBlcy9ub2RlYFxuICAgICAgICBzdXBlci5jcmVhdGVTb2NrZXQocmVxLCBvcHRpb25zLCBjYik7XG4gICAgICB9LCBjYik7XG4gIH1cblxuICBjcmVhdGVDb25uZWN0aW9uKCkge1xuICAgIGNvbnN0IHNvY2tldCA9IHRoaXNbSU5URVJOQUxdLmN1cnJlbnRTb2NrZXQ7XG4gICAgdGhpc1tJTlRFUk5BTF0uY3VycmVudFNvY2tldCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoIXNvY2tldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzb2NrZXQgd2FzIHJldHVybmVkIGluIHRoZSBgY29ubmVjdCgpYCBmdW5jdGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gc29ja2V0O1xuICB9XG5cbiAgZ2V0IGRlZmF1bHRQb3J0KCkge1xuICAgIHJldHVybiBfbnVsbGlzaENvYWxlc2NlKHRoaXNbSU5URVJOQUxdLmRlZmF1bHRQb3J0LCAoKSA9PiAoICh0aGlzLnByb3RvY29sID09PSAnaHR0cHM6JyA/IDQ0MyA6IDgwKSkpO1xuICB9XG5cbiAgc2V0IGRlZmF1bHRQb3J0KHYpIHtcbiAgICBpZiAodGhpc1tJTlRFUk5BTF0pIHtcbiAgICAgIHRoaXNbSU5URVJOQUxdLmRlZmF1bHRQb3J0ID0gdjtcbiAgICB9XG4gIH1cblxuICBnZXQgcHJvdG9jb2woKSB7XG4gICAgcmV0dXJuIF9udWxsaXNoQ29hbGVzY2UodGhpc1tJTlRFUk5BTF0ucHJvdG9jb2wsICgpID0+ICggKHRoaXMuaXNTZWN1cmVFbmRwb2ludCgpID8gJ2h0dHBzOicgOiAnaHR0cDonKSkpO1xuICB9XG5cbiAgc2V0IHByb3RvY29sKHYpIHtcbiAgICBpZiAodGhpc1tJTlRFUk5BTF0pIHtcbiAgICAgIHRoaXNbSU5URVJOQUxdLnByb3RvY29sID0gdjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5BZ2VudCA9IEFnZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/base.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/index.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/index.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst tls = __webpack_require__(/*! node:tls */ \"node:tls\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst base = __webpack_require__(/*! ./base.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/base.js\");\nconst parseProxyResponse = __webpack_require__(/*! ./parse-proxy-response.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\");\n\nfunction debug(...args) {\n  utils.logger.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends base.Agent {\n  static __initStatic() {this.protocols = ['http', 'https']; }\n\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = _nullishCoalesce(_optionalChain([opts, 'optionalAccess', _2 => _2.headers]), () => ( {}));\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse.parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s) => {\n      debug('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n}HttpsProxyAgent.__initStatic();\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction omit(\n  obj,\n  ...keys\n)\n\n {\n  const ret = {}\n\n;\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\nexports.HttpsProxyAgent = HttpsProxyAgent;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nfunction debug(...args) {\n  utils.logger.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debug('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.slice(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debug('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvcGFyc2UtcHJveHktcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxjQUFjLG1CQUFPLENBQUMsMkhBQWU7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixPQUFPO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvcGFyc2UtcHJveHktcmVzcG9uc2UuanM/YTMzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuICB1dGlscy5sb2dnZXIubG9nKCdbaHR0cHMtcHJveHktYWdlbnQ6cGFyc2UtcHJveHktcmVzcG9uc2VdJywgLi4uYXJncyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUHJveHlSZXNwb25zZShzb2NrZXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAvLyB3ZSBuZWVkIHRvIGJ1ZmZlciBhbnkgSFRUUCB0cmFmZmljIHRoYXQgaGFwcGVucyB3aXRoIHRoZSBwcm94eSBiZWZvcmUgd2UgZ2V0XG4gICAgLy8gdGhlIENPTk5FQ1QgcmVzcG9uc2UsIHNvIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYW4gXCIyMDBcIlxuICAgIC8vIHJlc3BvbnNlIGNvZGUsIHRoZW4gd2UgY2FuIHJlLXBsYXkgdGhlIFwiZGF0YVwiIGV2ZW50cyBvbiB0aGUgc29ja2V0IG9uY2UgdGhlXG4gICAgLy8gSFRUUCBwYXJzZXIgaXMgaG9va2VkIHVwLi4uXG4gICAgbGV0IGJ1ZmZlcnNMZW5ndGggPSAwO1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICBjb25zdCBiID0gc29ja2V0LnJlYWQoKTtcbiAgICAgIGlmIChiKSBvbmRhdGEoYik7XG4gICAgICBlbHNlIHNvY2tldC5vbmNlKCdyZWFkYWJsZScsIHJlYWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcigncmVhZGFibGUnLCByZWFkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcignUHJveHkgY29ubmVjdGlvbiBlbmRlZCBiZWZvcmUgcmVjZWl2aW5nIENPTk5FQ1QgcmVzcG9uc2UnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lcnJvcihlcnIpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGRlYnVnKCdvbmVycm9yICVvJywgZXJyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZGF0YShiKSB7XG4gICAgICBidWZmZXJzLnB1c2goYik7XG4gICAgICBidWZmZXJzTGVuZ3RoICs9IGIubGVuZ3RoO1xuXG4gICAgICBjb25zdCBidWZmZXJlZCA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgYnVmZmVyc0xlbmd0aCk7XG4gICAgICBjb25zdCBlbmRPZkhlYWRlcnMgPSBidWZmZXJlZC5pbmRleE9mKCdcXHJcXG5cXHJcXG4nKTtcblxuICAgICAgaWYgKGVuZE9mSGVhZGVycyA9PT0gLTEpIHtcbiAgICAgICAgLy8ga2VlcCBidWZmZXJpbmdcbiAgICAgICAgZGVidWcoJ2hhdmUgbm90IHJlY2VpdmVkIGVuZCBvZiBIVFRQIGhlYWRlcnMgeWV0Li4uJyk7XG4gICAgICAgIHJlYWQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBoZWFkZXJQYXJ0cyA9IGJ1ZmZlcmVkLnNsaWNlKDAsIGVuZE9mSGVhZGVycykudG9TdHJpbmcoJ2FzY2lpJykuc3BsaXQoJ1xcclxcbicpO1xuICAgICAgY29uc3QgZmlyc3RMaW5lID0gaGVhZGVyUGFydHMuc2hpZnQoKTtcbiAgICAgIGlmICghZmlyc3RMaW5lKSB7XG4gICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdObyBoZWFkZXIgcmVjZWl2ZWQgZnJvbSBwcm94eSBDT05ORUNUIHJlc3BvbnNlJykpO1xuICAgICAgfVxuICAgICAgY29uc3QgZmlyc3RMaW5lUGFydHMgPSBmaXJzdExpbmUuc3BsaXQoJyAnKTtcbiAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSArKGZpcnN0TGluZVBhcnRzWzFdIHx8IDApO1xuICAgICAgY29uc3Qgc3RhdHVzVGV4dCA9IGZpcnN0TGluZVBhcnRzLnNsaWNlKDIpLmpvaW4oJyAnKTtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIGhlYWRlclBhcnRzKSB7XG4gICAgICAgIGlmICghaGVhZGVyKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgZmlyc3RDb2xvbiA9IGhlYWRlci5pbmRleE9mKCc6Jyk7XG4gICAgICAgIGlmIChmaXJzdENvbG9uID09PSAtMSkge1xuICAgICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYEludmFsaWQgaGVhZGVyIGZyb20gcHJveHkgQ09OTkVDVCByZXNwb25zZTogXCIke2hlYWRlcn1cImApKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXkgPSBoZWFkZXIuc2xpY2UoMCwgZmlyc3RDb2xvbikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBoZWFkZXIuc2xpY2UoZmlyc3RDb2xvbiArIDEpLnRyaW1TdGFydCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gaGVhZGVyc1trZXldO1xuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaGVhZGVyc1trZXldID0gW2N1cnJlbnQsIHZhbHVlXTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgY3VycmVudC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVidWcoJ2dvdCBwcm94eSBzZXJ2ZXIgcmVzcG9uc2U6ICVvICVvJywgZmlyc3RMaW5lLCBoZWFkZXJzKTtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIHJlc29sdmUoe1xuICAgICAgICBjb25uZWN0OiB7XG4gICAgICAgICAgc3RhdHVzQ29kZSxcbiAgICAgICAgICBzdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGJ1ZmZlcmVkLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc29ja2V0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHNvY2tldC5vbignZW5kJywgb25lbmQpO1xuXG4gICAgcmVhZCgpO1xuICB9KTtcbn1cblxuZXhwb3J0cy5wYXJzZVByb3h5UmVzcG9uc2UgPSBwYXJzZVByb3h5UmVzcG9uc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS1wcm94eS1yZXNwb25zZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst module$1 = __webpack_require__(/*! ../utils/module.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (utils.GLOBAL_OBJ.SENTRY_RELEASE && utils.GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return utils.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = utils.createStackParser(utils.nodeStackLineParser(module$1.createGetModuleFromFilename()));\n\nexports.defaultStackParser = defaultStackParser;\nexports.getSentryRelease = getSentryRelease;\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst worker_threads = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nclass NodeClient extends core.ServerRuntimeClient {\n\n   constructor(options) {\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname(),\n    };\n\n    core.applySdkMetadata(clientOptions, 'node');\n\n    utils.logger.log(\n      `Initializing Sentry: process: ${process.pid}, thread: ${worker_threads.isMainThread ? 'main' : `worker-${worker_threads.threadId}`}.`,\n    );\n\n    super(clientOptions);\n  }\n\n  /** Get the OTEL tracer. */\n   get tracer() {\n    if (this._tracer) {\n      return this._tracer;\n    }\n\n    const name = '@sentry/node';\n    const version = core.SDK_VERSION;\n    const tracer = api.trace.getTracer(name, version);\n    this._tracer = tracer;\n\n    return tracer;\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   async flush(timeout) {\n    const provider = this.traceProvider;\n    const spanProcessor = _optionalChain([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   close(timeout) {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n\n    return super.close(timeout);\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n   startClientReportTracking() {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n\n      this._clientReportInterval = setInterval(\n        () => {\n          debugBuild.DEBUG_BUILD && utils.logger.log('Flushing client reports based on interval.');\n          this._flushOutcomes();\n        },\n        _nullishCoalesce(clientOptions.clientReportFlushInterval, () => ( DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS)),\n      )\n        // Unref is critical for not preventing the process from exiting because the interval is active.\n        .unref();\n\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n}\n\nexports.NodeClient = NodeClient;\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQywySEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxXQUFXLG1CQUFPLENBQUMsd0JBQVM7QUFDNUIsWUFBWSxtQkFBTyxDQUFDLHlJQUFvQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMsd0hBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLDJIQUFlO0FBQ3JDLHVCQUF1QixtQkFBTyxDQUFDLHNDQUFnQjtBQUMvQyxtQkFBbUIsbUJBQU8sQ0FBQyxtSUFBbUI7O0FBRTlDLHVEQUF1RDs7QUFFdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrQ0FBK0M7QUFDaEU7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHVDQUF1QyxZQUFZLFlBQVksaURBQWlELHdCQUF3QixFQUFFO0FBQzFJOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9zZGsvY2xpZW50LmpzPzMwODUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX251bGxpc2hDb2FsZXNjZSxcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG9zID0gcmVxdWlyZSgnbm9kZTpvcycpO1xuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcbmNvbnN0IHdvcmtlcl90aHJlYWRzID0gcmVxdWlyZSgnd29ya2VyX3RocmVhZHMnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBERUZBVUxUX0NMSUVOVF9SRVBPUlRfRkxVU0hfSU5URVJWQUxfTVMgPSA2MDAwMDsgLy8gNjBzIHdhcyBjaG9zZW4gYXJiaXRyYXJpbHlcblxuLyoqIEEgY2xpZW50IGZvciB1c2luZyBTZW50cnkgd2l0aCBOb2RlICYgT3BlblRlbGVtZXRyeS4gKi9cbmNsYXNzIE5vZGVDbGllbnQgZXh0ZW5kcyBjb3JlLlNlcnZlclJ1bnRpbWVDbGllbnQge1xuXG4gICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgY29uc3QgY2xpZW50T3B0aW9ucyA9IHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBwbGF0Zm9ybTogJ25vZGUnLFxuICAgICAgcnVudGltZTogeyBuYW1lOiAnbm9kZScsIHZlcnNpb246IGdsb2JhbC5wcm9jZXNzLnZlcnNpb24gfSxcbiAgICAgIHNlcnZlck5hbWU6IG9wdGlvbnMuc2VydmVyTmFtZSB8fCBnbG9iYWwucHJvY2Vzcy5lbnYuU0VOVFJZX05BTUUgfHwgb3MuaG9zdG5hbWUoKSxcbiAgICB9O1xuXG4gICAgY29yZS5hcHBseVNka01ldGFkYXRhKGNsaWVudE9wdGlvbnMsICdub2RlJyk7XG5cbiAgICB1dGlscy5sb2dnZXIubG9nKFxuICAgICAgYEluaXRpYWxpemluZyBTZW50cnk6IHByb2Nlc3M6ICR7cHJvY2Vzcy5waWR9LCB0aHJlYWQ6ICR7d29ya2VyX3RocmVhZHMuaXNNYWluVGhyZWFkID8gJ21haW4nIDogYHdvcmtlci0ke3dvcmtlcl90aHJlYWRzLnRocmVhZElkfWB9LmAsXG4gICAgKTtcblxuICAgIHN1cGVyKGNsaWVudE9wdGlvbnMpO1xuICB9XG5cbiAgLyoqIEdldCB0aGUgT1RFTCB0cmFjZXIuICovXG4gICBnZXQgdHJhY2VyKCkge1xuICAgIGlmICh0aGlzLl90cmFjZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFjZXI7XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9ICdAc2VudHJ5L25vZGUnO1xuICAgIGNvbnN0IHZlcnNpb24gPSBjb3JlLlNES19WRVJTSU9OO1xuICAgIGNvbnN0IHRyYWNlciA9IGFwaS50cmFjZS5nZXRUcmFjZXIobmFtZSwgdmVyc2lvbik7XG4gICAgdGhpcy5fdHJhY2VyID0gdHJhY2VyO1xuXG4gICAgcmV0dXJuIHRyYWNlcjtcbiAgfVxuXG4gIC8vIEVzbGludCBpZ25vcmUgZXhwbGFuYXRpb246IFRoaXMgaXMgYWxyZWFkeSBkb2N1bWVudGVkIGluIHN1cGVyLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuICAgYXN5bmMgZmx1c2godGltZW91dCkge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy50cmFjZVByb3ZpZGVyO1xuICAgIGNvbnN0IHNwYW5Qcm9jZXNzb3IgPSBfb3B0aW9uYWxDaGFpbihbcHJvdmlkZXIsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5hY3RpdmVTcGFuUHJvY2Vzc29yXSk7XG5cbiAgICBpZiAoc3BhblByb2Nlc3Nvcikge1xuICAgICAgYXdhaXQgc3BhblByb2Nlc3Nvci5mb3JjZUZsdXNoKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZ2V0T3B0aW9ucygpLnNlbmRDbGllbnRSZXBvcnRzKSB7XG4gICAgICB0aGlzLl9mbHVzaE91dGNvbWVzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLmZsdXNoKHRpbWVvdXQpO1xuICB9XG5cbiAgLy8gRXNsaW50IGlnbm9yZSBleHBsYW5hdGlvbjogVGhpcyBpcyBhbHJlYWR5IGRvY3VtZW50ZWQgaW4gc3VwZXIuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG4gICBjbG9zZSh0aW1lb3V0KSB7XG4gICAgaWYgKHRoaXMuX2NsaWVudFJlcG9ydEludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2NsaWVudFJlcG9ydEludGVydmFsKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lcikge1xuICAgICAgcHJvY2Vzcy5vZmYoJ2JlZm9yZUV4aXQnLCB0aGlzLl9jbGllbnRSZXBvcnRPbkV4aXRGbHVzaExpc3RlbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuY2xvc2UodGltZW91dCk7XG4gIH1cblxuICAvKipcbiAgICogV2lsbCBzdGFydCB0cmFja2luZyBjbGllbnQgcmVwb3J0cyBmb3IgdGhpcyBjbGllbnQuXG4gICAqXG4gICAqIE5PVElDRTogVGhpcyBtZXRob2Qgd2lsbCBjcmVhdGUgYW4gaW50ZXJ2YWwgdGhhdCBpcyBwZXJpb2RpY2FsbHkgY2FsbGVkIGFuZCBhdHRhY2ggYSBgcHJvY2Vzcy5vbignYmVmb3JlRXhpdCcpYFxuICAgKiBob29rLiBUbyBjbGVhbiB1cCB0aGVzZSByZXNvdXJjZXMsIGNhbGwgYC5jbG9zZSgpYCB3aGVuIHlvdSBubyBsb25nZXIgaW50ZW5kIHRvIHVzZSB0aGUgY2xpZW50LiBOb3QgZG9pbmcgc28gd2lsbFxuICAgKiByZXN1bHQgaW4gYSBtZW1vcnkgbGVhay5cbiAgICovXG4gIC8vIFRoZSByZWFzb24gY2xpZW50IHJlcG9ydHMgbmVlZCB0byBiZSBtYW51YWxseSBhY3RpdmF0ZWQgd2l0aCB0aGlzIG1ldGhvZCBpbnN0ZWFkIG9mIGp1c3QgZW5hYmxpbmcgdGhlbSBpbiBhXG4gIC8vIGNvbnN0cnVjdG9yLCBpcyB0aGF0IGlmIHVzZXJzIHBlcmlvZGljYWxseSBhbmQgdW5ib3VuZGVkbHkgY3JlYXRlIG5ldyBjbGllbnRzLCB3ZSB3aWxsIGNyZWF0ZSBtb3JlIGFuZCBtb3JlXG4gIC8vIGludGVydmFscyBhbmQgYmVmb3JlRXhpdCBsaXN0ZW5lcnMsIHRodXMgbGVha2luZyBtZW1vcnkuIEluIHRoZXNlIHNpdHVhdGlvbnMsIHVzZXJzIGFyZSByZXF1aXJlZCB0byBjYWxsXG4gIC8vIGBjbGllbnQuY2xvc2UoKWAgaW4gb3JkZXIgdG8gZGlzcG9zZSBvZiB0aGUgYWNxdWlyZWQgcmVzb3VyY2VzLlxuICAvLyBXZSBhc3N1bWUgdGhhdCBjYWxsaW5nIHRoaXMgbWV0aG9kIGluIFNlbnRyeS5pbml0KCkgaXMgYSBzZW5zaWJsZSBkZWZhdWx0LCBiZWNhdXNlIGNhbGxpbmcgU2VudHJ5LmluaXQoKSBvdmVyIGFuZFxuICAvLyBvdmVyIGFnYWluIHdvdWxkIGFsc28gcmVzdWx0IGluIG1lbW9yeSBsZWFrcy5cbiAgLy8gTm90ZTogV2UgaGF2ZSBleHBlcmltZW50ZWQgd2l0aCB1c2luZyBgRmluYWxpemF0aW9uUmVnaXN0eWAgdG8gY2xlYXIgdGhlIGludGVydmFsIHdoZW4gdGhlIGNsaWVudCBpcyBnYXJiYWdlXG4gIC8vIGNvbGxlY3RlZCwgYnV0IGl0IGRpZCBub3Qgd29yaywgYmVjYXVzZSB0aGUgY2xlYW51cCBmdW5jdGlvbiBuZXZlciBnb3QgY2FsbGVkLlxuICAgc3RhcnRDbGllbnRSZXBvcnRUcmFja2luZygpIHtcbiAgICBjb25zdCBjbGllbnRPcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgaWYgKGNsaWVudE9wdGlvbnMuc2VuZENsaWVudFJlcG9ydHMpIHtcbiAgICAgIHRoaXMuX2NsaWVudFJlcG9ydE9uRXhpdEZsdXNoTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2ZsdXNoT3V0Y29tZXMoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2NsaWVudFJlcG9ydEludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIHV0aWxzLmxvZ2dlci5sb2coJ0ZsdXNoaW5nIGNsaWVudCByZXBvcnRzIGJhc2VkIG9uIGludGVydmFsLicpO1xuICAgICAgICAgIHRoaXMuX2ZsdXNoT3V0Y29tZXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX251bGxpc2hDb2FsZXNjZShjbGllbnRPcHRpb25zLmNsaWVudFJlcG9ydEZsdXNoSW50ZXJ2YWwsICgpID0+ICggREVGQVVMVF9DTElFTlRfUkVQT1JUX0ZMVVNIX0lOVEVSVkFMX01TKSksXG4gICAgICApXG4gICAgICAgIC8vIFVucmVmIGlzIGNyaXRpY2FsIGZvciBub3QgcHJldmVudGluZyB0aGUgcHJvY2VzcyBmcm9tIGV4aXRpbmcgYmVjYXVzZSB0aGUgaW50ZXJ2YWwgaXMgYWN0aXZlLlxuICAgICAgICAudW5yZWYoKTtcblxuICAgICAgcHJvY2Vzcy5vbignYmVmb3JlRXhpdCcsIHRoaXMuX2NsaWVudFJlcG9ydE9uRXhpdEZsdXNoTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLk5vZGVDbGllbnQgPSBOb2RlQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst console$1 = __webpack_require__(/*! ../integrations/console.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ../integrations/context.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ../integrations/contextlines.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst index = __webpack_require__(/*! ../integrations/http/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst index$1 = __webpack_require__(/*! ../integrations/local-variables/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ../integrations/modules.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst nodeFetch = __webpack_require__(/*! ../integrations/node-fetch.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst onuncaughtexception = __webpack_require__(/*! ../integrations/onuncaughtexception.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ../integrations/onunhandledrejection.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst processThread = __webpack_require__(/*! ../integrations/processThread.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js\");\nconst spotlight = __webpack_require__(/*! ../integrations/spotlight.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst index$2 = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst http = __webpack_require__(/*! ../transports/http.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst envToBool = __webpack_require__(/*! ../utils/envToBool.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\n\nfunction getCjsOnlyIntegrations() {\n  return commonjs.isCjs() ? [modules.modulesIntegration()] : [];\n}\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  return [\n    // Common\n    core.inboundFiltersIntegration(),\n    core.functionToStringIntegration(),\n    core.linkedErrorsIntegration(),\n    core.requestDataIntegration(),\n    // Native Wrappers\n    console$1.consoleIntegration(),\n    index.httpIntegration(),\n    nodeFetch.nativeNodeFetchIntegration(),\n    // Global Handlers\n    onuncaughtexception.onUncaughtExceptionIntegration(),\n    onunhandledrejection.onUnhandledRejectionIntegration(),\n    // Event Info\n    contextlines.contextLinesIntegration(),\n    index$1.localVariablesIntegration(),\n    context.nodeContextIntegration(),\n    processThread.processThreadBreadcrumbIntegration(),\n    ...getCjsOnlyIntegrations(),\n  ];\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(shouldAddPerformanceIntegrations(options) ? index$2.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\nfunction shouldAddPerformanceIntegrations(options) {\n  if (!core.hasTracingEnabled(options)) {\n    return false;\n  }\n\n  // We want to ensure `tracesSampleRate` is not just undefined/null here\n  // eslint-disable-next-line deprecation/deprecation\n  return options.enableTracing || options.tracesSampleRate != null || 'tracesSampler' in options;\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(\n  _options = {},\n  getDefaultIntegrationsImpl,\n) {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      utils.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      utils.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n\n  if (!commonjs.isCjs() && options.registerEsmLoaderHooks !== false) {\n    initOtel.maybeInitializeEsmLoader(options.registerEsmLoaderHooks === true ? undefined : options.registerEsmLoaderHooks);\n  }\n\n  opentelemetry.setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.spotlight && !options.integrations.some(({ name }) => name === spotlight.INTEGRATION_NAME)) {\n    options.integrations.push(\n      spotlight.spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined,\n      }),\n    );\n  }\n\n  const client$1 = new client.NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client$1);\n\n  client$1.init();\n\n  utils.logger.log(`Running in ${commonjs.isCjs() ? 'CommonJS' : 'ESM'} mode.`);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n\n  client$1.startClientReportTracking();\n\n  updateScopeFromEnvVariables();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client$1);\n    validateOpenTelemetrySetup();\n  }\n\n  opentelemetry.enhanceDscWithOpenTelemetryRootSpanName(client$1);\n  opentelemetry.setupEventContextTrace(client$1);\n\n  return client$1;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nfunction validateOpenTelemetrySetup() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = opentelemetry.openTelemetrySetupCheck();\n\n  const required = ['SentryContextManager', 'SentryPropagator'];\n\n  if (core.hasTracingEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      utils.logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    utils.logger.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\nfunction getClientOptions(\n  options,\n  getDefaultIntegrationsImpl,\n) {\n  const release = getRelease(options.release);\n\n  const autoSessionTracking =\n    typeof release !== 'string'\n      ? false\n      : options.autoSessionTracking === undefined\n        ? true\n        : options.autoSessionTracking;\n\n  if (options.spotlight == null) {\n    const spotlightEnv = envToBool.envToBool(process.env.SENTRY_SPOTLIGHT, { strict: true });\n    if (spotlightEnv == null) {\n      options.spotlight = process.env.SENTRY_SPOTLIGHT;\n    } else {\n      options.spotlight = spotlightEnv;\n    }\n  }\n\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n\n  const baseOptions = utils.dropUndefinedKeys({\n    transport: http.makeNodeTransport,\n    dsn: process.env.SENTRY_DSN,\n    environment: process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: true,\n  });\n\n  const overwriteOptions = utils.dropUndefinedKeys({\n    release,\n    autoSessionTracking,\n    tracesSampleRate,\n  });\n\n  const mergedOptions = {\n    ...baseOptions,\n    ...options,\n    ...overwriteOptions,\n  };\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrationsImpl(mergedOptions);\n  }\n\n  const clientOptions = {\n    ...mergedOptions,\n    stackParser: utils.stackParserFromStackParserOptions(options.stackParser || api.defaultStackParser),\n    integrations: core.getIntegrationsToSetup({\n      defaultIntegrations: options.defaultIntegrations,\n      integrations: options.integrations,\n    }),\n  };\n\n  return clientOptions;\n}\n\nfunction getRelease(release) {\n  if (release !== undefined) {\n    return release;\n  }\n\n  const detectedRelease = api.getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n\n  return undefined;\n}\n\nfunction getTracesSampleRate(tracesSampleRate) {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  if (envToBool.envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = utils.propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    core.getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n\n/**\n * Enable automatic Session Tracking for the node process.\n */\nfunction startSessionTracking() {\n  const client = core.getClient();\n  if (client && client.getOptions().autoSessionTracking) {\n    client.initSessionFlusher();\n  }\n\n  core.startSession();\n\n  // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n  // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n  // such as calling process.exit() or uncaught exceptions.\n  // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n  process.on('beforeExit', () => {\n    const session = core.getIsolationScope().getSession();\n\n    // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n    // Terminal Status i.e. Exited or Crashed because\n    // \"When a session is moved away from ok it must not be updated anymore.\"\n    // Ref: https://develop.sentry.dev/sdk/sessions/\n    if (session && session.status !== 'ok') {\n      core.endSession();\n    }\n  });\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = validateOpenTelemetrySetup;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+resources@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ \"(instrument)/./node_modules/.pnpm/import-in-the-middle@1.11.2/node_modules/import-in-the-middle/index.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst contextManager = __webpack_require__(/*! ../otel/contextManager.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client) {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client);\n  client.traceProvider = provider;\n}\n\nfunction getRegisterOptions(esmHookConfig) {\n  if (_optionalChain([esmHookConfig, 'optionalAccess', _ => _.onlyIncludeInstrumentedModules])) {\n    const { addHookMessagePort } = importInTheMiddle.createAddHookMessageChannel();\n    // If the user supplied include, we need to use that as a starting point or use an empty array to ensure no modules\n    // are wrapped if they are not hooked\n    return { data: { addHookMessagePort, include: esmHookConfig.include || [] }, transferList: [addHookMessagePort] };\n  }\n\n  return { data: esmHookConfig };\n}\n\n/** Initialize the ESM loader. */\nfunction maybeInitializeEsmLoader(esmHookConfig) {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split('.').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 22 || (nodeMajor === 20 && nodeMinor >= 6) || (nodeMajor === 18 && nodeMinor >= 19)) {\n    // We need to work around using import.meta.url directly because jest complains about it.\n    const importMetaUrl =\n      typeof (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) !== 'undefined' ? (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) : undefined;\n\n    if (!utils.GLOBAL_OBJ._sentryEsmLoaderHookRegistered && importMetaUrl) {\n      try {\n        // @ts-expect-error register is available in these versions\n        moduleModule.default.register('import-in-the-middle/hook.mjs', importMetaUrl, getRegisterOptions(esmHookConfig));\n        utils.GLOBAL_OBJ._sentryEsmLoaderHookRegistered = true;\n      } catch (error) {\n        utils.logger.warn('Failed to register ESM hook', error);\n      }\n    }\n  } else {\n    utils.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] You are using Node.js in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or use version 7.x of the Sentry Node.js SDK.',\n      );\n    });\n  }\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    utils.logger.enable();\n    setupOpenTelemetryLogger();\n  }\n\n  if (!commonjs.isCjs()) {\n    maybeInitializeEsmLoader(options.registerEsmLoaderHooks);\n  }\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      utils.logger.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  return instruments.filter(instrumentation => integrationNames.includes(instrumentation.id));\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: new resources.Resource({\n      [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n      // eslint-disable-next-line deprecation/deprecation\n      [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n  });\n  provider.addSpanProcessor(\n    new opentelemetry.SentrySpanProcessor({\n      timeout: client.getOptions().maxSpanWaitDuration,\n    }),\n  );\n\n  // Initialize the provider\n  provider.register({\n    propagator: new opentelemetry.SentryPropagator(),\n    contextManager: new contextManager.SentryContextManager(),\n  });\n\n  return provider;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger() {\n  const otelLogger = new Proxy(utils.logger , {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(otelLogger, api.DiagLogLevel.DEBUG);\n}\n\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.maybeInitializeEsmLoader = maybeInitializeEsmLoader;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst node_stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst index = __webpack_require__(/*! ../proxy/index.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/index.js\");\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body) {\n  return new node_stream.Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nfunction makeNodeTransport(options) {\n  let urlSegments;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    utils.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return core.createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v9): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new index.HttpsProxyAgent(proxy) )\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, _nullishCoalesce(options.httpModule, () => ( nativeHttpModule)), agent);\n  return core.createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments, proxy) {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy =\n    no_proxy &&\n    no_proxy\n      .split(',')\n      .some(\n        exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n      );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options,\n  httpModule,\n  agent,\n) {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request) {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      core.suppressTracing(() => {\n        let body = streamFromBody(request.body);\n\n        const headers = { ...options.headers };\n\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(node_zlib.createGzip());\n        }\n\n        const req = httpModule.request(\n          {\n            method: 'POST',\n            agent,\n            headers,\n            hostname,\n            path: `${pathname}${search}`,\n            port,\n            protocol,\n            ca: options.caCerts,\n          },\n          res => {\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            res.setEncoding('utf8');\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = _nullishCoalesce(res.headers['retry-after'], () => ( null));\n            const rateLimitsHeader = _nullishCoalesce(res.headers['x-sentry-rate-limits'], () => ( null));\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: {\n                'retry-after': retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              },\n            });\n          },\n        );\n\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\n\nexports.makeNodeTransport = makeNodeTransport;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** Adds an origin to an OTEL Span. */\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\nexports.addOriginToSpan = addOriginToSpan;\n//# sourceMappingURL=addOriginToSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLHdIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcz9iYWIyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqIEFkZHMgYW4gb3JpZ2luIHRvIGFuIE9URUwgU3Bhbi4gKi9cbmZ1bmN0aW9uIGFkZE9yaWdpblRvU3BhbihzcGFuLCBvcmlnaW4pIHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgb3JpZ2luKTtcbn1cblxuZXhwb3J0cy5hZGRPcmlnaW5Ub1NwYW4gPSBhZGRPcmlnaW5Ub1NwYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRPcmlnaW5Ub1NwYW4uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Detect CommonJS. */\nfunction isCjs() {\n  return \"function\" !== 'undefined';\n}\n\nexports.isCjs = isCjs;\n//# sourceMappingURL=commonjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY29tbW9uanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0EsU0FBUyxVQUFjO0FBQ3ZCOztBQUVBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY29tbW9uanMuanM/YTVhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKiogRGV0ZWN0IENvbW1vbkpTLiAqL1xuZnVuY3Rpb24gaXNDanMoKSB7XG4gIHJldHVybiB0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCc7XG59XG5cbmV4cG9ydHMuaXNDanMgPSBpc0Nqcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbmpzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nconst createMissingInstrumentationContext = (pkg) => ({\n  package: pkg,\n  'javascript.is_cjs': commonjs.isCjs(),\n});\n\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext;\n//# sourceMappingURL=createMissingInstrumentationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxpQkFBaUIsbUJBQU8sQ0FBQyxrSUFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCwyQ0FBMkM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2NyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzPzU5NjgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuL2NvbW1vbmpzLmpzJyk7XG5cbmNvbnN0IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0ID0gKHBrZykgPT4gKHtcbiAgcGFja2FnZTogcGtnLFxuICAnamF2YXNjcmlwdC5pc19janMnOiBjb21tb25qcy5pc0NqcygpLFxufSk7XG5cbmV4cG9ydHMuY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+core@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./createMissingInstrumentationContext.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\");\n\n/**\n * Checks and warns if a framework isn't wrapped by opentelemetry.\n */\nfunction ensureIsWrapped(\n  maybeWrappedFunction,\n  name,\n) {\n  const client = core.getClient();\n  if (\n    !_optionalChain([client, 'optionalAccess', _ => _.getOptions, 'call', _2 => _2(), 'access', _3 => _3.disableInstrumentationWarnings]) &&\n    !core$1.isWrapped(maybeWrappedFunction) &&\n    core.isEnabled() &&\n    core.hasTracingEnabled()\n  ) {\n    utils.consoleSandbox(() => {\n      if (commonjs.isCjs()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. This is likely because you required/imported ${name} before calling \\`Sentry.init()\\`.`,\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. Please make sure to initialize Sentry in a separate file that you \\`--import\\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${name}/install/esm/.`,\n        );\n      }\n    });\n\n    core.getGlobalScope().setContext('missing_instrumentation', createMissingInstrumentationContext.createMissingInstrumentationContext(name));\n  }\n}\n\nexports.ensureIsWrapped = ensureIsWrapped;\n//# sourceMappingURL=ensureIsWrapped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQywySEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxlQUFlLG1CQUFPLENBQUMsc0tBQXFCO0FBQzVDLGFBQWEsbUJBQU8sQ0FBQyx3SEFBYztBQUNuQyxjQUFjLG1CQUFPLENBQUMsMkhBQWU7QUFDckMsaUJBQWlCLG1CQUFPLENBQUMsa0lBQWU7QUFDeEMsNENBQTRDLG1CQUFPLENBQUMsd0xBQTBDOztBQUU5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTSxvRUFBb0UsTUFBTTtBQUN0RztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0Esc0JBQXNCLE1BQU0saUxBQWlMLEtBQUs7QUFDbE47QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzP2JiZjAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUkMSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2NvcmUnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuL2NvbW1vbmpzLmpzJyk7XG5jb25zdCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IHJlcXVpcmUoJy4vY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMnKTtcblxuLyoqXG4gKiBDaGVja3MgYW5kIHdhcm5zIGlmIGEgZnJhbWV3b3JrIGlzbid0IHdyYXBwZWQgYnkgb3BlbnRlbGVtZXRyeS5cbiAqL1xuZnVuY3Rpb24gZW5zdXJlSXNXcmFwcGVkKFxuICBtYXliZVdyYXBwZWRGdW5jdGlvbixcbiAgbmFtZSxcbikge1xuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoXG4gICAgIV9vcHRpb25hbENoYWluKFtjbGllbnQsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5nZXRPcHRpb25zLCAnY2FsbCcsIF8yID0+IF8yKCksICdhY2Nlc3MnLCBfMyA9PiBfMy5kaXNhYmxlSW5zdHJ1bWVudGF0aW9uV2FybmluZ3NdKSAmJlxuICAgICFjb3JlJDEuaXNXcmFwcGVkKG1heWJlV3JhcHBlZEZ1bmN0aW9uKSAmJlxuICAgIGNvcmUuaXNFbmFibGVkKCkgJiZcbiAgICBjb3JlLmhhc1RyYWNpbmdFbmFibGVkKClcbiAgKSB7XG4gICAgdXRpbHMuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgaWYgKGNvbW1vbmpzLmlzQ2pzKCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFRoaXMgaXMgbGlrZWx5IGJlY2F1c2UgeW91IHJlcXVpcmVkL2ltcG9ydGVkICR7bmFtZX0gYmVmb3JlIGNhbGxpbmcgXFxgU2VudHJ5LmluaXQoKVxcYC5gLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5pdGlhbGl6ZSBTZW50cnkgaW4gYSBzZXBhcmF0ZSBmaWxlIHRoYXQgeW91IFxcYC0taW1wb3J0XFxgIHdoZW4gcnVubmluZyBub2RlLCBzZWU6IGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzLyR7bmFtZX0vaW5zdGFsbC9lc20vLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb3JlLmdldEdsb2JhbFNjb3BlKCkuc2V0Q29udGV4dCgnbWlzc2luZ19pbnN0cnVtZW50YXRpb24nLCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dChuYW1lKSk7XG4gIH1cbn1cblxuZXhwb3J0cy5lbnN1cmVJc1dyYXBwZWQgPSBlbnN1cmVJc1dyYXBwZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnN1cmVJc1dyYXBwZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nconst TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nfunction envToBool(value, options) {\n  const normalized = String(value).toLowerCase();\n\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n\n  return options && options.strict ? null : Boolean(value);\n}\n\nexports.FALSY_ENV_VALUES = FALSY_ENV_VALUES;\nexports.TRUTHY_ENV_VALUES = TRUTHY_ENV_VALUES;\nexports.envToBool = envToBool;\n//# sourceMappingURL=envToBool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW52VG9Cb29sLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW52VG9Cb29sLmpzPzZiMGEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgRkFMU1lfRU5WX1ZBTFVFUyA9IG5ldyBTZXQoWydmYWxzZScsICdmJywgJ24nLCAnbm8nLCAnb2ZmJywgJzAnXSk7XG5jb25zdCBUUlVUSFlfRU5WX1ZBTFVFUyA9IG5ldyBTZXQoWyd0cnVlJywgJ3QnLCAneScsICd5ZXMnLCAnb24nLCAnMSddKTtcblxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB3aGljaCBjYXN0cyBhbiBFTlYgdmFyaWFibGUgdmFsdWUgdG8gYHRydWVgIG9yIGBmYWxzZWAgdXNpbmcgdGhlIGNvbnN0YW50cyBkZWZpbmVkIGFib3ZlLlxuICogSW4gc3RyaWN0IG1vZGUsIGl0IG1heSByZXR1cm4gYG51bGxgIGlmIHRoZSB2YWx1ZSBkb2Vzbid0IG1hdGNoIGFueSBvZiB0aGUgcHJlZGVmaW5lZCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZW52IHZhcmlhYmxlXG4gKiBAcGFyYW0gb3B0aW9ucyAtLSBPbmx5IGhhcyBgc3RyaWN0YCBrZXkgZm9yIG5vdywgd2hpY2ggcmVxdWlyZXMgYSBzdHJpY3QgbWF0Y2ggZm9yIGB0cnVlYCBpbiBUUlVUSFlfRU5WX1ZBTFVFU1xuICogQHJldHVybnMgdHJ1ZS9mYWxzZSBpZiB0aGUgbG93ZXJjYXNlIHZhbHVlIG1hdGNoZXMgdGhlIHByZWRlZmluZWQgdmFsdWVzIGFib3ZlLiBJZiBub3QsIG51bGwgaW4gc3RyaWN0IG1vZGUsXG4gKiAgICAgICAgICBhbmQgQm9vbGVhbih2YWx1ZSkgaW4gbG9vc2UgbW9kZS5cbiAqL1xuZnVuY3Rpb24gZW52VG9Cb29sKHZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKEZBTFNZX0VOVl9WQUxVRVMuaGFzKG5vcm1hbGl6ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFRSVVRIWV9FTlZfVkFMVUVTLmhhcyhub3JtYWxpemVkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJpY3QgPyBudWxsIDogQm9vbGVhbih2YWx1ZSk7XG59XG5cbmV4cG9ydHMuRkFMU1lfRU5WX1ZBTFVFUyA9IEZBTFNZX0VOVl9WQUxVRVM7XG5leHBvcnRzLlRSVVRIWV9FTlZfVkFMVUVTID0gVFJVVEhZX0VOVl9WQUxVRVM7XG5leHBvcnRzLmVudlRvQm9vbCA9IGVudlRvQm9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudlRvQm9vbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n  utils.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = core.getClient();\n\n  if (client === undefined) {\n    debugBuild.DEBUG_BUILD && utils.logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result) => {\n      if (!result) {\n        debugBuild.DEBUG_BUILD && utils.logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      debugBuild.DEBUG_BUILD && utils.logger.error(error);\n    },\n  );\n}\n\nexports.logAndExitProcess = logAndExitProcess;\n//# sourceMappingURL=errorhandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZXJyb3JoYW5kbGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyx3SEFBYztBQUNuQyxjQUFjLG1CQUFPLENBQUMsMkhBQWU7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMsbUlBQW1COztBQUU5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lcnJvcmhhbmRsaW5nLmpzP2I2ZDkiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcblxuY29uc3QgREVGQVVMVF9TSFVURE9XTl9USU1FT1VUID0gMjAwMDtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGxvZ0FuZEV4aXRQcm9jZXNzKGVycm9yKSB7XG4gIHV0aWxzLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICB9KTtcblxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuXG4gIGlmIChjbGllbnQgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgdXRpbHMubG9nZ2VyLndhcm4oJ05vIE5vZGVDbGllbnQgd2FzIGRlZmluZWQsIHdlIGFyZSBleGl0aW5nIHRoZSBwcm9jZXNzIG5vdy4nKTtcbiAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICBjb25zdCB0aW1lb3V0ID1cbiAgICAob3B0aW9ucyAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCA+IDAgJiYgb3B0aW9ucy5zaHV0ZG93blRpbWVvdXQpIHx8XG4gICAgREVGQVVMVF9TSFVURE9XTl9USU1FT1VUO1xuICBjbGllbnQuY2xvc2UodGltZW91dCkudGhlbihcbiAgICAocmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIHV0aWxzLmxvZ2dlci53YXJuKCdXZSByZWFjaGVkIHRoZSB0aW1lb3V0IGZvciBlbXB0eWluZyB0aGUgcmVxdWVzdCBidWZmZXIsIHN0aWxsIGV4aXRpbmcgbm93IScpO1xuICAgICAgfVxuICAgICAgZ2xvYmFsLnByb2Nlc3MuZXhpdCgxKTtcbiAgICB9LFxuICAgIGVycm9yID0+IHtcbiAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgdXRpbHMubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICB9LFxuICApO1xufVxuXG5leHBvcnRzLmxvZ0FuZEV4aXRQcm9jZXNzID0gbG9nQW5kRXhpdFByb2Nlc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcmhhbmRsaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Build a full URL from request options. */\nfunction getRequestUrl(requestOptions) {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\nexports.getRequestUrl = getRequestUrl;\n//# sourceMappingURL=getRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZ2V0UmVxdWVzdFVybC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0EsWUFBWSxTQUFTLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ2hEOztBQUVBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZ2V0UmVxdWVzdFVybC5qcz8xNTcwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKiBCdWlsZCBhIGZ1bGwgVVJMIGZyb20gcmVxdWVzdCBvcHRpb25zLiAqL1xuZnVuY3Rpb24gZ2V0UmVxdWVzdFVybChyZXF1ZXN0T3B0aW9ucykge1xuICBjb25zdCBwcm90b2NvbCA9IHJlcXVlc3RPcHRpb25zLnByb3RvY29sIHx8ICcnO1xuICBjb25zdCBob3N0bmFtZSA9IHJlcXVlc3RPcHRpb25zLmhvc3RuYW1lIHx8IHJlcXVlc3RPcHRpb25zLmhvc3QgfHwgJyc7XG4gIC8vIERvbid0IGxvZyBzdGFuZGFyZCA6ODAgKGh0dHApIGFuZCA6NDQzIChodHRwcykgcG9ydHMgdG8gcmVkdWNlIHRoZSBub2lzZVxuICAvLyBBbHNvIGRvbid0IGFkZCBwb3J0IGlmIHRoZSBob3N0bmFtZSBhbHJlYWR5IGluY2x1ZGVzIGEgcG9ydFxuICBjb25zdCBwb3J0ID1cbiAgICAhcmVxdWVzdE9wdGlvbnMucG9ydCB8fCByZXF1ZXN0T3B0aW9ucy5wb3J0ID09PSA4MCB8fCByZXF1ZXN0T3B0aW9ucy5wb3J0ID09PSA0NDMgfHwgL14oLiopOihcXGQrKSQvLnRlc3QoaG9zdG5hbWUpXG4gICAgICA/ICcnXG4gICAgICA6IGA6JHtyZXF1ZXN0T3B0aW9ucy5wb3J0fWA7XG4gIGNvbnN0IHBhdGggPSByZXF1ZXN0T3B0aW9ucy5wYXRoID8gcmVxdWVzdE9wdGlvbnMucGF0aCA6ICcvJztcbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtob3N0bmFtZX0ke3BvcnR9JHtwYXRofWA7XG59XG5cbmV4cG9ydHMuZ2V0UmVxdWVzdFVybCA9IGdldFJlcXVlc3RVcmw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRSZXF1ZXN0VXJsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(\n  basePath = process.argv[1] ? utils.dirname(process.argv[1]) : process.cwd(),\n  isWindows = node_path.sep === '\\\\',\n) {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = node_path.posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      let moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n\n      if (moduleName) {\n        moduleName += ':';\n      }\n      moduleName += file;\n\n      return moduleName;\n    }\n\n    return file;\n  };\n}\n\nexports.createGetModuleFromFilename = createGetModuleFromFilename;\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvbW9kdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7QUFDckMsY0FBYyxtQkFBTyxDQUFDLDJIQUFlOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxVQUFVLHVCQUF1Qjs7QUFFakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0Isc0NBQXNDLEdBQUcsS0FBSztBQUM5RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL21vZHVsZS5qcz8wYmUxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG5vZGVfcGF0aCA9IHJlcXVpcmUoJ25vZGU6cGF0aCcpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbi8qKiBub3JtYWxpemVzIFdpbmRvd3MgcGF0aHMgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdpbmRvd3NQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGhcbiAgICAucmVwbGFjZSgvXltBLVpdOi8sICcnKSAvLyByZW1vdmUgV2luZG93cy1zdHlsZSBwcmVmaXhcbiAgICAucmVwbGFjZSgvXFxcXC9nLCAnLycpOyAvLyByZXBsYWNlIGFsbCBgXFxgIGluc3RhbmNlcyB3aXRoIGAvYFxufVxuXG4vKiogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgbW9kdWxlIG5hbWUgZnJvbSBhIGZpbGVuYW1lICovXG5mdW5jdGlvbiBjcmVhdGVHZXRNb2R1bGVGcm9tRmlsZW5hbWUoXG4gIGJhc2VQYXRoID0gcHJvY2Vzcy5hcmd2WzFdID8gdXRpbHMuZGlybmFtZShwcm9jZXNzLmFyZ3ZbMV0pIDogcHJvY2Vzcy5jd2QoKSxcbiAgaXNXaW5kb3dzID0gbm9kZV9wYXRoLnNlcCA9PT0gJ1xcXFwnLFxuKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWRCYXNlID0gaXNXaW5kb3dzID8gbm9ybWFsaXplV2luZG93c1BhdGgoYmFzZVBhdGgpIDogYmFzZVBhdGg7XG5cbiAgcmV0dXJuIChmaWxlbmFtZSkgPT4ge1xuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBub3JtYWxpemVkRmlsZW5hbWUgPSBpc1dpbmRvd3MgPyBub3JtYWxpemVXaW5kb3dzUGF0aChmaWxlbmFtZSkgOiBmaWxlbmFtZTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICBsZXQgeyBkaXIsIGJhc2U6IGZpbGUsIGV4dCB9ID0gbm9kZV9wYXRoLnBvc2l4LnBhcnNlKG5vcm1hbGl6ZWRGaWxlbmFtZSk7XG5cbiAgICBpZiAoZXh0ID09PSAnLmpzJyB8fCBleHQgPT09ICcubWpzJyB8fCBleHQgPT09ICcuY2pzJykge1xuICAgICAgZmlsZSA9IGZpbGUuc2xpY2UoMCwgZXh0Lmxlbmd0aCAqIC0xKTtcbiAgICB9XG5cbiAgICBpZiAoIWRpcikge1xuICAgICAgLy8gTm8gZGlybmFtZSB3aGF0c29ldmVyXG4gICAgICBkaXIgPSAnLic7XG4gICAgfVxuXG4gICAgY29uc3QgbiA9IGRpci5sYXN0SW5kZXhPZignL25vZGVfbW9kdWxlcycpO1xuICAgIGlmIChuID4gLTEpIHtcbiAgICAgIHJldHVybiBgJHtkaXIuc2xpY2UobiArIDE0KS5yZXBsYWNlKC9cXC8vZywgJy4nKX06JHtmaWxlfWA7XG4gICAgfVxuXG4gICAgLy8gTGV0J3Mgc2VlIGlmIGl0J3MgYSBwYXJ0IG9mIHRoZSBtYWluIG1vZHVsZVxuICAgIC8vIFRvIGJlIGEgcGFydCBvZiBtYWluIG1vZHVsZSwgaXQgaGFzIHRvIHNoYXJlIHRoZSBzYW1lIGJhc2VcbiAgICBpZiAoZGlyLnN0YXJ0c1dpdGgobm9ybWFsaXplZEJhc2UpKSB7XG4gICAgICBsZXQgbW9kdWxlTmFtZSA9IGRpci5zbGljZShub3JtYWxpemVkQmFzZS5sZW5ndGggKyAxKS5yZXBsYWNlKC9cXC8vZywgJy4nKTtcblxuICAgICAgaWYgKG1vZHVsZU5hbWUpIHtcbiAgICAgICAgbW9kdWxlTmFtZSArPSAnOic7XG4gICAgICB9XG4gICAgICBtb2R1bGVOYW1lICs9IGZpbGU7XG5cbiAgICAgIHJldHVybiBtb2R1bGVOYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBmaWxlO1xuICB9O1xufVxuXG5leHBvcnRzLmNyZWF0ZUdldE1vZHVsZUZyb21GaWxlbmFtZSA9IGNyZWF0ZUdldE1vZHVsZUZyb21GaWxlbmFtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(instrument)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return utils.flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return utils.flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvcmVkaXNDYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGNBQWMsbUJBQU8sQ0FBQywySEFBZTs7QUFFckM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLDhCQUE4QjtBQUM5Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL3JlZGlzQ2FjaGUuanM/NDAyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuY29uc3QgU0lOR0xFX0FSR19DT01NQU5EUyA9IFsnZ2V0JywgJ3NldCcsICdzZXRleCddO1xuXG5jb25zdCBHRVRfQ09NTUFORFMgPSBbJ2dldCcsICdtZ2V0J107XG5jb25zdCBTRVRfQ09NTUFORFMgPSBbJ3NldCcsICdzZXRleCddO1xuLy8gdG9kbzogZGVsLCBleHBpcmVcblxuLyoqIENoZWNrcyBpZiBhIGdpdmVuIGNvbW1hbmQgaXMgaW4gdGhlIGxpc3Qgb2YgcmVkaXMgY29tbWFuZHMuXG4gKiAgVXNlZnVsIGJlY2F1c2UgY29tbWFuZHMgY2FuIGNvbWUgaW4gbG93ZXJjYXNlIG9yIHVwcGVyY2FzZSAoZGVwZW5kaW5nIG9uIHRoZSBsaWJyYXJ5KS4gKi9cbmZ1bmN0aW9uIGlzSW5Db21tYW5kcyhyZWRpc0NvbW1hbmRzLCBjb21tYW5kKSB7XG4gIHJldHVybiByZWRpc0NvbW1hbmRzLmluY2x1ZGVzKGNvbW1hbmQudG9Mb3dlckNhc2UoKSk7XG59XG5cbi8qKiBEZXRlcm1pbmUgY2FjaGUgb3BlcmF0aW9uIGJhc2VkIG9uIHJlZGlzIHN0YXRlbWVudCAqL1xuZnVuY3Rpb24gZ2V0Q2FjaGVPcGVyYXRpb24oXG4gIGNvbW1hbmQsXG4pIHtcbiAgaWYgKGlzSW5Db21tYW5kcyhHRVRfQ09NTUFORFMsIGNvbW1hbmQpKSB7XG4gICAgcmV0dXJuICdjYWNoZS5nZXQnO1xuICB9IGVsc2UgaWYgKGlzSW5Db21tYW5kcyhTRVRfQ09NTUFORFMsIGNvbW1hbmQpKSB7XG4gICAgcmV0dXJuICdjYWNoZS5wdXQnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24ga2V5SGFzUHJlZml4KGtleSwgcHJlZml4ZXMpIHtcbiAgcmV0dXJuIHByZWZpeGVzLnNvbWUocHJlZml4ID0+IGtleS5zdGFydHNXaXRoKHByZWZpeCkpO1xufVxuXG4vKiogU2FmZWx5IGNvbnZlcnRzIGEgcmVkaXMga2V5IHRvIGEgc3RyaW5nIChjb21tYS1zZXBhcmF0ZWQgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGtleXMpICovXG5mdW5jdGlvbiBnZXRDYWNoZUtleVNhZmVseShyZWRpc0NvbW1hbmQsIGNtZEFyZ3MpIHtcbiAgdHJ5IHtcbiAgICBpZiAoY21kQXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwcm9jZXNzQXJnID0gKGFyZykgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8IEJ1ZmZlci5pc0J1ZmZlcihhcmcpKSB7XG4gICAgICAgIHJldHVybiBbYXJnLnRvU3RyaW5nKCldO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgcmV0dXJuIHV0aWxzLmZsYXR0ZW4oYXJnLm1hcChhcmcgPT4gcHJvY2Vzc0FyZyhhcmcpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWyc8dW5rbm93bj4nXTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZmlyc3RBcmcgPSBjbWRBcmdzWzBdO1xuICAgIGlmIChpc0luQ29tbWFuZHMoU0lOR0xFX0FSR19DT01NQU5EUywgcmVkaXNDb21tYW5kKSAmJiBmaXJzdEFyZyAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzc0FyZyhmaXJzdEFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHV0aWxzLmZsYXR0ZW4oY21kQXJncy5tYXAoYXJnID0+IHByb2Nlc3NBcmcoYXJnKSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKiogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgcmVkaXMgb3BlcmF0aW9uIHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIFwiY2FjaGUgb3BlcmF0aW9uXCIgYnkgY2hlY2tpbmcgaWYgYSBrZXkgaXMgcHJlZml4ZWQuXG4gKiAgV2Ugb25seSBzdXBwb3J0IGNlcnRhaW4gY29tbWFuZHMgKHN1Y2ggYXMgJ3NldCcsICdnZXQnLCAnbWdldCcpLiAqL1xuZnVuY3Rpb24gc2hvdWxkQ29uc2lkZXJGb3JDYWNoZShyZWRpc0NvbW1hbmQsIGtleXMsIHByZWZpeGVzKSB7XG4gIGlmICghZ2V0Q2FjaGVPcGVyYXRpb24ocmVkaXNDb21tYW5kKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoa2V5SGFzUHJlZml4KGtleSwgcHJlZml4ZXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiogQ2FsY3VsYXRlcyBzaXplIGJhc2VkIG9uIHRoZSBjYWNoZSByZXNwb25zZSB2YWx1ZSAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZShyZXNwb25zZSkge1xuICBjb25zdCBnZXRTaXplID0gKHZhbHVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSByZXR1cm4gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZS5sZW5ndGg7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdmFsdWUudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSkubGVuZ3RoO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHJlc3BvbnNlKVxuICAgID8gcmVzcG9uc2UucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGdldFNpemUoY3Vycik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicgPyAoYWNjICE9PSB1bmRlZmluZWQgPyBhY2MgKyBzaXplIDogc2l6ZSkgOiBhY2M7XG4gICAgICB9LCAwKVxuICAgIDogZ2V0U2l6ZShyZXNwb25zZSk7XG59XG5cbmV4cG9ydHMuR0VUX0NPTU1BTkRTID0gR0VUX0NPTU1BTkRTO1xuZXhwb3J0cy5TRVRfQ09NTUFORFMgPSBTRVRfQ09NTUFORFM7XG5leHBvcnRzLmNhbGN1bGF0ZUNhY2hlSXRlbVNpemUgPSBjYWxjdWxhdGVDYWNoZUl0ZW1TaXplO1xuZXhwb3J0cy5nZXRDYWNoZUtleVNhZmVseSA9IGdldENhY2hlS2V5U2FmZWx5O1xuZXhwb3J0cy5nZXRDYWNoZU9wZXJhdGlvbiA9IGdldENhY2hlT3BlcmF0aW9uO1xuZXhwb3J0cy5pc0luQ29tbWFuZHMgPSBpc0luQ29tbWFuZHM7XG5leHBvcnRzLnNob3VsZENvbnNpZGVyRm9yQ2FjaGUgPSBzaG91bGRDb25zaWRlckZvckNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkaXNDYWNoZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"__sentryRewritesTunnelPath__\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"__sentryBasePath\"] = undefined;globalThis[\"__rewriteFramesDistDir__\"] = \".next\";var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\n\nconst supportedVersions = ['>=8.0.0 <11'];\n\n/**\n * Custom instrumentation for nestjs.\n *\n * This hooks into\n * 1. @Injectable decorator, which is applied on class middleware, interceptors and guards.\n * 2. @Catch decorator, which is applied on exception filters.\n */\nclass SentryNestInstrumentation extends instrumentation.InstrumentationBase {\n   static  __initStatic() {this.COMPONENT = '@nestjs/common';}\n   static  __initStatic2() {this.COMMON_ATTRIBUTES = {\n    component: SentryNestInstrumentation.COMPONENT,\n  };}\n\n   constructor(config = {}) {\n    super('sentry-nestjs', utils.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(SentryNestInstrumentation.COMPONENT, supportedVersions);\n\n    moduleDef.files.push(\n      this._getInjectableFileInstrumentation(supportedVersions),\n      this._getCatchFileInstrumentation(supportedVersions),\n    );\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @Injectable decorator.\n   */\n   _getInjectableFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/injectable.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core.isWrapped(moduleExports.Injectable)) {\n          this._unwrap(moduleExports, 'Injectable');\n        }\n        this._wrap(moduleExports, 'Injectable', this._createWrapInjectable());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Injectable');\n      },\n    );\n  }\n\n  /**\n   * Wraps the @Catch decorator.\n   */\n   _getCatchFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/catch.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core.isWrapped(moduleExports.Catch)) {\n          this._unwrap(moduleExports, 'Catch');\n        }\n        this._wrap(moduleExports, 'Catch', this._createWrapCatch());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Catch');\n      },\n    );\n  }\n\n  /**\n   * Creates a wrapper function for the @Injectable decorator.\n   */\n   _createWrapInjectable() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapInjectable(original) {\n      return function wrappedInjectable(options) {\n        return function (target) {\n          // patch middleware\n          if (typeof target.prototype.use === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.use = new Proxy(target.prototype.use, {\n              apply: (originalUse, thisArgUse, argsUse) => {\n                const [req, res, next, ...args] = argsUse;\n\n                // Check that we can reasonably assume that the target is a middleware.\n                // Without these guards, instrumentation will fail if a function named 'use' on a service, which is\n                // decorated with @Injectable, is called.\n                if (!req || !res || !next || typeof next !== 'function') {\n                  return originalUse.apply(thisArgUse, argsUse);\n                }\n\n                const prevSpan = core$1.getActiveSpan();\n\n                return core$1.startSpanManual(helpers.getMiddlewareSpanOptions(target), (span) => {\n                  // proxy next to end span on call\n                  const nextProxy = helpers.getNextProxy(next, span, prevSpan);\n                  return originalUse.apply(thisArgUse, [req, res, nextProxy, args]);\n                });\n              },\n            });\n          }\n\n          // patch guards\n          if (typeof target.prototype.canActivate === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.canActivate = new Proxy(target.prototype.canActivate, {\n              apply: (originalCanActivate, thisArgCanActivate, argsCanActivate) => {\n                const context = argsCanActivate[0];\n\n                if (!context) {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                }\n\n                return core$1.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                });\n              },\n            });\n          }\n\n          // patch pipes\n          if (typeof target.prototype.transform === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.transform = new Proxy(target.prototype.transform, {\n              apply: (originalTransform, thisArgTransform, argsTransform) => {\n                const value = argsTransform[0];\n                const metadata = argsTransform[1];\n\n                if (!value || !metadata) {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                }\n\n                return core$1.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                });\n              },\n            });\n          }\n\n          // patch interceptors\n          if (typeof target.prototype.intercept === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.intercept = new Proxy(target.prototype.intercept, {\n              apply: (originalIntercept, thisArgIntercept, argsIntercept) => {\n                const context = argsIntercept[0];\n                const next = argsIntercept[1];\n\n                const parentSpan = core$1.getActiveSpan();\n                let afterSpan;\n\n                // Check that we can reasonably assume that the target is an interceptor.\n                if (!context || !next || typeof next.handle !== 'function') {\n                  return originalIntercept.apply(thisArgIntercept, argsIntercept);\n                }\n\n                return core$1.startSpanManual(helpers.getMiddlewareSpanOptions(target), (beforeSpan) => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  next.handle = new Proxy(next.handle, {\n                    apply: (originalHandle, thisArgHandle, argsHandle) => {\n                      beforeSpan.end();\n\n                      if (parentSpan) {\n                        return core$1.withActiveSpan(parentSpan, () => {\n                          const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                          if (!context._sentryInterceptorInstrumented) {\n                            utils.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                            afterSpan = core$1.startInactiveSpan(\n                              helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'),\n                            );\n                          }\n\n                          return handleReturnObservable;\n                        });\n                      } else {\n                        const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                        if (!context._sentryInterceptorInstrumented) {\n                          utils.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                          afterSpan = core$1.startInactiveSpan(helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'));\n                        }\n\n                        return handleReturnObservable;\n                      }\n                    },\n                  });\n\n                  let returnedObservableInterceptMaybePromise;\n\n                  try {\n                    returnedObservableInterceptMaybePromise = originalIntercept.apply(thisArgIntercept, argsIntercept);\n                  } catch (e) {\n                    _optionalChain([beforeSpan, 'optionalAccess', _ => _.end, 'call', _2 => _2()]);\n                    _optionalChain([afterSpan, 'optionalAccess', _3 => _3.end, 'call', _4 => _4()]);\n                    throw e;\n                  }\n\n                  if (!afterSpan) {\n                    return returnedObservableInterceptMaybePromise;\n                  }\n\n                  // handle async interceptor\n                  if (utils.isThenable(returnedObservableInterceptMaybePromise)) {\n                    return returnedObservableInterceptMaybePromise.then(\n                      observable => {\n                        helpers.instrumentObservable(observable, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                        return observable;\n                      },\n                      e => {\n                        _optionalChain([beforeSpan, 'optionalAccess', _5 => _5.end, 'call', _6 => _6()]);\n                        _optionalChain([afterSpan, 'optionalAccess', _7 => _7.end, 'call', _8 => _8()]);\n                        throw e;\n                      },\n                    );\n                  }\n\n                  // handle sync interceptor\n                  if (typeof returnedObservableInterceptMaybePromise.subscribe === 'function') {\n                    helpers.instrumentObservable(returnedObservableInterceptMaybePromise, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                  }\n\n                  return returnedObservableInterceptMaybePromise;\n                });\n              },\n            });\n          }\n\n          return original(options)(target);\n        };\n      };\n    };\n  }\n\n  /**\n   * Creates a wrapper function for the @Catch decorator. Used to instrument exception filters.\n   */\n   _createWrapCatch() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapCatch(original) {\n      return function wrappedCatch(...exceptions) {\n        return function (target) {\n          if (typeof target.prototype.catch === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(...exceptions)(target);\n            }\n\n            target.prototype.catch = new Proxy(target.prototype.catch, {\n              apply: (originalCatch, thisArgCatch, argsCatch) => {\n                const exception = argsCatch[0];\n                const host = argsCatch[1];\n\n                if (!exception || !host) {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                }\n\n                return core$1.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                });\n              },\n            });\n          }\n\n          return original(...exceptions)(target);\n        };\n      };\n    };\n  }\n}SentryNestInstrumentation.__initStatic();SentryNestInstrumentation.__initStatic2();\n\nexports.SentryNestInstrumentation = SentryNestInstrumentation;\n//# sourceMappingURL=sentry-nest-instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst replacements = [\n  ['january', '1'],\n  ['february', '2'],\n  ['march', '3'],\n  ['april', '4'],\n  ['may', '5'],\n  ['june', '6'],\n  ['july', '7'],\n  ['august', '8'],\n  ['september', '9'],\n  ['october', '10'],\n  ['november', '11'],\n  ['december', '12'],\n  ['jan', '1'],\n  ['feb', '2'],\n  ['mar', '3'],\n  ['apr', '4'],\n  ['may', '5'],\n  ['jun', '6'],\n  ['jul', '7'],\n  ['aug', '8'],\n  ['sep', '9'],\n  ['oct', '10'],\n  ['nov', '11'],\n  ['dec', '12'],\n  ['sunday', '0'],\n  ['monday', '1'],\n  ['tuesday', '2'],\n  ['wednesday', '3'],\n  ['thursday', '4'],\n  ['friday', '5'],\n  ['saturday', '6'],\n  ['sun', '0'],\n  ['mon', '1'],\n  ['tue', '2'],\n  ['wed', '3'],\n  ['thu', '4'],\n  ['fri', '5'],\n  ['sat', '6'],\n];\n\n/**\n * Replaces names in cron expressions\n */\nfunction replaceCronNames(cronExpression) {\n  return replacements.reduce(\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement),\n    cronExpression,\n  );\n}\n\nexports.replaceCronNames = replaceCronNames;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jb21tb24uanM/NDNlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCByZXBsYWNlbWVudHMgPSBbXG4gIFsnamFudWFyeScsICcxJ10sXG4gIFsnZmVicnVhcnknLCAnMiddLFxuICBbJ21hcmNoJywgJzMnXSxcbiAgWydhcHJpbCcsICc0J10sXG4gIFsnbWF5JywgJzUnXSxcbiAgWydqdW5lJywgJzYnXSxcbiAgWydqdWx5JywgJzcnXSxcbiAgWydhdWd1c3QnLCAnOCddLFxuICBbJ3NlcHRlbWJlcicsICc5J10sXG4gIFsnb2N0b2JlcicsICcxMCddLFxuICBbJ25vdmVtYmVyJywgJzExJ10sXG4gIFsnZGVjZW1iZXInLCAnMTInXSxcbiAgWydqYW4nLCAnMSddLFxuICBbJ2ZlYicsICcyJ10sXG4gIFsnbWFyJywgJzMnXSxcbiAgWydhcHInLCAnNCddLFxuICBbJ21heScsICc1J10sXG4gIFsnanVuJywgJzYnXSxcbiAgWydqdWwnLCAnNyddLFxuICBbJ2F1ZycsICc4J10sXG4gIFsnc2VwJywgJzknXSxcbiAgWydvY3QnLCAnMTAnXSxcbiAgWydub3YnLCAnMTEnXSxcbiAgWydkZWMnLCAnMTInXSxcbiAgWydzdW5kYXknLCAnMCddLFxuICBbJ21vbmRheScsICcxJ10sXG4gIFsndHVlc2RheScsICcyJ10sXG4gIFsnd2VkbmVzZGF5JywgJzMnXSxcbiAgWyd0aHVyc2RheScsICc0J10sXG4gIFsnZnJpZGF5JywgJzUnXSxcbiAgWydzYXR1cmRheScsICc2J10sXG4gIFsnc3VuJywgJzAnXSxcbiAgWydtb24nLCAnMSddLFxuICBbJ3R1ZScsICcyJ10sXG4gIFsnd2VkJywgJzMnXSxcbiAgWyd0aHUnLCAnNCddLFxuICBbJ2ZyaScsICc1J10sXG4gIFsnc2F0JywgJzYnXSxcbl07XG5cbi8qKlxuICogUmVwbGFjZXMgbmFtZXMgaW4gY3JvbiBleHByZXNzaW9uc1xuICovXG5mdW5jdGlvbiByZXBsYWNlQ3Jvbk5hbWVzKGNyb25FeHByZXNzaW9uKSB7XG4gIHJldHVybiByZXBsYWNlbWVudHMucmVkdWNlKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAc2VudHJ5LWludGVybmFsL3Nkay9uby1yZWdleHAtY29uc3RydWN0b3JcbiAgICAoYWNjLCBbbmFtZSwgcmVwbGFjZW1lbnRdKSA9PiBhY2MucmVwbGFjZShuZXcgUmVnRXhwKG5hbWUsICdnaScpLCByZXBsYWNlbWVudCksXG4gICAgY3JvbkV4cHJlc3Npb24sXG4gICk7XG59XG5cbmV4cG9ydHMucmVwbGFjZUNyb25OYW1lcyA9IHJlcGxhY2VDcm9uTmFtZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/cron.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/cron.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentCron(lib, monitorSlug) {\n  let jobScheduled = false;\n\n  return new Proxy(lib, {\n    construct(target, args) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n\n      jobScheduled = true;\n\n      const cronString = common.replaceCronNames(cronTime);\n\n      async function monitoredTick(context, onComplete) {\n        return core.withMonitor(\n          monitorSlug,\n          async () => {\n            try {\n              await onTick(context, onComplete);\n            } catch (e) {\n              core.captureException(e);\n              throw e;\n            }\n          },\n          {\n            schedule: { type: 'crontab', value: cronString },\n            timezone: timeZone || undefined,\n          },\n        );\n      }\n\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop) {\n      if (prop === 'from') {\n        return (param) => {\n          const { cronTime, onTick, timeZone } = param;\n\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n\n          jobScheduled = true;\n\n          const cronString = common.replaceCronNames(cronTime);\n\n          param.onTick = async (context, onComplete) => {\n            return core.withMonitor(\n              monitorSlug,\n              async () => {\n                try {\n                  await onTick(context, onComplete);\n                } catch (e) {\n                  core.captureException(e);\n                  throw e;\n                }\n              },\n              {\n                schedule: { type: 'crontab', value: cronString },\n                timezone: timeZone || undefined,\n              },\n            );\n          };\n\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentCron = instrumentCron;\n//# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2Nyb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLHNIQUFhOztBQUVwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0MsWUFBWTtBQUNwRDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLG9DQUFvQztBQUM1RDtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2QkFBNkI7O0FBRS9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRDQUE0QyxZQUFZO0FBQ3hEOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSw0QkFBNEIsb0NBQW9DO0FBQ2hFO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vY3Jvbi5qcz82MjBmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbmNvbnN0IEVSUk9SX1RFWFQgPSAnQXV0b21hdGljIGluc3RydW1lbnRhdGlvbiBvZiBDcm9uSm9iIG9ubHkgc3VwcG9ydHMgY3JvbnRhYiBzdHJpbmcnO1xuXG4vKipcbiAqIEluc3RydW1lbnRzIHRoZSBgY3JvbmAgbGlicmFyeSB0byBzZW5kIGEgY2hlY2staW4gZXZlbnQgdG8gU2VudHJ5IGZvciBlYWNoIGpvYiBleGVjdXRpb24uXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICogaW1wb3J0IHsgQ3JvbkpvYiB9IGZyb20gJ2Nyb24nO1xuICpcbiAqIGNvbnN0IENyb25Kb2JXaXRoQ2hlY2tJbiA9IFNlbnRyeS5jcm9uLmluc3RydW1lbnRDcm9uKENyb25Kb2IsICdteS1jcm9uLWpvYicpO1xuICpcbiAqIC8vIHVzZSB0aGUgY29uc3RydWN0b3JcbiAqIGNvbnN0IGpvYiA9IG5ldyBDcm9uSm9iV2l0aENoZWNrSW4oJyogKiAqICogKicsICgpID0+IHtcbiAqICBjb25zb2xlLmxvZygnWW91IHdpbGwgc2VlIHRoaXMgbWVzc2FnZSBldmVyeSBtaW51dGUnKTtcbiAqIH0pO1xuICpcbiAqIC8vIG9yIGZyb21cbiAqIGNvbnN0IGpvYiA9IENyb25Kb2JXaXRoQ2hlY2tJbi5mcm9tKHsgY3JvblRpbWU6ICcqICogKiAqIConLCBvblRpY2s6ICgpID0+IHtcbiAqICAgY29uc29sZS5sb2coJ1lvdSB3aWxsIHNlZSB0aGlzIG1lc3NhZ2UgZXZlcnkgbWludXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Q3JvbihsaWIsIG1vbml0b3JTbHVnKSB7XG4gIGxldCBqb2JTY2hlZHVsZWQgPSBmYWxzZTtcblxuICByZXR1cm4gbmV3IFByb3h5KGxpYiwge1xuICAgIGNvbnN0cnVjdCh0YXJnZXQsIGFyZ3MpIHtcbiAgICAgIGNvbnN0IFtjcm9uVGltZSwgb25UaWNrLCBvbkNvbXBsZXRlLCBzdGFydCwgdGltZVpvbmUsIC4uLnJlc3RdID0gYXJncztcblxuICAgICAgaWYgKHR5cGVvZiBjcm9uVGltZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1RFWFQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoam9iU2NoZWR1bGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBqb2IgbmFtZWQgJyR7bW9uaXRvclNsdWd9JyBoYXMgYWxyZWFkeSBiZWVuIHNjaGVkdWxlZGApO1xuICAgICAgfVxuXG4gICAgICBqb2JTY2hlZHVsZWQgPSB0cnVlO1xuXG4gICAgICBjb25zdCBjcm9uU3RyaW5nID0gY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoY3JvblRpbWUpO1xuXG4gICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRUaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXdhaXQgb25UaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSk7XG4gICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjcm9uU3RyaW5nIH0sXG4gICAgICAgICAgICB0aW1lem9uZTogdGltZVpvbmUgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgdGFyZ2V0KGNyb25UaW1lLCBtb25pdG9yZWRUaWNrLCBvbkNvbXBsZXRlLCBzdGFydCwgdGltZVpvbmUsIC4uLnJlc3QpO1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdmcm9tJykge1xuICAgICAgICByZXR1cm4gKHBhcmFtKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBjcm9uVGltZSwgb25UaWNrLCB0aW1lWm9uZSB9ID0gcGFyYW07XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNyb25UaW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChqb2JTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBqb2IgbmFtZWQgJyR7bW9uaXRvclNsdWd9JyBoYXMgYWxyZWFkeSBiZWVuIHNjaGVkdWxlZGApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGpvYlNjaGVkdWxlZCA9IHRydWU7XG5cbiAgICAgICAgICBjb25zdCBjcm9uU3RyaW5nID0gY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoY3JvblRpbWUpO1xuXG4gICAgICAgICAgcGFyYW0ub25UaWNrID0gYXN5bmMgKGNvbnRleHQsIG9uQ29tcGxldGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCBvblRpY2soY29udGV4dCwgb25Db21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjcm9uU3RyaW5nIH0sXG4gICAgICAgICAgICAgICAgdGltZXpvbmU6IHRpbWVab25lIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiB0YXJnZXQuZnJvbShwYXJhbSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnRDcm9uID0gaW5zdHJ1bWVudENyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcm9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/cron.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst cron$1 = __webpack_require__(/*! ./cron.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/cron.js\");\nconst nodeCron = __webpack_require__(/*! ./node-cron.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\");\nconst nodeSchedule = __webpack_require__(/*! ./node-schedule.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\");\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nconst cron = {\n  instrumentCron: cron$1.instrumentCron,\n  instrumentNodeCron: nodeCron.instrumentNodeCron,\n  instrumentNodeSchedule: nodeSchedule.instrumentNodeSchedule,\n};\n\nexports.cron = cron;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsZUFBZSxtQkFBTyxDQUFDLGtIQUFXO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLDRIQUFnQjtBQUN6QyxxQkFBcUIsbUJBQU8sQ0FBQyxvSUFBb0I7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vaW5kZXguanM/NzgxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjcm9uJDEgPSByZXF1aXJlKCcuL2Nyb24uanMnKTtcbmNvbnN0IG5vZGVDcm9uID0gcmVxdWlyZSgnLi9ub2RlLWNyb24uanMnKTtcbmNvbnN0IG5vZGVTY2hlZHVsZSA9IHJlcXVpcmUoJy4vbm9kZS1zY2hlZHVsZS5qcycpO1xuXG4vKiogTWV0aG9kcyB0byBpbnN0cnVtZW50IGNyb24gbGlicmFyaWVzIGZvciBTZW50cnkgY2hlY2staW5zICovXG5jb25zdCBjcm9uID0ge1xuICBpbnN0cnVtZW50Q3JvbjogY3JvbiQxLmluc3RydW1lbnRDcm9uLFxuICBpbnN0cnVtZW50Tm9kZUNyb246IG5vZGVDcm9uLmluc3RydW1lbnROb2RlQ3JvbixcbiAgaW5zdHJ1bWVudE5vZGVTY2hlZHVsZTogbm9kZVNjaGVkdWxlLmluc3RydW1lbnROb2RlU2NoZWR1bGUsXG59O1xuXG5leHBvcnRzLmNyb24gPSBjcm9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import * as cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression, callback, options] = argArray;\n\n            if (!_optionalChain([options, 'optionalAccess', _ => _.name])) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                options.name,\n                async () => {\n                  // We have to manually catch here and capture the exception because node-cron swallows errors\n                  // https://github.com/node-cron/node-cron/issues/399\n                  try {\n                    return await callback();\n                  } catch (e) {\n                    core.captureException(e);\n                    throw e;\n                  }\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                  timezone: _optionalChain([options, 'optionalAccess', _2 => _2.timezone]),\n                },\n              );\n            }\n\n            return target.apply(thisArg, [expression, monitoredCallback, options]);\n          },\n        });\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentNodeCron = instrumentNodeCron;\n//# sourceMappingURL=node-cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL25vZGUtY3Jvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsb0hBQWU7O0FBRTNCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLGlIQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQyxzSEFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sT0FBTyxxQkFBcUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw4QkFBOEIsNkRBQTZEO0FBQzNGO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vbm9kZS1jcm9uLmpzPzA5NDEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgdGhlIGBub2RlLWNyb25gIGxpYnJhcnkgd2l0aCBjaGVjay1pbiBtb25pdG9yaW5nLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSBcIkBzZW50cnkvbm9kZVwiO1xuICogaW1wb3J0ICogYXMgY3JvbiBmcm9tIFwibm9kZS1jcm9uXCI7XG4gKlxuICogY29uc3QgY3JvbldpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVDcm9uKGNyb24pO1xuICpcbiAqIGNyb25XaXRoQ2hlY2tJbi5zY2hlZHVsZShcbiAqICAgXCIqICogKiAqICpcIixcbiAqICAgKCkgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKFwicnVubmluZyBhIHRhc2sgZXZlcnkgbWludXRlXCIpO1xuICogICB9LFxuICogICB7IG5hbWU6IFwibXktY3Jvbi1qb2JcIiB9LFxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Tm9kZUNyb24obGliKSB7XG4gIHJldHVybiBuZXcgUHJveHkobGliLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdzY2hlZHVsZScgJiYgdGFyZ2V0LnNjaGVkdWxlKSB7XG4gICAgICAgIC8vIFdoZW4gJ2dldCcgaXMgY2FsbGVkIGZvciBzY2hlZHVsZSwgcmV0dXJuIGEgcHJveGllZCB2ZXJzaW9uIG9mIHRoZSBzY2hlZHVsZSBmdW5jdGlvblxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldC5zY2hlZHVsZSwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IFtleHByZXNzaW9uLCBjYWxsYmFjaywgb3B0aW9uc10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgaWYgKCFfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLm5hbWVdKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgXCJuYW1lXCIgZm9yIHNjaGVkdWxlZCBqb2IuIEEgbmFtZSBpcyByZXF1aXJlZCBmb3IgU2VudHJ5IGNoZWNrLWluIG1vbml0b3JpbmcuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIG1vbml0b3JlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29yZS53aXRoTW9uaXRvcihcbiAgICAgICAgICAgICAgICBvcHRpb25zLm5hbWUsXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBtYW51YWxseSBjYXRjaCBoZXJlIGFuZCBjYXB0dXJlIHRoZSBleGNlcHRpb24gYmVjYXVzZSBub2RlLWNyb24gc3dhbGxvd3MgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZS1jcm9uL25vZGUtY3Jvbi9pc3N1ZXMvMzk5XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoZXhwcmVzc2lvbikgfSxcbiAgICAgICAgICAgICAgICAgIHRpbWV6b25lOiBfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIudGltZXpvbmVdKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIFtleHByZXNzaW9uLCBtb25pdG9yZWRDYWxsYmFjaywgb3B0aW9uc10pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Tm9kZUNyb24gPSBpbnN0cnVtZW50Tm9kZUNyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLWNyb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback, callback] = argArray;\n\n            if (\n              typeof nameOrExpression !== 'string' ||\n              typeof expressionOrCallback !== 'string' ||\n              typeof callback !== 'function'\n            ) {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                monitorSlug,\n                async () => {\n                  await _optionalChain([callback, 'optionalCall', _ => _()]);\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                },\n              );\n            }\n\n            return target.apply(thisArg, [monitorSlug, expression, monitoredCallback]);\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n\nexports.instrumentNodeSchedule = instrumentNodeSchedule;\n//# sourceMappingURL=node-schedule.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL25vZGUtc2NoZWR1bGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLG9IQUFlOztBQUUzQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyxpSEFBYztBQUNuQyxlQUFlLG1CQUFPLENBQUMsc0hBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLDhCQUE4Qiw2REFBNkQ7QUFDM0YsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vbm9kZS1zY2hlZHVsZS5qcz8zMWM1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbi5qcycpO1xuXG4vKipcbiAqIEluc3RydW1lbnRzIHRoZSBgbm9kZS1zY2hlZHVsZWAgbGlicmFyeSB0byBzZW5kIGEgY2hlY2staW4gZXZlbnQgdG8gU2VudHJ5IGZvciBlYWNoIGpvYiBleGVjdXRpb24uXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICogaW1wb3J0ICogYXMgc2NoZWR1bGUgZnJvbSAnbm9kZS1zY2hlZHVsZSc7XG4gKlxuICogY29uc3Qgc2NoZWR1bGVXaXRoQ2hlY2tJbiA9IFNlbnRyeS5jcm9uLmluc3RydW1lbnROb2RlU2NoZWR1bGUoc2NoZWR1bGUpO1xuICpcbiAqIGNvbnN0IGpvYiA9IHNjaGVkdWxlV2l0aENoZWNrSW4uc2NoZWR1bGVKb2IoJ215LWNyb24tam9iJywgJyogKiAqICogKicsICgpID0+IHtcbiAqICBjb25zb2xlLmxvZygnWW91IHdpbGwgc2VlIHRoaXMgbWVzc2FnZSBldmVyeSBtaW51dGUnKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGluc3RydW1lbnROb2RlU2NoZWR1bGUobGliKSB7XG4gIHJldHVybiBuZXcgUHJveHkobGliLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdzY2hlZHVsZUpvYicpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldC5zY2hlZHVsZUpvYiwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IFtuYW1lT3JFeHByZXNzaW9uLCBleHByZXNzaW9uT3JDYWxsYmFjaywgY2FsbGJhY2tdID0gYXJnQXJyYXk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdHlwZW9mIG5hbWVPckV4cHJlc3Npb24gIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgIHR5cGVvZiBleHByZXNzaW9uT3JDYWxsYmFjayAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwiQXV0b21hdGljIGluc3RydW1lbnRhdGlvbiBvZiAnbm9kZS1zY2hlZHVsZScgcmVxdWlyZXMgdGhlIGZpcnN0IHBhcmFtZXRlciBvZiAnc2NoZWR1bGVKb2InIHRvIGJlIGEgam9iIG5hbWUgc3RyaW5nIGFuZCB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byBiZSBhIGNyb250YWIgc3RyaW5nXCIsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG1vbml0b3JTbHVnID0gbmFtZU9yRXhwcmVzc2lvbjtcbiAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSBleHByZXNzaW9uT3JDYWxsYmFjaztcblxuICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gbW9uaXRvcmVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IF9vcHRpb25hbENoYWluKFtjYWxsYmFjaywgJ29wdGlvbmFsQ2FsbCcsIF8gPT4gXygpXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjb21tb24ucmVwbGFjZUNyb25OYW1lcyhleHByZXNzaW9uKSB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgW21vbml0b3JTbHVnLCBleHByZXNzaW9uLCBtb25pdG9yZWRDYWxsYmFja10pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnROb2RlU2NoZWR1bGUgPSBpbnN0cnVtZW50Tm9kZVNjaGVkdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1zY2hlZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2RlYnVnLWJ1aWxkLmpzPzUxY2MiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0cy5ERUJVR19CVUlMRCA9IERFQlVHX0JVSUxEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctYnVpbGQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst nodeFetch = __webpack_require__(/*! ./integrations/node-fetch.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst console = __webpack_require__(/*! ./integrations/console.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ./integrations/context.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ./integrations/contextlines.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/local-variables/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ./integrations/modules.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst onuncaughtexception = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/anr/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./integrations/tracing/fastify.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst nest = __webpack_require__(/*! ./integrations/tracing/nest/nest.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst spotlight = __webpack_require__(/*! ./integrations/spotlight.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst processThread = __webpack_require__(/*! ./integrations/processThread.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js\");\nconst contextManager = __webpack_require__(/*! ./otel/contextManager.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst instrument = __webpack_require__(/*! ./otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst index$4 = __webpack_require__(/*! ./sdk/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst api = __webpack_require__(/*! ./sdk/api.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst module$1 = __webpack_require__(/*! ./utils/module.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\nconst http = __webpack_require__(/*! ./transports/http.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst client = __webpack_require__(/*! ./sdk/client.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst index$6 = __webpack_require__(/*! ./cron/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/cron/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n\n\nexports.httpIntegration = index.httpIntegration;\nexports.nativeNodeFetchIntegration = nodeFetch.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.consoleIntegration = console.consoleIntegration;\nexports.nodeContextIntegration = context.nodeContextIntegration;\nexports.contextLinesIntegration = contextlines.contextLinesIntegration;\nexports.localVariablesIntegration = index$1.localVariablesIntegration;\nexports.modulesIntegration = modules.modulesIntegration;\nexports.onUncaughtExceptionIntegration = onuncaughtexception.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = onunhandledrejection.onUnhandledRejectionIntegration;\nexports.anrIntegration = index$2.anrIntegration;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = fastify.fastifyIntegration;\nexports.setupFastifyErrorHandler = fastify.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.nestIntegration = nest.nestIntegration;\nexports.setupNestErrorHandler = nest.setupNestErrorHandler;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$3.hapiIntegration;\nexports.setupHapiErrorHandler = index$3.setupHapiErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.spotlightIntegration = spotlight.spotlightIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.processThreadBreadcrumbIntegration = processThread.processThreadBreadcrumbIntegration;\nexports.SentryContextManager = contextManager.SentryContextManager;\nexports.generateInstrumentOnce = instrument.generateInstrumentOnce;\nexports.getDefaultIntegrations = index$4.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$4.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$4.init;\nexports.initWithoutDefaultIntegrations = index$4.initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = index$4.validateOpenTelemetrySetup;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$5.getAutoPerformanceIntegrations;\nexports.defaultStackParser = api.defaultStackParser;\nexports.getSentryRelease = api.getSentryRelease;\nexports.createGetModuleFromFilename = module$1.createGetModuleFromFilename;\nexports.makeNodeTransport = http.makeNodeTransport;\nexports.NodeClient = client.NodeClient;\nexports.cron = index$6.cron;\nexports.DEFAULT_USER_INCLUDES = utils.DEFAULT_USER_INCLUDES;\nexports.addRequestDataToEvent = utils.addRequestDataToEvent;\nexports.extractRequestData = utils.extractRequestData;\nexports.addOpenTelemetryInstrumentation = opentelemetry.addOpenTelemetryInstrumentation;\nexports.continueTrace = opentelemetry.continueTrace;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.createTransport = core.createTransport;\nexports.debugIntegration = core.debugIntegration;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentHub = core.getCurrentHub;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.metrics = core.metricsDefault;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.sessionTimingIntegration = core.sessionTimingIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain,\n  _optionalChainDelete\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = '';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\nfunction log(message, ...args) {\n  utils.logger.log(`[ANR] ${message}`, ...args);\n}\n\nfunction globalWithScopeFetchFn() {\n  return utils.GLOBAL_OBJ;\n}\n\n/** Fetches merged scope data */\nfunction getScopeData() {\n  const scope = core.getGlobalScope().getScopeData();\n  core.mergeScopeData(scope, core.getIsolationScope().getScopeData());\n  core.mergeScopeData(scope, core.getCurrentScope().getScopeData());\n\n  // We remove attachments because they likely won't serialize well as json\n  scope.attachments = [];\n  // We can't serialize event processor functions\n  scope.eventProcessors = [];\n\n  return scope;\n}\n\n/**\n * Gets contexts by calling all event processors. This shouldn't be called until all integrations are setup\n */\nasync function getContexts(client) {\n  let event = { message: 'ANR' };\n  const eventHint = {};\n\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n\n  return _optionalChain([event, 'optionalAccess', _2 => _2.contexts]) || {};\n}\n\nconst INTEGRATION_NAME = 'Anr';\n\nconst _anrIntegration = ((options = {}) => {\n  if (nodeVersion.NODE_VERSION.major < 16 || (nodeVersion.NODE_VERSION.major === 16 && nodeVersion.NODE_VERSION.minor < 17)) {\n    throw new Error('ANR detection requires Node 16.17.0 or later');\n  }\n\n  let worker;\n  let client;\n\n  // Hookup the scope fetch function to the global object so that it can be called from the worker thread via the\n  // debugger when it pauses\n  const gbl = globalWithScopeFetchFn();\n  gbl.__SENTRY_GET_SCOPES__ = getScopeData;\n\n  return {\n    name: INTEGRATION_NAME,\n    startWorker: () => {\n      if (worker) {\n        return;\n      }\n\n      if (client) {\n        worker = _startWorker(client, options);\n      }\n    },\n    stopWorker: () => {\n      if (worker) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        worker.then(stop => {\n          stop();\n          worker = undefined;\n        });\n      }\n    },\n    setup(initClient) {\n      client = initClient;\n\n      // setImmediate is used to ensure that all other integrations have had their setup called first.\n      // This allows us to call into all integrations to fetch the full context\n      setImmediate(() => this.startWorker());\n    },\n  } ;\n}) ;\n\nconst anrIntegration = core.defineIntegration(_anrIntegration) ;\n\n/**\n * Starts the ANR worker thread\n *\n * @returns A function to stop the worker\n */\nasync function _startWorker(\n  client,\n  integrationOptions,\n) {\n  const dsn = client.getDsn();\n\n  if (!dsn) {\n    return () => {\n      //\n    };\n  }\n\n  const contexts = await getContexts(client);\n\n  // These will not be accurate if sent later from the worker thread\n   _optionalChainDelete([contexts, 'access', _3 => _3.app, 'optionalAccess', _4 => delete _4.app_memory]);\n   _optionalChainDelete([contexts, 'access', _5 => _5.device, 'optionalAccess', _6 => delete _6.free_memory]);\n\n  const initOptions = client.getOptions();\n\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n\n  const options = {\n    debug: utils.logger.isEnabled(),\n    dsn,\n    tunnel: initOptions.tunnel,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: integrationOptions.appRootPath,\n    pollInterval: integrationOptions.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: integrationOptions.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!integrationOptions.captureStackTrace,\n    staticTags: integrationOptions.staticTags || {},\n    contexts,\n  };\n\n  if (options.captureStackTrace) {\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n    // We don't want any Node args to be passed to the worker\n    execArgv: [],\n  });\n\n  process.on('exit', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n  });\n\n  const timer = setInterval(() => {\n    try {\n      const currentSession = core.getCurrentScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? { ...currentSession, toJSON: undefined } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({ session });\n    } catch (_) {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n\n  worker.on('message', (msg) => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      core.getCurrentScope().setSession(undefined);\n    }\n  });\n\n  worker.once('error', (err) => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n\n  worker.once('exit', (code) => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n    clearInterval(timer);\n  };\n}\n\nexports.anrIntegration = anrIntegration;\nexports.base64WorkerScript = base64WorkerScript;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Capture console logs as breadcrumbs.\n */\nconst consoleIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      utils.addConsoleInstrumentationHandler(({ args, level }) => {\n        if (core.getClient() !== client) {\n          return;\n        }\n\n        core.addBreadcrumb(\n          {\n            category: 'console',\n            level: utils.severityLevelFromString(level),\n            message: utils.truncate(util.format.apply(undefined, args), 2048), // 2KB\n          },\n          {\n            input: [...args],\n            level,\n          },\n        );\n      });\n    },\n  };\n});\n\nexports.consoleIntegration = consoleIntegration;\n//# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLG9IQUFlOztBQUVyQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxhQUFhO0FBQzdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NvbnNvbGUuanM/MmI0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgnbm9kZTp1dGlsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDb25zb2xlJztcblxuLyoqXG4gKiBDYXB0dXJlIGNvbnNvbGUgbG9ncyBhcyBicmVhZGNydW1icy5cbiAqL1xuY29uc3QgY29uc29sZUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIHV0aWxzLmFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyKCh7IGFyZ3MsIGxldmVsIH0pID0+IHtcbiAgICAgICAgaWYgKGNvcmUuZ2V0Q2xpZW50KCkgIT09IGNsaWVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ2NvbnNvbGUnLFxuICAgICAgICAgICAgbGV2ZWw6IHV0aWxzLnNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nKGxldmVsKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHV0aWxzLnRydW5jYXRlKHV0aWwuZm9ybWF0LmFwcGx5KHVuZGVmaW5lZCwgYXJncyksIDIwNDgpLCAvLyAyS0JcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlucHV0OiBbLi4uYXJnc10sXG4gICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pO1xuXG5leHBvcnRzLmNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNvbnNvbGVJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnNvbGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_child_process = __webpack_require__(/*! node:child_process */ \"node:child_process\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\nconst readFileAsync = util.promisify(node_fs.readFile);\nconst readDirAsync = util.promisify(node_fs.readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\n\nconst INTEGRATION_NAME = 'Context';\n\nconst _nodeContextIntegration = ((options = {}) => {\n  let cachedContext;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ..._optionalChain([event, 'access', _ => _.contexts, 'optionalAccess', _2 => _2.app]) },\n      os: { ...updatedContext.os, ..._optionalChain([event, 'access', _3 => _3.contexts, 'optionalAccess', _4 => _4.os]) },\n      device: { ...updatedContext.device, ..._optionalChain([event, 'access', _5 => _5.contexts, 'optionalAccess', _6 => _6.device]) },\n      culture: { ...updatedContext.culture, ..._optionalChain([event, 'access', _7 => _7.contexts, 'optionalAccess', _8 => _8.culture]) },\n      cloud_resource: { ...updatedContext.cloud_resource, ..._optionalChain([event, 'access', _9 => _9.contexts, 'optionalAccess', _10 => _10.cloud_resource]) },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) ;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nconst nodeContextIntegration = core.defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n\n  if (_optionalChain([contexts, 'optionalAccess', _11 => _11.app, 'optionalAccess', _12 => _12.app_memory])) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _13 => _13.app, 'optionalAccess', _14 => _14.free_memory]) && typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _15 => _15.availableMemory, 'optionalCall', _16 => _16()]);\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _17 => _17.device, 'optionalAccess', _18 => _18.free_memory])) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext() {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (typeof (process.versions ).icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext = { app_start_time, app_memory };\n\n  if (typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _19 => _19.availableMemory, 'optionalCall', _20 => _20()]);\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus();\n    const firstCpu = cpuInfo && cpuInfo[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS\n\n = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      node_child_process.execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return (name.split(' ') )[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = node_path.join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) ).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = _optionalChain([LINUX_VERSIONS, 'access', _21 => _21[id], 'optionalCall', _22 => _22(contents)]);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexports.getAppContext = getAppContext;\nexports.getDeviceContext = getDeviceContext;\nexports.nodeContextIntegration = nodeContextIntegration;\nexports.readDirAsync = readDirAsync;\nexports.readFileAsync = readFileAsync;\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_readline = __webpack_require__(/*! node:readline */ \"node:readline\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst LRU_FILE_CONTENTS_CACHE = new utils.LRUMap(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new utils.LRUMap(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\n\n/**\n * Get or init map value\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines, linecontext) {\n  if (!lines.length) {\n    return [];\n  }\n\n  let i = 0;\n  const line = lines[0];\n\n  if (typeof line !== 'number') {\n    return [];\n  }\n\n  let current = makeContextRange(line, linecontext);\n  const out = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = node_fs.createReadStream(path);\n    const lineReaded = node_readline.createInterface({\n      input: stream,\n    });\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      resolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e) {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      debugBuild.DEBUG_BUILD && utils.logger.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      resolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', resolve);\n\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = utils.snipLine(line, 0);\n\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event, contextLines) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n\n  if (contextLines > 0 && _optionalChain([event, 'access', _ => _.exception, 'optionalAccess', _2 => _2.values])) {\n    for (const exception of event.exception.values) {\n      if (!_optionalChain([exception, 'access', _3 => _3.stacktrace, 'optionalAccess', _4 => _4.frames, 'optionalAccess', _5 => _5.length])) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        const filename = _optionalChain([frame, 'optionalAccess', _6 => _6.filename]);\n\n        if (\n          !frame ||\n          typeof filename !== 'string' ||\n          typeof frame.lineno !== 'number' ||\n          shouldSkipContextLinesForFile(filename) ||\n          shouldSkipContextLinesForFrame(frame)\n        ) {\n          continue;\n        }\n\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    debugBuild.DEBUG_BUILD && utils.logger.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && _optionalChain([event, 'access', _7 => _7.exception, 'optionalAccess', _8 => _8.values])) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace && exception.stacktrace.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(\n  frames,\n  contextLines,\n  cache,\n) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nfunction addContextToFrame(\n  lineno,\n  frame,\n  contextLines,\n  contents,\n) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    debugBuild.DEBUG_BUILD && utils.logger.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      debugBuild.DEBUG_BUILD && utils.logger.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    debugBuild.DEBUG_BUILD && utils.logger.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n\n  frame.context_line = contents[lineno];\n\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\n\n// Compute inclusive end context range\nfunction makeRangeStart(line, linecontext) {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line, linecontext) {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line, linecontext) {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nconst _contextLinesIntegration = ((options = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) ;\n\n/**\n * Capture the lines before and after the frame's context.\n */\nconst contextLinesIntegration = core.defineIntegration(_contextLinesIntegration);\n\nexports.MAX_CONTEXTLINES_COLNO = MAX_CONTEXTLINES_COLNO;\nexports.MAX_CONTEXTLINES_LINENO = MAX_CONTEXTLINES_LINENO;\nexports._contextLinesIntegration = _contextLinesIntegration;\nexports.addContextToFrame = addContextToFrame;\nexports.contextLinesIntegration = contextLinesIntegration;\n//# sourceMappingURL=contextlines.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-fs@0.16.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        instrument.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZnMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwwQkFBMEIsbUJBQU8sQ0FBQyx5TUFBbUM7QUFDckUsYUFBYSxtQkFBTyxDQUFDLGlIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLG9JQUF1Qjs7QUFFbEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsbUJBQW1CO0FBQ3pELHNDQUFzQyxhQUFhOztBQUVuRDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mcy5qcz81ZDc0Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkZzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWZzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRmlsZVN5c3RlbSc7XG5cbi8qKlxuICogVGhpcyBpbnRlZ3JhdGlvbiB3aWxsIGNyZWF0ZSBzcGFucyBmb3IgYGZzYCBBUEkgb3BlcmF0aW9ucywgbGlrZSByZWFkaW5nIGFuZCB3cml0aW5nIGZpbGVzLlxuICpcbiAqICoqV0FSTklORzoqKiBUaGlzIGludGVncmF0aW9uIG1heSBhZGQgc2lnbmlmaWNhbnQgb3ZlcmhlYWQgdG8geW91ciBhcHBsaWNhdGlvbi4gRXNwZWNpYWxseSBpbiBzY2VuYXJpb3Mgd2l0aCBhIGxvdCBvZlxuICogZmlsZSBJL08sIGxpa2UgZm9yIGV4YW1wbGUgd2hlbiBydW5uaW5nIGEgZnJhbWV3b3JrIGRldiBzZXJ2ZXIsIGluY2x1ZGluZyB0aGlzIGludGVncmF0aW9uIGNhbiBtYXNzaXZlbHkgc2xvdyBkb3duXG4gKiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIENvbmZpZ3VyYXRpb24gZm9yIHRoaXMgaW50ZWdyYXRpb24uXG4gKi9cbmNvbnN0IGZzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKFxuICAoXG4gICAgb3B0aW9uc1xuXG4gPSB7fSxcbiAgKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgICBzZXR1cE9uY2UoKSB7XG4gICAgICAgIGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgICAgICAgICBJTlRFR1JBVElPTl9OQU1FLFxuICAgICAgICAgICgpID0+XG4gICAgICAgICAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRnMuRnNJbnN0cnVtZW50YXRpb24oe1xuICAgICAgICAgICAgICByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgZW5kSG9vayhmdW5jdGlvbk5hbWUsIHsgYXJncywgc3BhbiwgZXJyb3IgfSkge1xuICAgICAgICAgICAgICAgIHNwYW4udXBkYXRlTmFtZShgZnMuJHtmdW5jdGlvbk5hbWV9YCk7XG5cbiAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06ICdmaWxlJyxcbiAgICAgICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uZmlsZS5mcycsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWNvcmRFcnJvck1lc3NhZ2VzQXNTcGFuQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJiBGU19PUEVSQVRJT05TX1dJVEhfUEFUSF9BUkcuaW5jbHVkZXMoZnVuY3Rpb25OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgncGF0aF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfVEFSR0VUX1BBVEguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCd0YXJnZXRfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3BhdGhfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmIEZTX09QRVJBVElPTlNfV0lUSF9QUkVGSVguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgncHJlZml4X2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9FWElTVElOR19QQVRIX05FV19QQVRILmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZXhpc3RpbmdfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnbmV3X3BhdGhfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgRlNfT1BFUkFUSU9OU19XSVRIX1NSQ19ERVNULmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnc3JjX2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdkZXN0X2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9PTERfUEFUSF9ORVdfUEFUSC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ29sZF9wYXRoX2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCduZXdfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlcnJvciAmJiBvcHRpb25zLnJlY29yZEVycm9yTWVzc2FnZXNBc1NwYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZnNfZXJyb3InLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKSgpO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxuKTtcblxuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX09MRF9QQVRIX05FV19QQVRIID0gWydyZW5hbWUnLCAncmVuYW1lU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1NSQ19ERVNUID0gWydjb3B5RmlsZScsICdjcCcsICdjb3B5RmlsZVN5bmMnLCAnY3BTeW5jJ107XG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfRVhJU1RJTkdfUEFUSF9ORVdfUEFUSCA9IFsnbGluaycsICdsaW5rU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1BSRUZJWCA9IFsnbWtkdGVtcCcsICdta2R0ZW1wU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1RBUkdFVF9QQVRIID0gWydzeW1saW5rJywgJ3N5bWxpbmtTeW5jJ107XG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfUEFUSF9BUkcgPSBbXG4gICdhY2Nlc3MnLFxuICAnYXBwZW5kRmlsZScsXG4gICdjaG1vZCcsXG4gICdjaG93bicsXG4gICdleGlzdHMnLFxuICAnbWtkaXInLFxuICAnbGNob3duJyxcbiAgJ2xzdGF0JyxcbiAgJ2x1dGltZXMnLFxuICAnb3BlbicsXG4gICdvcGVuZGlyJyxcbiAgJ3JlYWRkaXInLFxuICAncmVhZEZpbGUnLFxuICAncmVhZGxpbmsnLFxuICAncmVhbHBhdGgnLFxuICAncmVhbHBhdGgubmF0aXZlJyxcbiAgJ3JtJyxcbiAgJ3JtZGlyJyxcbiAgJ3N0YXQnLFxuICAndHJ1bmNhdGUnLFxuICAndW5saW5rJyxcbiAgJ3V0aW1lcycsXG4gICd3cml0ZUZpbGUnLFxuICAnYWNjZXNzU3luYycsXG4gICdhcHBlbmRGaWxlU3luYycsXG4gICdjaG1vZFN5bmMnLFxuICAnY2hvd25TeW5jJyxcbiAgJ2V4aXN0c1N5bmMnLFxuICAnbGNob3duU3luYycsXG4gICdsc3RhdFN5bmMnLFxuICAnbHV0aW1lc1N5bmMnLFxuICAnb3BlbmRpclN5bmMnLFxuICAnbWtkaXJTeW5jJyxcbiAgJ29wZW5TeW5jJyxcbiAgJ3JlYWRkaXJTeW5jJyxcbiAgJ3JlYWRGaWxlU3luYycsXG4gICdyZWFkbGlua1N5bmMnLFxuICAncmVhbHBhdGhTeW5jJyxcbiAgJ3JlYWxwYXRoU3luYy5uYXRpdmUnLFxuICAncm1kaXJTeW5jJyxcbiAgJ3JtU3luYycsXG4gICdzdGF0U3luYycsXG4gICd0cnVuY2F0ZVN5bmMnLFxuICAndW5saW5rU3luYycsXG4gICd1dGltZXNTeW5jJyxcbiAgJ3dyaXRlRmlsZVN5bmMnLFxuXTtcblxuZXhwb3J0cy5mc0ludGVncmF0aW9uID0gZnNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nclass SentryHttpInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-http', core.VERSION, config);\n  }\n\n  /** @inheritdoc */\n   init() {\n    return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n  }\n\n  /** Get the instrumentation for the http module. */\n   _getHttpInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'http',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /** Get the instrumentation for the https module. */\n   _getHttpsInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'https',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /**\n   * Patch the incoming request function for request isolation.\n   */\n   _getPatchIncomingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (\n      original,\n    ) => {\n      return function incomingRequest( event, ...args) {\n        // Only traces request events\n        if (event !== 'request') {\n          return original.apply(this, [event, ...args]);\n        }\n\n        instrumentation._diag.debug('http instrumentation for incoming request');\n\n        const request = args[0] ;\n\n        const isolationScope = core$1.getIsolationScope().clone();\n\n        // Update the isolation scope, isolate this request\n        isolationScope.setSDKProcessingMetadata({ request });\n\n        const client = core$1.getClient();\n        if (client && client.getOptions().autoSessionTracking) {\n          isolationScope.setRequestSession({ status: 'ok' });\n        }\n\n        // attempt to update the scope's `transactionName` based on the request URL\n        // Ideally, framework instrumentations coming after the HttpInstrumentation\n        // update the transactionName once we get a parameterized route.\n        const httpMethod = (request.method || 'GET').toUpperCase();\n        const httpTarget = utils.stripUrlQueryAndFragment(request.url || '/');\n\n        const bestEffortTransactionName = `${httpMethod} ${httpTarget}`;\n\n        isolationScope.setTransactionName(bestEffortTransactionName);\n\n        return core$1.withIsolationScope(isolationScope, () => {\n          return original.apply(this, [event, ...args]);\n        });\n      };\n    };\n  }\n\n  /**\n   * Patch the outgoing request function for breadcrumbs.\n   */\n   _getPatchOutgoingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (original) => {\n      return function outgoingRequest( ...args) {\n        instrumentation._diag.debug('http instrumentation for outgoing requests');\n\n        // Making a copy to avoid mutating the original args array\n        // We need to access and reconstruct the request options object passed to `ignoreOutgoingRequests`\n        // so that it matches what Otel instrumentation passes to `ignoreOutgoingRequestHook`.\n        // @see https://github.com/open-telemetry/opentelemetry-js/blob/7293e69c1e55ca62e15d0724d22605e61bd58952/experimental/packages/opentelemetry-instrumentation-http/src/http.ts#L756-L789\n        const argsCopy = [...args];\n\n        const options = argsCopy.shift() ;\n\n        const extraOptions =\n          typeof argsCopy[0] === 'object' && (typeof options === 'string' || options instanceof URL)\n            ? (argsCopy.shift() )\n            : undefined;\n\n        const { optionsParsed } = instrumentationHttp.getRequestInfo(options, extraOptions);\n\n        const request = original.apply(this, args) ;\n\n        request.prependListener('response', (response) => {\n          const _breadcrumbs = instrumentation.getConfig().breadcrumbs;\n          const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n          const _ignoreOutgoingRequests = instrumentation.getConfig().ignoreOutgoingRequests;\n          const shouldCreateBreadcrumb =\n            typeof _ignoreOutgoingRequests === 'function'\n              ? !_ignoreOutgoingRequests(getRequestUrl.getRequestUrl(request), optionsParsed)\n              : true;\n\n          if (breadCrumbsEnabled && shouldCreateBreadcrumb) {\n            addRequestBreadcrumb(request, response);\n          }\n        });\n\n        return request;\n      };\n    };\n  }\n\n  /** Path the outgoing get function for breadcrumbs. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n   _getPatchOutgoingGetFunction(clientRequest) {\n    return (_original) => {\n      // Re-implement http.get. This needs to be done (instead of using\n      // getPatchOutgoingRequestFunction to patch it) because we need to\n      // set the trace context header before the returned http.ClientRequest is\n      // ended. The Node.js docs state that the only differences between\n      // request and get are that (1) get defaults to the HTTP GET method and\n      // (2) the returned request object is ended immediately. The former is\n      // already true (at least in supported Node versions up to v10), so we\n      // simply follow the latter. Ref:\n      // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n      // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n      return function outgoingGetRequest(...args) {\n        const req = clientRequest(...args);\n        req.end();\n        return req;\n      };\n    };\n  }\n}\n\n/**\n * This is a minimal version of `wrap` from shimmer:\n * https://github.com/othiym23/shimmer/blob/master/index.js\n *\n * In contrast to the original implementation, this version does not allow to unwrap,\n * and does not make it clear that the method is wrapped.\n * This is necessary because we want to wrap the http module with our own code,\n * while still allowing to use the HttpInstrumentation from OTEL.\n *\n * Without this, if we'd just use `wrap` from shimmer, the OTEL instrumentation would remove our wrapping,\n * because it only allows any module to be wrapped a single time.\n */\nfunction stealthWrap(\n  nodule,\n  name,\n  wrapper,\n) {\n  const original = nodule[name];\n  const wrapped = wrapper(original);\n\n  defineProperty(nodule, name, wrapped);\n  return wrapped;\n}\n\n// Sets a property on an object, preserving its enumerability.\nfunction defineProperty(\n  obj,\n  name,\n  value,\n) {\n  const enumerable = !!obj[name] && Object.prototype.propertyIsEnumerable.call(obj, name);\n\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: enumerable,\n    writable: true,\n    value: value,\n  });\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response.statusCode;\n  const level = utils.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core$1.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = utils.parseUrl(url.toString());\n\n    const data = {\n      url: utils.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation;\n//# sourceMappingURL=SentryHttpInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvaHR0cC9TZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLCtKQUFxQjtBQUMxQyx3QkFBd0IsbUJBQU8sQ0FBQyxnTUFBZ0M7QUFDaEUsNEJBQTRCLG1CQUFPLENBQUMsK01BQXFDO0FBQ3pFLGVBQWUsbUJBQU8sQ0FBQyxpSEFBYztBQUNyQyxjQUFjLG1CQUFPLENBQUMsb0hBQWU7QUFDckMsc0JBQXNCLG1CQUFPLENBQUMsK0lBQThCOztBQUU1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLGtEQUFrRCxTQUFTOztBQUUzRDtBQUNBO0FBQ0EsNkNBQTZDLGNBQWM7QUFDM0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2Q0FBNkMsWUFBWSxFQUFFLFdBQVc7O0FBRXRFOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsZ0JBQWdCOztBQUVoQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsaUJBQWlCLElBQUksS0FBSztBQUNuRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2h0dHAvU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbi5qcz8wOGUzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbkh0dHAgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cCcpO1xuY29uc3QgY29yZSQxID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcbmNvbnN0IGdldFJlcXVlc3RVcmwgPSByZXF1aXJlKCcuLi8uLi91dGlscy9nZXRSZXF1ZXN0VXJsLmpzJyk7XG5cbi8qKlxuICogVGhpcyBjdXN0b20gSFRUUCBpbnN0cnVtZW50YXRpb24gaXMgdXNlZCB0byBpc29sYXRlIGluY29taW5nIHJlcXVlc3RzIGFuZCBhbm5vdGF0ZSB0aGVtIHdpdGggYWRkaXRpb25hbCBpbmZvcm1hdGlvbi5cbiAqIEl0IGRvZXMgbm90IGVtaXQgYW55IHNwYW5zLlxuICpcbiAqIFRoZSByZWFzb24gdGhpcyBpcyBpc29sYXRlZCBmcm9tIHRoZSBPcGVuVGVsZW1ldHJ5IGluc3RydW1lbnRhdGlvbiBpcyB0aGF0IHVzZXJzIG1heSBvdmVyd3JpdGUgdGhpcyxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gU2VudHJ5IG5vdCB3b3JraW5nIGFzIGV4cGVjdGVkLlxuICpcbiAqIEltcG9ydGFudCBub3RlOiBDb250cmFyeSB0byBvdGhlciBPVEVMIGluc3RydW1lbnRhdGlvbiwgdGhpcyBvbmUgY2Fubm90IGJlIHVud3JhcHBlZC5cbiAqIEl0IG9ubHkgZG9lcyBtaW5pbWFsIHRoaW5ncyB0aG91Z2ggYW5kIGRvZXMgbm90IGVtaXQgYW55IHNwYW5zLlxuICpcbiAqIFRoaXMgaXMgaGVhdmlseSBpbnNwaXJlZCAmIGFkYXB0ZWQgZnJvbTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL2Jsb2IvZjhhYjU1OTJkZGVhNWNiYTBhM2IzM2JmOGQ3NGYyNzg3MmMwMzY3Zi9leHBlcmltZW50YWwvcGFja2FnZXMvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24taHR0cC9zcmMvaHR0cC50c1xuICovXG5jbGFzcyBTZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICBzdXBlcignQHNlbnRyeS9pbnN0cnVtZW50YXRpb24taHR0cCcsIGNvcmUuVkVSU0lPTiwgY29uZmlnKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgaW5pdCgpIHtcbiAgICByZXR1cm4gW3RoaXMuX2dldEh0dHBzSW5zdHJ1bWVudGF0aW9uKCksIHRoaXMuX2dldEh0dHBJbnN0cnVtZW50YXRpb24oKV07XG4gIH1cblxuICAvKiogR2V0IHRoZSBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBodHRwIG1vZHVsZS4gKi9cbiAgIF9nZXRIdHRwSW5zdHJ1bWVudGF0aW9uKCkge1xuICAgIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uKFxuICAgICAgJ2h0dHAnLFxuICAgICAgWycqJ10sXG4gICAgICAobW9kdWxlRXhwb3J0cykgPT4ge1xuICAgICAgICAvLyBQYXRjaCBpbmNvbWluZyByZXF1ZXN0cyBmb3IgcmVxdWVzdCBpc29sYXRpb25cbiAgICAgICAgc3RlYWx0aFdyYXAobW9kdWxlRXhwb3J0cy5TZXJ2ZXIucHJvdG90eXBlLCAnZW1pdCcsIHRoaXMuX2dldFBhdGNoSW5jb21pbmdSZXF1ZXN0RnVuY3Rpb24oKSk7XG5cbiAgICAgICAgLy8gUGF0Y2ggb3V0Z29pbmcgcmVxdWVzdHMgZm9yIGJyZWFkY3J1bWJzXG4gICAgICAgIGNvbnN0IHBhdGNoZWRSZXF1ZXN0ID0gc3RlYWx0aFdyYXAobW9kdWxlRXhwb3J0cywgJ3JlcXVlc3QnLCB0aGlzLl9nZXRQYXRjaE91dGdvaW5nUmVxdWVzdEZ1bmN0aW9uKCkpO1xuICAgICAgICBzdGVhbHRoV3JhcChtb2R1bGVFeHBvcnRzLCAnZ2V0JywgdGhpcy5fZ2V0UGF0Y2hPdXRnb2luZ0dldEZ1bmN0aW9uKHBhdGNoZWRSZXF1ZXN0KSk7XG5cbiAgICAgICAgcmV0dXJuIG1vZHVsZUV4cG9ydHM7XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBubyB1bndyYXAgaGVyZVxuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgLyoqIEdldCB0aGUgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgaHR0cHMgbW9kdWxlLiAqL1xuICAgX2dldEh0dHBzSW5zdHJ1bWVudGF0aW9uKCkge1xuICAgIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uKFxuICAgICAgJ2h0dHBzJyxcbiAgICAgIFsnKiddLFxuICAgICAgKG1vZHVsZUV4cG9ydHMpID0+IHtcbiAgICAgICAgLy8gUGF0Y2ggaW5jb21pbmcgcmVxdWVzdHMgZm9yIHJlcXVlc3QgaXNvbGF0aW9uXG4gICAgICAgIHN0ZWFsdGhXcmFwKG1vZHVsZUV4cG9ydHMuU2VydmVyLnByb3RvdHlwZSwgJ2VtaXQnLCB0aGlzLl9nZXRQYXRjaEluY29taW5nUmVxdWVzdEZ1bmN0aW9uKCkpO1xuXG4gICAgICAgIC8vIFBhdGNoIG91dGdvaW5nIHJlcXVlc3RzIGZvciBicmVhZGNydW1ic1xuICAgICAgICBjb25zdCBwYXRjaGVkUmVxdWVzdCA9IHN0ZWFsdGhXcmFwKG1vZHVsZUV4cG9ydHMsICdyZXF1ZXN0JywgdGhpcy5fZ2V0UGF0Y2hPdXRnb2luZ1JlcXVlc3RGdW5jdGlvbigpKTtcbiAgICAgICAgc3RlYWx0aFdyYXAobW9kdWxlRXhwb3J0cywgJ2dldCcsIHRoaXMuX2dldFBhdGNoT3V0Z29pbmdHZXRGdW5jdGlvbihwYXRjaGVkUmVxdWVzdCkpO1xuXG4gICAgICAgIHJldHVybiBtb2R1bGVFeHBvcnRzO1xuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gbm8gdW53cmFwIGhlcmVcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXRjaCB0aGUgaW5jb21pbmcgcmVxdWVzdCBmdW5jdGlvbiBmb3IgcmVxdWVzdCBpc29sYXRpb24uXG4gICAqL1xuICAgX2dldFBhdGNoSW5jb21pbmdSZXF1ZXN0RnVuY3Rpb24oKVxuXG4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgb3JpZ2luYWwsXG4gICAgKSA9PiB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaW5jb21pbmdSZXF1ZXN0KCBldmVudCwgLi4uYXJncykge1xuICAgICAgICAvLyBPbmx5IHRyYWNlcyByZXF1ZXN0IGV2ZW50c1xuICAgICAgICBpZiAoZXZlbnQgIT09ICdyZXF1ZXN0Jykge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBbZXZlbnQsIC4uLmFyZ3NdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluc3RydW1lbnRhdGlvbi5fZGlhZy5kZWJ1ZygnaHR0cCBpbnN0cnVtZW50YXRpb24gZm9yIGluY29taW5nIHJlcXVlc3QnKTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gYXJnc1swXSA7XG5cbiAgICAgICAgY29uc3QgaXNvbGF0aW9uU2NvcGUgPSBjb3JlJDEuZ2V0SXNvbGF0aW9uU2NvcGUoKS5jbG9uZSgpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgaXNvbGF0aW9uIHNjb3BlLCBpc29sYXRlIHRoaXMgcmVxdWVzdFxuICAgICAgICBpc29sYXRpb25TY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoeyByZXF1ZXN0IH0pO1xuXG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGNvcmUkMS5nZXRDbGllbnQoKTtcbiAgICAgICAgaWYgKGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpLmF1dG9TZXNzaW9uVHJhY2tpbmcpIHtcbiAgICAgICAgICBpc29sYXRpb25TY29wZS5zZXRSZXF1ZXN0U2Vzc2lvbih7IHN0YXR1czogJ29rJyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGF0dGVtcHQgdG8gdXBkYXRlIHRoZSBzY29wZSdzIGB0cmFuc2FjdGlvbk5hbWVgIGJhc2VkIG9uIHRoZSByZXF1ZXN0IFVSTFxuICAgICAgICAvLyBJZGVhbGx5LCBmcmFtZXdvcmsgaW5zdHJ1bWVudGF0aW9ucyBjb21pbmcgYWZ0ZXIgdGhlIEh0dHBJbnN0cnVtZW50YXRpb25cbiAgICAgICAgLy8gdXBkYXRlIHRoZSB0cmFuc2FjdGlvbk5hbWUgb25jZSB3ZSBnZXQgYSBwYXJhbWV0ZXJpemVkIHJvdXRlLlxuICAgICAgICBjb25zdCBodHRwTWV0aG9kID0gKHJlcXVlc3QubWV0aG9kIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBjb25zdCBodHRwVGFyZ2V0ID0gdXRpbHMuc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50KHJlcXVlc3QudXJsIHx8ICcvJyk7XG5cbiAgICAgICAgY29uc3QgYmVzdEVmZm9ydFRyYW5zYWN0aW9uTmFtZSA9IGAke2h0dHBNZXRob2R9ICR7aHR0cFRhcmdldH1gO1xuXG4gICAgICAgIGlzb2xhdGlvblNjb3BlLnNldFRyYW5zYWN0aW9uTmFtZShiZXN0RWZmb3J0VHJhbnNhY3Rpb25OYW1lKTtcblxuICAgICAgICByZXR1cm4gY29yZSQxLndpdGhJc29sYXRpb25TY29wZShpc29sYXRpb25TY29wZSwgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBbZXZlbnQsIC4uLmFyZ3NdKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUGF0Y2ggdGhlIG91dGdvaW5nIHJlcXVlc3QgZnVuY3Rpb24gZm9yIGJyZWFkY3J1bWJzLlxuICAgKi9cbiAgIF9nZXRQYXRjaE91dGdvaW5nUmVxdWVzdEZ1bmN0aW9uKClcblxuIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuXG4gICAgcmV0dXJuIChvcmlnaW5hbCkgPT4ge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG91dGdvaW5nUmVxdWVzdCggLi4uYXJncykge1xuICAgICAgICBpbnN0cnVtZW50YXRpb24uX2RpYWcuZGVidWcoJ2h0dHAgaW5zdHJ1bWVudGF0aW9uIGZvciBvdXRnb2luZyByZXF1ZXN0cycpO1xuXG4gICAgICAgIC8vIE1ha2luZyBhIGNvcHkgdG8gYXZvaWQgbXV0YXRpbmcgdGhlIG9yaWdpbmFsIGFyZ3MgYXJyYXlcbiAgICAgICAgLy8gV2UgbmVlZCB0byBhY2Nlc3MgYW5kIHJlY29uc3RydWN0IHRoZSByZXF1ZXN0IG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byBgaWdub3JlT3V0Z29pbmdSZXF1ZXN0c2BcbiAgICAgICAgLy8gc28gdGhhdCBpdCBtYXRjaGVzIHdoYXQgT3RlbCBpbnN0cnVtZW50YXRpb24gcGFzc2VzIHRvIGBpZ25vcmVPdXRnb2luZ1JlcXVlc3RIb29rYC5cbiAgICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy9ibG9iLzcyOTNlNjljMWU1NWNhNjJlMTVkMDcyNGQyMjYwNWU2MWJkNTg5NTIvZXhwZXJpbWVudGFsL3BhY2thZ2VzL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWh0dHAvc3JjL2h0dHAudHMjTDc1Ni1MNzg5XG4gICAgICAgIGNvbnN0IGFyZ3NDb3B5ID0gWy4uLmFyZ3NdO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBhcmdzQ29weS5zaGlmdCgpIDtcblxuICAgICAgICBjb25zdCBleHRyYU9wdGlvbnMgPVxuICAgICAgICAgIHR5cGVvZiBhcmdzQ29weVswXSA9PT0gJ29iamVjdCcgJiYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyB8fCBvcHRpb25zIGluc3RhbmNlb2YgVVJMKVxuICAgICAgICAgICAgPyAoYXJnc0NvcHkuc2hpZnQoKSApXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjb25zdCB7IG9wdGlvbnNQYXJzZWQgfSA9IGluc3RydW1lbnRhdGlvbkh0dHAuZ2V0UmVxdWVzdEluZm8ob3B0aW9ucywgZXh0cmFPcHRpb25zKTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncykgO1xuXG4gICAgICAgIHJlcXVlc3QucHJlcGVuZExpc3RlbmVyKCdyZXNwb25zZScsIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IF9icmVhZGNydW1icyA9IGluc3RydW1lbnRhdGlvbi5nZXRDb25maWcoKS5icmVhZGNydW1icztcbiAgICAgICAgICBjb25zdCBicmVhZENydW1ic0VuYWJsZWQgPSB0eXBlb2YgX2JyZWFkY3J1bWJzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBfYnJlYWRjcnVtYnM7XG5cbiAgICAgICAgICBjb25zdCBfaWdub3JlT3V0Z29pbmdSZXF1ZXN0cyA9IGluc3RydW1lbnRhdGlvbi5nZXRDb25maWcoKS5pZ25vcmVPdXRnb2luZ1JlcXVlc3RzO1xuICAgICAgICAgIGNvbnN0IHNob3VsZENyZWF0ZUJyZWFkY3J1bWIgPVxuICAgICAgICAgICAgdHlwZW9mIF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgID8gIV9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzKGdldFJlcXVlc3RVcmwuZ2V0UmVxdWVzdFVybChyZXF1ZXN0KSwgb3B0aW9uc1BhcnNlZClcbiAgICAgICAgICAgICAgOiB0cnVlO1xuXG4gICAgICAgICAgaWYgKGJyZWFkQ3J1bWJzRW5hYmxlZCAmJiBzaG91bGRDcmVhdGVCcmVhZGNydW1iKSB7XG4gICAgICAgICAgICBhZGRSZXF1ZXN0QnJlYWRjcnVtYihyZXF1ZXN0LCByZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIC8qKiBQYXRoIHRoZSBvdXRnb2luZyBnZXQgZnVuY3Rpb24gZm9yIGJyZWFkY3J1bWJzLiAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgX2dldFBhdGNoT3V0Z29pbmdHZXRGdW5jdGlvbihjbGllbnRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIChfb3JpZ2luYWwpID0+IHtcbiAgICAgIC8vIFJlLWltcGxlbWVudCBodHRwLmdldC4gVGhpcyBuZWVkcyB0byBiZSBkb25lIChpbnN0ZWFkIG9mIHVzaW5nXG4gICAgICAvLyBnZXRQYXRjaE91dGdvaW5nUmVxdWVzdEZ1bmN0aW9uIHRvIHBhdGNoIGl0KSBiZWNhdXNlIHdlIG5lZWQgdG9cbiAgICAgIC8vIHNldCB0aGUgdHJhY2UgY29udGV4dCBoZWFkZXIgYmVmb3JlIHRoZSByZXR1cm5lZCBodHRwLkNsaWVudFJlcXVlc3QgaXNcbiAgICAgIC8vIGVuZGVkLiBUaGUgTm9kZS5qcyBkb2NzIHN0YXRlIHRoYXQgdGhlIG9ubHkgZGlmZmVyZW5jZXMgYmV0d2VlblxuICAgICAgLy8gcmVxdWVzdCBhbmQgZ2V0IGFyZSB0aGF0ICgxKSBnZXQgZGVmYXVsdHMgdG8gdGhlIEhUVFAgR0VUIG1ldGhvZCBhbmRcbiAgICAgIC8vICgyKSB0aGUgcmV0dXJuZWQgcmVxdWVzdCBvYmplY3QgaXMgZW5kZWQgaW1tZWRpYXRlbHkuIFRoZSBmb3JtZXIgaXNcbiAgICAgIC8vIGFscmVhZHkgdHJ1ZSAoYXQgbGVhc3QgaW4gc3VwcG9ydGVkIE5vZGUgdmVyc2lvbnMgdXAgdG8gdjEwKSwgc28gd2VcbiAgICAgIC8vIHNpbXBseSBmb2xsb3cgdGhlIGxhdHRlci4gUmVmOlxuICAgICAgLy8gaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL2h0dHAuaHRtbCNodHRwX2h0dHBfZ2V0X29wdGlvbnNfY2FsbGJhY2tcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVhcGlzL2Nsb3VkLXRyYWNlLW5vZGVqcy9ibG9iL21hc3Rlci9zcmMvaW5zdHJ1bWVudGF0aW9ucy9pbnN0cnVtZW50YXRpb24taHR0cC50cyNMMTk4XG4gICAgICByZXR1cm4gZnVuY3Rpb24gb3V0Z29pbmdHZXRSZXF1ZXN0KC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmVxID0gY2xpZW50UmVxdWVzdCguLi5hcmdzKTtcbiAgICAgICAgcmVxLmVuZCgpO1xuICAgICAgICByZXR1cm4gcmVxO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhIG1pbmltYWwgdmVyc2lvbiBvZiBgd3JhcGAgZnJvbSBzaGltbWVyOlxuICogaHR0cHM6Ly9naXRodWIuY29tL290aGl5bTIzL3NoaW1tZXIvYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAqXG4gKiBJbiBjb250cmFzdCB0byB0aGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgdmVyc2lvbiBkb2VzIG5vdCBhbGxvdyB0byB1bndyYXAsXG4gKiBhbmQgZG9lcyBub3QgbWFrZSBpdCBjbGVhciB0aGF0IHRoZSBtZXRob2QgaXMgd3JhcHBlZC5cbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2Ugd2FudCB0byB3cmFwIHRoZSBodHRwIG1vZHVsZSB3aXRoIG91ciBvd24gY29kZSxcbiAqIHdoaWxlIHN0aWxsIGFsbG93aW5nIHRvIHVzZSB0aGUgSHR0cEluc3RydW1lbnRhdGlvbiBmcm9tIE9URUwuXG4gKlxuICogV2l0aG91dCB0aGlzLCBpZiB3ZSdkIGp1c3QgdXNlIGB3cmFwYCBmcm9tIHNoaW1tZXIsIHRoZSBPVEVMIGluc3RydW1lbnRhdGlvbiB3b3VsZCByZW1vdmUgb3VyIHdyYXBwaW5nLFxuICogYmVjYXVzZSBpdCBvbmx5IGFsbG93cyBhbnkgbW9kdWxlIHRvIGJlIHdyYXBwZWQgYSBzaW5nbGUgdGltZS5cbiAqL1xuZnVuY3Rpb24gc3RlYWx0aFdyYXAoXG4gIG5vZHVsZSxcbiAgbmFtZSxcbiAgd3JhcHBlcixcbikge1xuICBjb25zdCBvcmlnaW5hbCA9IG5vZHVsZVtuYW1lXTtcbiAgY29uc3Qgd3JhcHBlZCA9IHdyYXBwZXIob3JpZ2luYWwpO1xuXG4gIGRlZmluZVByb3BlcnR5KG5vZHVsZSwgbmFtZSwgd3JhcHBlZCk7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG4vLyBTZXRzIGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LCBwcmVzZXJ2aW5nIGl0cyBlbnVtZXJhYmlsaXR5LlxuZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoXG4gIG9iaixcbiAgbmFtZSxcbiAgdmFsdWUsXG4pIHtcbiAgY29uc3QgZW51bWVyYWJsZSA9ICEhb2JqW25hbWVdICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIG5hbWUpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gIH0pO1xufVxuXG4vKiogQWRkIGEgYnJlYWRjcnVtYiBmb3Igb3V0Z29pbmcgcmVxdWVzdHMuICovXG5mdW5jdGlvbiBhZGRSZXF1ZXN0QnJlYWRjcnVtYihyZXF1ZXN0LCByZXNwb25zZSkge1xuICBjb25zdCBkYXRhID0gZ2V0QnJlYWRjcnVtYkRhdGEocmVxdWVzdCk7XG5cbiAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gIGNvbnN0IGxldmVsID0gdXRpbHMuZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlKHN0YXR1c0NvZGUpO1xuXG4gIGNvcmUkMS5hZGRCcmVhZGNydW1iKFxuICAgIHtcbiAgICAgIGNhdGVnb3J5OiAnaHR0cCcsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1c19jb2RlOiBzdGF0dXNDb2RlLFxuICAgICAgICAuLi5kYXRhLFxuICAgICAgfSxcbiAgICAgIHR5cGU6ICdodHRwJyxcbiAgICAgIGxldmVsLFxuICAgIH0sXG4gICAge1xuICAgICAgZXZlbnQ6ICdyZXNwb25zZScsXG4gICAgICByZXF1ZXN0LFxuICAgICAgcmVzcG9uc2UsXG4gICAgfSxcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJlYWRjcnVtYkRhdGEocmVxdWVzdCkge1xuICB0cnkge1xuICAgIC8vIGByZXF1ZXN0Lmhvc3RgIGRvZXMgbm90IGNvbnRhaW4gdGhlIHBvcnQsIGJ1dCB0aGUgaG9zdCBoZWFkZXIgZG9lc1xuICAgIGNvbnN0IGhvc3QgPSByZXF1ZXN0LmdldEhlYWRlcignaG9zdCcpIHx8IHJlcXVlc3QuaG9zdDtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QucGF0aCwgYCR7cmVxdWVzdC5wcm90b2NvbH0vLyR7aG9zdH1gKTtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSB1dGlscy5wYXJzZVVybCh1cmwudG9TdHJpbmcoKSk7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgdXJsOiB1dGlscy5nZXRTYW5pdGl6ZWRVcmxTdHJpbmcocGFyc2VkVXJsKSxcbiAgICAgICdodHRwLm1ldGhvZCc6IHJlcXVlc3QubWV0aG9kIHx8ICdHRVQnLFxuICAgIH07XG5cbiAgICBpZiAocGFyc2VkVXJsLnNlYXJjaCkge1xuICAgICAgZGF0YVsnaHR0cC5xdWVyeSddID0gcGFyc2VkVXJsLnNlYXJjaDtcbiAgICB9XG4gICAgaWYgKHBhcnNlZFVybC5oYXNoKSB7XG4gICAgICBkYXRhWydodHRwLmZyYWdtZW50J10gPSBwYXJzZWRVcmwuaGFzaDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG5leHBvcnRzLlNlbnRyeUh0dHBJbnN0cnVtZW50YXRpb24gPSBTZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./SentryHttpInstrumentation.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = instrument.generateInstrumentOnce\n\n(`${INTEGRATION_NAME}.sentry`, options => {\n  return new SentryHttpInstrumentation.SentryHttpInstrumentation({\n    breadcrumbs: _optionalChain([options, 'optionalAccess', _ => _.breadcrumbs]),\n    ignoreOutgoingRequests: _optionalChain([options, 'optionalAccess', _2 => _2.ignoreOutgoingRequests]),\n  });\n});\n\nconst instrumentOtelHttp = instrument.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation(config);\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch (e) {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/**\n * Instrument the HTTP and HTTPS modules.\n */\nconst instrumentHttp = (options = {}) => {\n  // This is the \"regular\" OTEL instrumentation that emits spans\n  if (options.spans !== false) {\n    const instrumentationConfig = getConfigWithDefaults(options);\n    instrumentOtelHttp(instrumentationConfig);\n  }\n\n  // This is the Sentry-specific instrumentation that isolates requests & creates breadcrumbs\n  // Note that this _has_ to be wrapped after the OTEL instrumentation,\n  // otherwise the isolation will not work correctly\n  instrumentSentryHttp(options);\n};\n\nconst _httpIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHttp(options);\n    },\n  };\n}) ;\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration(_httpIntegration);\n\n/**\n * Determines if @param req is a ClientRequest, meaning the request was created within the express app\n * and it's an outgoing request.\n * Checking for properties instead of using `instanceOf` to avoid importing the request classes.\n */\nfunction _isClientRequest(req) {\n  return 'outputData' in req && 'outputSize' in req && !('client' in req) && !('statusCode' in req);\n}\n\n/**\n * Detects if an incoming request is a prefetch request.\n */\nfunction isKnownPrefetchRequest(req) {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ..._optionalChain([options, 'access', _3 => _3.instrumentation, 'optionalAccess', _4 => _4._experimentalConfig]),\n\n    disableIncomingRequestInstrumentation: options.disableIncomingRequestSpans,\n\n    ignoreOutgoingRequestHook: request => {\n      const url = getRequestUrl.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests && _ignoreOutgoingRequests(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    ignoreIncomingRequestHook: request => {\n      // request.url is the only property that holds any information about the url\n      // it only consists of the URL path and query string (if any)\n      const urlPath = request.url;\n\n      const method = _optionalChain([request, 'access', _5 => _5.method, 'optionalAccess', _6 => _6.toUpperCase, 'call', _7 => _7()]);\n      // We do not capture OPTIONS/HEAD requests as transactions\n      if (method === 'OPTIONS' || method === 'HEAD') {\n        return true;\n      }\n\n      const _ignoreIncomingRequests = options.ignoreIncomingRequests;\n      if (urlPath && _ignoreIncomingRequests && _ignoreIncomingRequests(urlPath, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requireParentforIncomingSpans: false,\n    requestHook: (span, req) => {\n      addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.http');\n      if (!_isClientRequest(req) && isKnownPrefetchRequest(req)) {\n        span.setAttribute('sentry.http.prefetch', true);\n      }\n\n      _optionalChain([options, 'access', _8 => _8.instrumentation, 'optionalAccess', _9 => _9.requestHook, 'optionalCall', _10 => _10(span, req)]);\n    },\n    responseHook: (span, res) => {\n      const client = opentelemetry.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        setImmediate(() => {\n          client['_captureRequestSession']();\n        });\n      }\n\n      _optionalChain([options, 'access', _11 => _11.instrumentation, 'optionalAccess', _12 => _12.responseHook, 'optionalCall', _13 => _13(span, res)]);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      _optionalChain([options, 'access', _14 => _14.instrumentation, 'optionalAccess', _15 => _15.applyCustomAttributesOnSpan, 'optionalCall', _16 => _16(span, request, response)]);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\nexports.instrumentSentryHttp = instrumentSentryHttp;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * The key used to store the local variables on the error object.\n */\nconst LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(\n  maxPerSecond,\n  enable,\n  disable,\n) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || (isAnonymous(a) && isAnonymous(b));\n}\n\nexports.LOCAL_VARIABLES_KEY = LOCAL_VARIABLES_KEY;\nexports.createRateLimiter = createRateLimiter;\nexports.functionNamesMatch = functionNamesMatch;\nexports.isAnonymous = isAnonymous;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQixtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvY29tbW9uLmpzPzZmZWQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBUaGUga2V5IHVzZWQgdG8gc3RvcmUgdGhlIGxvY2FsIHZhcmlhYmxlcyBvbiB0aGUgZXJyb3Igb2JqZWN0LlxuICovXG5jb25zdCBMT0NBTF9WQVJJQUJMRVNfS0VZID0gJ19fU0VOVFJZX0VSUk9SX0xPQ0FMX1ZBUklBQkxFU19fJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmF0ZSBsaW1pdGVyIHRoYXQgd2lsbCBjYWxsIHRoZSBkaXNhYmxlIGNhbGxiYWNrIHdoZW4gdGhlIHJhdGUgbGltaXQgaXMgcmVhY2hlZCBhbmQgdGhlIGVuYWJsZSBjYWxsYmFja1xuICogd2hlbiBhIHRpbWVvdXQgaGFzIG9jY3VycmVkLlxuICogQHBhcmFtIG1heFBlclNlY29uZCBNYXhpbXVtIG51bWJlciBvZiBjYWxscyBwZXIgc2Vjb25kXG4gKiBAcGFyYW0gZW5hYmxlIENhbGxiYWNrIHRvIGVuYWJsZSBjYXB0dXJlXG4gKiBAcGFyYW0gZGlzYWJsZSBDYWxsYmFjayB0byBkaXNhYmxlIGNhcHR1cmVcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdG8gY2FsbCB0byBpbmNyZW1lbnQgdGhlIHJhdGUgbGltaXRlciBjb3VudFxuICovXG5mdW5jdGlvbiBjcmVhdGVSYXRlTGltaXRlcihcbiAgbWF4UGVyU2Vjb25kLFxuICBlbmFibGUsXG4gIGRpc2FibGUsXG4pIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IHJldHJ5U2Vjb25kcyA9IDU7XG4gIGxldCBkaXNhYmxlZFRpbWVvdXQgPSAwO1xuXG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICBpZiAoY291bnQgPiBtYXhQZXJTZWNvbmQpIHtcbiAgICAgICAgcmV0cnlTZWNvbmRzICo9IDI7XG4gICAgICAgIGRpc2FibGUocmV0cnlTZWNvbmRzKTtcblxuICAgICAgICAvLyBDYXAgYXQgb25lIGRheVxuICAgICAgICBpZiAocmV0cnlTZWNvbmRzID4gODY0MDApIHtcbiAgICAgICAgICByZXRyeVNlY29uZHMgPSA4NjQwMDtcbiAgICAgICAgfVxuICAgICAgICBkaXNhYmxlZFRpbWVvdXQgPSByZXRyeVNlY29uZHM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2FibGVkVGltZW91dCAtPSAxO1xuXG4gICAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICAgIGVuYWJsZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvdW50ID0gMDtcbiAgfSwgMTAwMCkudW5yZWYoKTtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvdW50ICs9IDE7XG4gIH07XG59XG5cbi8vIEFkZCB0eXBlcyBmb3IgdGhlIGV4Y2VwdGlvbiBldmVudCBkYXRhXG5cbi8qKiBDb3VsZCB0aGlzIGJlIGFuIGFub255bW91cyBmdW5jdGlvbj8gKi9cbmZ1bmN0aW9uIGlzQW5vbnltb3VzKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUgIT09IHVuZGVmaW5lZCAmJiAobmFtZS5sZW5ndGggPT09IDAgfHwgbmFtZSA9PT0gJz8nIHx8IG5hbWUgPT09ICc8YW5vbnltb3VzPicpO1xufVxuXG4vKiogRG8gdGhlIGZ1bmN0aW9uIG5hbWVzIGFwcGVhciB0byBtYXRjaD8gKi9cbmZ1bmN0aW9uIGZ1bmN0aW9uTmFtZXNNYXRjaChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiIHx8IChpc0Fub255bW91cyhhKSAmJiBpc0Fub255bW91cyhiKSk7XG59XG5cbmV4cG9ydHMuTE9DQUxfVkFSSUFCTEVTX0tFWSA9IExPQ0FMX1ZBUklBQkxFU19LRVk7XG5leHBvcnRzLmNyZWF0ZVJhdGVMaW1pdGVyID0gY3JlYXRlUmF0ZUxpbWl0ZXI7XG5leHBvcnRzLmZ1bmN0aW9uTmFtZXNNYXRjaCA9IGZ1bmN0aW9uTmFtZXNNYXRjaDtcbmV4cG9ydHMuaXNBbm9ueW1vdXMgPSBpc0Fub255bW91cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst localVariablesAsync = __webpack_require__(/*! ./local-variables-async.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\");\nconst localVariablesSync = __webpack_require__(/*! ./local-variables-sync.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\");\n\nconst localVariablesIntegration = (options = {}) => {\n  return nodeVersion.NODE_VERSION.major < 19 ? localVariablesSync.localVariablesSyncIntegration(options) : localVariablesAsync.localVariablesAsyncIntegration(options);\n};\n\nexports.localVariablesIntegration = localVariablesIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsb0JBQW9CLG1CQUFPLENBQUMsK0hBQXNCO0FBQ2xELDRCQUE0QixtQkFBTyxDQUFDLDRLQUE0QjtBQUNoRSwyQkFBMkIsbUJBQU8sQ0FBQywwS0FBMkI7O0FBRTlELCtDQUErQztBQUMvQztBQUNBOztBQUVBLGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcz85ODIwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG5vZGVWZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vbm9kZVZlcnNpb24uanMnKTtcbmNvbnN0IGxvY2FsVmFyaWFibGVzQXN5bmMgPSByZXF1aXJlKCcuL2xvY2FsLXZhcmlhYmxlcy1hc3luYy5qcycpO1xuY29uc3QgbG9jYWxWYXJpYWJsZXNTeW5jID0gcmVxdWlyZSgnLi9sb2NhbC12YXJpYWJsZXMtc3luYy5qcycpO1xuXG5jb25zdCBsb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uID0gKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4gbm9kZVZlcnNpb24uTk9ERV9WRVJTSU9OLm1ham9yIDwgMTkgPyBsb2NhbFZhcmlhYmxlc1N5bmMubG9jYWxWYXJpYWJsZXNTeW5jSW50ZWdyYXRpb24ob3B0aW9ucykgOiBsb2NhbFZhcmlhYmxlc0FzeW5jLmxvY2FsVmFyaWFibGVzQXN5bmNJbnRlZ3JhdGlvbihvcHRpb25zKTtcbn07XG5cbmV4cG9ydHMubG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbiA9IGxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZSA4LjM2LjAgKDEzZTZjOGUpIHwgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdCAqLwppbXBvcnR7U2Vzc2lvbiBhcyBlfWZyb20ibm9kZTppbnNwZWN0b3IvcHJvbWlzZXMiO2ltcG9ydHt3b3JrZXJEYXRhIGFzIHR9ZnJvbSJub2RlOndvcmtlcl90aHJlYWRzIjtjb25zdCBuPSI4LjM2LjAiLG89Z2xvYmFsVGhpcztjb25zdCBpPSJ1bmRlZmluZWQiPT10eXBlb2YgX19TRU5UUllfREVCVUdfX3x8X19TRU5UUllfREVCVUdfXyxhPVsiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIiwibG9nIiwiYXNzZXJ0IiwidHJhY2UiXSxzPXt9O2Z1bmN0aW9uIGMoZSl7aWYoISgiY29uc29sZSJpbiBvKSlyZXR1cm4gZSgpO2NvbnN0IHQ9by5jb25zb2xlLG49e30saT1PYmplY3Qua2V5cyhzKTtpLmZvckVhY2goKGU9Pntjb25zdCBvPXNbZV07bltlXT10W2VdLHRbZV09b30pKTt0cnl7cmV0dXJuIGUoKX1maW5hbGx5e2kuZm9yRWFjaCgoZT0+e3RbZV09bltlXX0pKX19IWZ1bmN0aW9uKGUsdCxpKXtjb25zdCBhPW8scz1hLl9fU0VOVFJZX189YS5fX1NFTlRSWV9ffHx7fSxjPXNbbl09c1tuXXx8e307Y1tlXXx8KGNbZV09dCgpKX0oImxvZ2dlciIsKGZ1bmN0aW9uKCl7bGV0IGU9ITE7Y29uc3QgdD17ZW5hYmxlOigpPT57ZT0hMH0sZGlzYWJsZTooKT0+e2U9ITF9LGlzRW5hYmxlZDooKT0+ZX07cmV0dXJuIGk/YS5mb3JFYWNoKChuPT57dFtuXT0oLi4udCk9PntlJiZjKCgoKT0+e28uY29uc29sZVtuXShgU2VudHJ5IExvZ2dlciBbJHtufV06YCwuLi50KX0pKX19KSk6YS5mb3JFYWNoKChlPT57dFtlXT0oKT0+e319KSksdH0pKTtjb25zdCByPSJfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyI7Y29uc3QgdT10O2Z1bmN0aW9uIGwoLi4uZSl7dS5kZWJ1ZyYmYygoKCk9PmNvbnNvbGUubG9nKCJbTG9jYWxWYXJpYWJsZXMgV29ya2VyXSIsLi4uZSkpKX1hc3luYyBmdW5jdGlvbiBmKGUsdCxuLG8pe2NvbnN0IGk9YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDp0LG93blByb3BlcnRpZXM6ITB9KTtvW25dPWkucmVzdWx0LmZpbHRlcigoZT0+Imxlbmd0aCIhPT1lLm5hbWUmJiFpc05hTihwYXJzZUludChlLm5hbWUsMTApKSkpLnNvcnQoKChlLHQpPT5wYXJzZUludChlLm5hbWUsMTApLXBhcnNlSW50KHQubmFtZSwxMCkpKS5tYXAoKGU9PmUudmFsdWU/LnZhbHVlKSl9YXN5bmMgZnVuY3Rpb24gZyhlLHQsbixvKXtjb25zdCBpPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSk7b1tuXT1pLnJlc3VsdC5tYXAoKGU9PltlLm5hbWUsZS52YWx1ZT8udmFsdWVdKSkucmVkdWNlKCgoZSxbdCxuXSk9PihlW3RdPW4sZSkpLHt9KX1mdW5jdGlvbiBkKGUsdCl7ZS52YWx1ZSYmKCJ2YWx1ZSJpbiBlLnZhbHVlP3ZvaWQgMD09PWUudmFsdWUudmFsdWV8fG51bGw9PT1lLnZhbHVlLnZhbHVlP3RbZS5uYW1lXT1gPCR7ZS52YWx1ZS52YWx1ZX0+YDp0W2UubmFtZV09ZS52YWx1ZS52YWx1ZToiZGVzY3JpcHRpb24iaW4gZS52YWx1ZSYmImZ1bmN0aW9uIiE9PWUudmFsdWUudHlwZT90W2UubmFtZV09YDwke2UudmFsdWUuZGVzY3JpcHRpb259PmA6InVuZGVmaW5lZCI9PT1lLnZhbHVlLnR5cGUmJih0W2UubmFtZV09Ijx1bmRlZmluZWQ+IikpfWFzeW5jIGZ1bmN0aW9uIGIoZSx0KXtjb25zdCBuPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSksbz17fTtmb3IoY29uc3QgdCBvZiBuLnJlc3VsdClpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJBcnJheSI9PT10Py52YWx1ZS5jbGFzc05hbWUpe2NvbnN0IG49dC52YWx1ZS5vYmplY3RJZDthd2FpdCBmKGUsbix0Lm5hbWUsbyl9ZWxzZSBpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJPYmplY3QiPT09dD8udmFsdWU/LmNsYXNzTmFtZSl7Y29uc3Qgbj10LnZhbHVlLm9iamVjdElkO2F3YWl0IGcoZSxuLHQubmFtZSxvKX1lbHNlIHQ/LnZhbHVlJiZkKHQsbyk7cmV0dXJuIG99bGV0IHA7KGFzeW5jIGZ1bmN0aW9uKCl7Y29uc3QgdD1uZXcgZTt0LmNvbm5lY3RUb01haW5UaHJlYWQoKSxsKCJDb25uZWN0ZWQgdG8gbWFpbiB0aHJlYWQiKTtsZXQgbj0hMTt0Lm9uKCJEZWJ1Z2dlci5yZXN1bWVkIiwoKCk9PntuPSExfSkpLHQub24oIkRlYnVnZ2VyLnBhdXNlZCIsKGU9PntuPSEwLGFzeW5jIGZ1bmN0aW9uKGUse3JlYXNvbjp0LGRhdGE6e29iamVjdElkOm59LGNhbGxGcmFtZXM6b30pe2lmKCJleGNlcHRpb24iIT09dCYmInByb21pc2VSZWplY3Rpb24iIT09dClyZXR1cm47aWYocD8uKCksbnVsbD09bilyZXR1cm47Y29uc3QgaT1bXTtmb3IobGV0IHQ9MDt0PG8ubGVuZ3RoO3QrKyl7Y29uc3R7c2NvcGVDaGFpbjpuLGZ1bmN0aW9uTmFtZTphLHRoaXM6c309b1t0XSxjPW4uZmluZCgoZT0+ImxvY2FsIj09PWUudHlwZSkpLHI9Imdsb2JhbCIhPT1zLmNsYXNzTmFtZSYmcy5jbGFzc05hbWU/YCR7cy5jbGFzc05hbWV9LiR7YX1gOmE7aWYodm9pZCAwPT09Yz8ub2JqZWN0Lm9iamVjdElkKWlbdF09e2Z1bmN0aW9uOnJ9O2Vsc2V7Y29uc3Qgbj1hd2FpdCBiKGUsYy5vYmplY3Qub2JqZWN0SWQpO2lbdF09e2Z1bmN0aW9uOnIsdmFyczpufX19YXdhaXQgZS5wb3N0KCJSdW50aW1lLmNhbGxGdW5jdGlvbk9uIix7ZnVuY3Rpb25EZWNsYXJhdGlvbjpgZnVuY3Rpb24oKSB7IHRoaXMuJHtyfSA9IHRoaXMuJHtyfSB8fCAke0pTT04uc3RyaW5naWZ5KGkpfTsgfWAsc2lsZW50OiEwLG9iamVjdElkOm59KSxhd2FpdCBlLnBvc3QoIlJ1bnRpbWUucmVsZWFzZU9iamVjdCIse29iamVjdElkOm59KX0odCxlLnBhcmFtcykudGhlbigoYXN5bmMoKT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSwoYXN5bmMgZT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSl9KSksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5lbmFibGUiKTtjb25zdCBvPSExIT09dS5jYXB0dXJlQWxsRXhjZXB0aW9ucztpZihhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6bz8iYWxsIjoidW5jYXVnaHQifSksbyl7Y29uc3QgZT11Lm1heEV4Y2VwdGlvbnNQZXJTZWNvbmR8fDUwO3A9ZnVuY3Rpb24oZSx0LG4pe2xldCBvPTAsaT01LGE9MDtyZXR1cm4gc2V0SW50ZXJ2YWwoKCgpPT57MD09PWE/bz5lJiYoaSo9MixuKGkpLGk+ODY0MDAmJihpPTg2NDAwKSxhPWkpOihhLT0xLDA9PT1hJiZ0KCkpLG89MH0pLDFlMykudW5yZWYoKSwoKT0+e28rPTF9fShlLChhc3luYygpPT57bCgiUmF0ZS1saW1pdCBsaWZ0ZWQuIiksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJhbGwifSl9KSwoYXN5bmMgZT0+e2woYFJhdGUtbGltaXQgZXhjZWVkZWQuIERpc2FibGluZyBjYXB0dXJpbmcgb2YgY2F1Z2h0IGV4Y2VwdGlvbnMgZm9yICR7ZX0gc2Vjb25kcy5gKSxhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6InVuY2F1Z2h0In0pfSkpfX0pKCkuY2F0Y2goKGU9PntsKCJGYWlsZWQgdG8gc3RhcnQgZGVidWdnZXIiLGUpfSkpLHNldEludGVydmFsKCgoKT0+e30pLDFlNCk7';\n\nfunction log(...args) {\n  utils.logger.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesAsyncIntegration = core.defineIntegration(((\n  integrationOptions = {},\n) => {\n  function addLocalVariablesToException(exception, localVariables) {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _ => _.stacktrace, 'optionalAccess', _2 => _2.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        frameLocalVariables.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frame.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frame.function, frameLocalVariables.function)\n      ) {\n        continue;\n      }\n\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event, hint) {\n    if (\n      hint.originalException &&\n      typeof hint.originalException === 'object' &&\n      common.LOCAL_VARIABLES_KEY in hint.originalException &&\n      Array.isArray(hint.originalException[common.LOCAL_VARIABLES_KEY])\n    ) {\n      for (const exception of _optionalChain([event, 'access', _3 => _3.exception, 'optionalAccess', _4 => _4.values]) || []) {\n        addLocalVariablesToException(exception, hint.originalException[common.LOCAL_VARIABLES_KEY]);\n      }\n\n      hint.originalException[common.LOCAL_VARIABLES_KEY] = undefined;\n    }\n\n    return event;\n  }\n\n  async function startInspector() {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  function startWorker(options) {\n    const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n    });\n\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n\n    worker.once('error', (err) => {\n      log('Worker error', err);\n    });\n\n    worker.once('exit', (code) => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n\n  return {\n    name: 'LocalVariablesAsync',\n    setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n\n      const options = {\n        ...integrationOptions,\n        debug: utils.logger.isEnabled(),\n      };\n\n      startInspector().then(\n        () => {\n          try {\n            startWorker(options);\n          } catch (e) {\n            utils.logger.error('Failed to start worker', e);\n          }\n        },\n        e => {\n          utils.logger.error('Failed to start inspector', e);\n        },\n      );\n    },\n    processEvent(event, hint) {\n      return addLocalVariablesToEvent(event, hint);\n    },\n  };\n}) );\n\nexports.base64WorkerScript = base64WorkerScript;\nexports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;\n//# sourceMappingURL=local-variables-async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\n/** Creates a container for callbacks to be called sequentially */\nfunction createCallbackList(complete) {\n  // A collection of callbacks to be executed last to first\n  let callbacks = [];\n\n  let completedCalled = false;\n  function checkedComplete(result) {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn) {\n    callbacks.push(fn);\n  }\n\n  function next(result) {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch (_) {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession  {\n  /** Throws if inspector API is not available */\n   constructor(  _session) {this._session = _session;\n    //\n  }\n\n   static async create(orDefault) {\n    if (orDefault) {\n      return orDefault;\n    }\n\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n   configureAndConnect(onPause, captureAll) {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n   setPauseOnExceptions(captureAll) {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n   getLocalVariables(objectId, complete) {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList(complete);\n\n      for (const prop of props) {\n        if (_optionalChain([prop, 'optionalAccess', _2 => _2.value, 'optionalAccess', _3 => _3.objectId]) && _optionalChain([prop, 'optionalAccess', _4 => _4.value, 'access', _5 => _5.className]) === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _6 => _6.value, 'optionalAccess', _7 => _7.objectId]) && _optionalChain([prop, 'optionalAccess', _8 => _8.value, 'optionalAccess', _9 => _9.className]) === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _10 => _10.value])) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n   _getProperties(objectId, next) {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n   _unrollArray(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => _optionalChain([v, 'optionalAccess', _11 => _11.value, 'optionalAccess', _12 => _12.value]));\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n   _unrollObject(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map(v => [v.name, _optionalChain([v, 'optionalAccess', _13 => _13.value, 'optionalAccess', _14 => _14.value])])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} );\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n   _unrollOther(prop, vars, next) {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n\n    next(vars);\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = ((\n  options = {},\n  sessionOverride,\n) => {\n  const cachedFrames = new utils.LRUMap(20);\n  let rateLimiter;\n  let shouldProcessEvent = false;\n\n  function addLocalVariablesToException(exception) {\n    const hash = hashFrames(_optionalChain([exception, 'optionalAccess', _15 => _15.stacktrace, 'optionalAccess', _16 => _16.frames]));\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _17 => _17.stacktrace, 'optionalAccess', _18 => _18.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrameVariable.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frameVariable.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frameVariable.function, cachedFrameVariable.function)\n      ) {\n        continue;\n      }\n\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event) {\n    for (const exception of _optionalChain([event, 'optionalAccess', _19 => _19.exception, 'optionalAccess', _20 => _20.values]) || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const client = core.getClient();\n      const clientOptions = _optionalChain([client, 'optionalAccess', _21 => _21.getOptions, 'call', _22 => _22()]);\n\n      if (!_optionalChain([clientOptions, 'optionalAccess', _23 => _23.includeLocalVariables])) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = nodeVersion.NODE_MAJOR < 18;\n\n      if (unsupportedNodeVersion) {\n        utils.logger.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n\n      AsyncSession.create(sessionOverride).then(\n        session => {\n          function handlePaused(\n            stackParser,\n            { params: { reason, data, callFrames } },\n            complete,\n          ) {\n            if (reason !== 'exception' && reason !== 'promiseRejection') {\n              complete();\n              return;\n            }\n\n            _optionalChain([rateLimiter, 'optionalCall', _24 => _24()]);\n\n            // data.description contains the original error.stack\n            const exceptionHash = hashFromStack(stackParser, _optionalChain([data, 'optionalAccess', _25 => _25.description]));\n\n            if (exceptionHash == undefined) {\n              complete();\n              return;\n            }\n\n            const { add, next } = createCallbackList(frames => {\n              cachedFrames.set(exceptionHash, frames);\n              complete();\n            });\n\n            // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n            // For this reason we only attempt to get local variables for the first 5 frames\n            for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const { scopeChain, functionName, this: obj } = callFrames[i];\n\n              const localScope = scopeChain.find(scope => scope.type === 'local');\n\n              // obj.className is undefined in ESM modules\n              const fn =\n                obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n              if (_optionalChain([localScope, 'optionalAccess', _26 => _26.object, 'access', _27 => _27.objectId]) === undefined) {\n                add(frames => {\n                  frames[i] = { function: fn };\n                  next(frames);\n                });\n              } else {\n                const id = localScope.object.objectId;\n                add(frames =>\n                  _optionalChain([session, 'optionalAccess', _28 => _28.getLocalVariables, 'call', _29 => _29(id, vars => {\n                    frames[i] = { function: fn, vars };\n                    next(frames);\n                  })]),\n                );\n              }\n            }\n\n            next([]);\n          }\n\n          const captureAll = options.captureAllExceptions !== false;\n\n          session.configureAndConnect(\n            (ev, complete) =>\n              handlePaused(clientOptions.stackParser, ev , complete),\n            captureAll,\n          );\n\n          if (captureAll) {\n            const max = options.maxExceptionsPerSecond || 50;\n\n            rateLimiter = common.createRateLimiter(\n              max,\n              () => {\n                utils.logger.log('Local variables rate-limit lifted.');\n                _optionalChain([session, 'optionalAccess', _30 => _30.setPauseOnExceptions, 'call', _31 => _31(true)]);\n              },\n              seconds => {\n                utils.logger.log(\n                  `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n                );\n                _optionalChain([session, 'optionalAccess', _32 => _32.setPauseOnExceptions, 'call', _33 => _33(false)]);\n              },\n            );\n          }\n\n          shouldProcessEvent = true;\n        },\n        error => {\n          utils.logger.log('The `LocalVariables` integration failed to start.', error);\n        },\n      );\n    },\n    processEvent(event) {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount() {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame() {\n      return cachedFrames.values()[0];\n    },\n  };\n}) ;\n\n/**\n * Adds local variables to exception frames.\n */\nconst localVariablesSyncIntegration = core.defineIntegration(_localVariablesSyncIntegration);\n\nexports.createCallbackList = createCallbackList;\nexports.hashFrames = hashFrames;\nexports.hashFromStack = hashFromStack;\nexports.localVariablesSyncIntegration = localVariablesSyncIntegration;\n//# sourceMappingURL=local-variables-sync.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js ***!
  \************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nlet moduleCache;\n\nconst INTEGRATION_NAME = 'Modules';\n\nconst _modulesIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n  };\n}) ;\n\n/**\n * Add node modules / packages to the event.\n */\nconst modulesIntegration = core.defineIntegration(_modulesIntegration);\n\n/** Extract information about paths */\nfunction getPaths() {\n  try {\n    return __webpack_require__.c ? Object.keys(__webpack_require__.c ) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules()\n\n {\n  const mainPaths = (__webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].paths) || [];\n  const paths = getPaths();\n  const infos\n\n = {};\n  const seen\n\n = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = node_path.dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = node_path.join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!node_fs.existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(node_fs.readFileSync(pkgfile, 'utf8'))\n\n;\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nexports.modulesIntegration = modulesIntegration;\n//# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGdCQUFnQixtQkFBTyxDQUFDLHdCQUFTO0FBQ2pDLGtCQUFrQixtQkFBTyxDQUFDLDRCQUFXO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQyxpSEFBYzs7QUFFbkM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBYSxlQUFlLHFCQUFhO0FBQ3BELElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQiw0Q0FBWSxJQUFJLDRDQUFZO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21vZHVsZXMuanM/YjRmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBub2RlX2ZzID0gcmVxdWlyZSgnbm9kZTpmcycpO1xuY29uc3Qgbm9kZV9wYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmxldCBtb2R1bGVDYWNoZTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb2R1bGVzJztcblxuY29uc3QgX21vZHVsZXNJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBwcm9jZXNzRXZlbnQoZXZlbnQpIHtcbiAgICAgIGV2ZW50Lm1vZHVsZXMgPSB7XG4gICAgICAgIC4uLmV2ZW50Lm1vZHVsZXMsXG4gICAgICAgIC4uLl9nZXRNb2R1bGVzKCksXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGQgbm9kZSBtb2R1bGVzIC8gcGFja2FnZXMgdG8gdGhlIGV2ZW50LlxuICovXG5jb25zdCBtb2R1bGVzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb2R1bGVzSW50ZWdyYXRpb24pO1xuXG4vKiogRXh0cmFjdCBpbmZvcm1hdGlvbiBhYm91dCBwYXRocyAqL1xuZnVuY3Rpb24gZ2V0UGF0aHMoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUuY2FjaGUgPyBPYmplY3Qua2V5cyhyZXF1aXJlLmNhY2hlICkgOiBbXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG4vKiogRXh0cmFjdCBpbmZvcm1hdGlvbiBhYm91dCBwYWNrYWdlLmpzb24gbW9kdWxlcyAqL1xuZnVuY3Rpb24gY29sbGVjdE1vZHVsZXMoKVxuXG4ge1xuICBjb25zdCBtYWluUGF0aHMgPSAocmVxdWlyZS5tYWluICYmIHJlcXVpcmUubWFpbi5wYXRocykgfHwgW107XG4gIGNvbnN0IHBhdGhzID0gZ2V0UGF0aHMoKTtcbiAgY29uc3QgaW5mb3NcblxuID0ge307XG4gIGNvbnN0IHNlZW5cblxuID0ge307XG5cbiAgcGF0aHMuZm9yRWFjaChwYXRoID0+IHtcbiAgICBsZXQgZGlyID0gcGF0aDtcblxuICAgIC8qKiBUcmF2ZXJzZSBkaXJlY3RvcmllcyB1cHdhcmQgaW4gdGhlIHNlYXJjaCBvZiBwYWNrYWdlLmpzb24gZmlsZSAqL1xuICAgIGNvbnN0IHVwZGlyID0gKCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZyA9IGRpcjtcbiAgICAgIGRpciA9IG5vZGVfcGF0aC5kaXJuYW1lKG9yaWcpO1xuXG4gICAgICBpZiAoIWRpciB8fCBvcmlnID09PSBkaXIgfHwgc2VlbltvcmlnXSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKG1haW5QYXRocy5pbmRleE9mKGRpcikgPCAwKSB7XG4gICAgICAgIHJldHVybiB1cGRpcigpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwa2dmaWxlID0gbm9kZV9wYXRoLmpvaW4ob3JpZywgJ3BhY2thZ2UuanNvbicpO1xuICAgICAgc2VlbltvcmlnXSA9IHRydWU7XG5cbiAgICAgIGlmICghbm9kZV9mcy5leGlzdHNTeW5jKHBrZ2ZpbGUpKSB7XG4gICAgICAgIHJldHVybiB1cGRpcigpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpbmZvID0gSlNPTi5wYXJzZShub2RlX2ZzLnJlYWRGaWxlU3luYyhwa2dmaWxlLCAndXRmOCcpKVxuXG47XG4gICAgICAgIGluZm9zW2luZm8ubmFtZV0gPSBpbmZvLnZlcnNpb247XG4gICAgICB9IGNhdGNoIChfb08pIHtcbiAgICAgICAgLy8gbm8tZW1wdHlcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdXBkaXIoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGluZm9zO1xufVxuXG4vKiogRmV0Y2hlcyB0aGUgbGlzdCBvZiBtb2R1bGVzIGFuZCB0aGUgdmVyc2lvbnMgbG9hZGVkIGJ5IHRoZSBlbnRyeSBmaWxlIGZvciB5b3VyIG5vZGUuanMgYXBwLiAqL1xuZnVuY3Rpb24gX2dldE1vZHVsZXMoKSB7XG4gIGlmICghbW9kdWxlQ2FjaGUpIHtcbiAgICBtb2R1bGVDYWNoZSA9IGNvbGxlY3RNb2R1bGVzKCk7XG4gIH1cbiAgcmV0dXJuIG1vZHVsZUNhY2hlO1xufVxuXG5leHBvcnRzLm1vZHVsZXNJbnRlZ3JhdGlvbiA9IG1vZHVsZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.6.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  const _breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n  const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentation = new instrumentationUndici.UndiciInstrumentation({\n        requireParentforSpans: false,\n        ignoreRequestHook: request => {\n          const url = getAbsoluteUrl(request.origin, request.path);\n          const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n          if (shouldIgnore) {\n            return true;\n          }\n\n          // If tracing is disabled, we still want to propagate traces\n          // So we do that manually here, matching what the instrumentation does otherwise\n          if (!core.hasTracingEnabled()) {\n            const ctx = api.context.active();\n            const addedHeaders = {};\n\n            // We generate a virtual span context from the active one,\n            // Where we attach the URL to the trace state, so the propagator can pick it up\n            const activeSpan = api.trace.getSpan(ctx);\n            const propagationContext = activeSpan\n              ? opentelemetry.getPropagationContextFromSpan(activeSpan)\n              : core.getCurrentScope().getPropagationContext();\n\n            const spanContext = opentelemetry.generateSpanContextForPropagationContext(propagationContext);\n            // We know that in practice we'll _always_ haven a traceState here\n            spanContext.traceState = _optionalChain([spanContext, 'access', _2 => _2.traceState, 'optionalAccess', _3 => _3.set, 'call', _4 => _4('sentry.url', url)]);\n            const ctxWithUrlTraceState = api.trace.setSpanContext(ctx, spanContext);\n\n            api.propagation.inject(ctxWithUrlTraceState, addedHeaders);\n\n            const requestHeaders = request.headers;\n            if (Array.isArray(requestHeaders)) {\n              Object.entries(addedHeaders).forEach(headers => requestHeaders.push(...headers));\n            } else {\n              request.headers += Object.entries(addedHeaders)\n                .map(([k, v]) => `${k}: ${v}\\r\\n`)\n                .join('');\n            }\n\n            // Prevent starting a span for this request\n            return true;\n          }\n\n          return false;\n        },\n        startSpanHook: () => {\n          return {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n          };\n        },\n        responseHook: (_, { request, response }) => {\n          if (_breadcrumbs) {\n            addRequestBreadcrumb(request, response);\n          }\n        },\n      });\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n  const statusCode = response.statusCode;\n  const level = utils.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    const url = new URL(request.path, request.origin);\n    const parsedUrl = utils.parseUrl(url.toString());\n\n    const data = {\n      url: utils.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=node-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nconst onUncaughtExceptionIntegration = core.defineIntegration((options = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    },\n  };\n});\n\n/** Exported only for tests */\nfunction makeErrorHandler(client, options) {\n  const timeout = 2000;\n  let caughtFirstError = false;\n  let caughtSecondError = false;\n  let calledFatalError = false;\n  let firstError;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error) => {\n      let onFatalError = errorhandling.logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError ;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (global.process.listeners('uncaughtException') ).filter(\n        listener => {\n          // There are 3 listeners we ignore:\n          return (\n            // as soon as we're using domains this listener is attached by node itself\n            listener.name !== 'domainUncaughtExceptionClear' &&\n            // the handler we register for tracing\n            listener.tag !== 'sentry_tracingErrorCallback' &&\n            // the handler we register in this integration\n            (listener )._errorHandler !== true\n          );\n        },\n      ).length;\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (core.getClient() === client) {\n          core.captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            debugBuild.DEBUG_BUILD &&\n              utils.logger.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            errorhandling.logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n\nexports.makeErrorHandler = makeErrorHandler;\nexports.onUncaughtExceptionIntegration = onUncaughtExceptionIntegration;\n//# sourceMappingURL=onuncaughtexception.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options = {}) => {\n  const mode = options.mode || 'warn';\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, { mode }));\n    },\n  };\n}) ;\n\n/**\n * Add a global promise rejection handler.\n */\nconst onUnhandledRejectionIntegration = core.defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(\n  client,\n  options,\n) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (core.getClient() !== client) {\n      return;\n    }\n\n    core.captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n\n */\nfunction handleRejection(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason,\n  options,\n) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    utils.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      console.error(reason && reason.stack ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    utils.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    errorhandling.logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexports.makeUnhandledPromiseHandler = makeUnhandledPromiseHandler;\nexports.onUnhandledRejectionIntegration = onUnhandledRejectionIntegration;\n//# sourceMappingURL=onunhandledrejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLG9IQUFlO0FBQ3JDLHNCQUFzQixtQkFBTyxDQUFDLDRJQUEyQjs7QUFFekQ7O0FBRUEsdURBQXVEO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixNQUFNO0FBQzFGLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpQ0FBaUM7QUFDbEQsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzP2M5N2YiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5jb25zdCBlcnJvcmhhbmRsaW5nID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JoYW5kbGluZy5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ09uVW5oYW5kbGVkUmVqZWN0aW9uJztcblxuY29uc3QgX29uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBtb2RlID0gb3B0aW9ucy5tb2RlIHx8ICd3YXJuJztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBnbG9iYWwucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgbWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyKGNsaWVudCwgeyBtb2RlIH0pKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZCBhIGdsb2JhbCBwcm9taXNlIHJlamVjdGlvbiBoYW5kbGVyLlxuICovXG5jb25zdCBvblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbik7XG5cbi8qKlxuICogU2VuZCBhbiBleGNlcHRpb24gd2l0aCByZWFzb25cbiAqIEBwYXJhbSByZWFzb24gc3RyaW5nXG4gKiBAcGFyYW0gcHJvbWlzZSBwcm9taXNlXG4gKlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuXG4gKi9cbmZ1bmN0aW9uIG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcihcbiAgY2xpZW50LFxuICBvcHRpb25zLFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZW5kVW5oYW5kbGVkUHJvbWlzZShyZWFzb24sIHByb21pc2UpIHtcbiAgICBpZiAoY29yZS5nZXRDbGllbnQoKSAhPT0gY2xpZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKHJlYXNvbiwge1xuICAgICAgb3JpZ2luYWxFeGNlcHRpb246IHByb21pc2UsXG4gICAgICBjYXB0dXJlQ29udGV4dDoge1xuICAgICAgICBleHRyYTogeyB1bmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uOiB0cnVlIH0sXG4gICAgICB9LFxuICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICB0eXBlOiAnb251bmhhbmRsZWRyZWplY3Rpb24nLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGhhbmRsZVJlamVjdGlvbihyZWFzb24sIG9wdGlvbnMpO1xuICB9O1xufVxuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGBtb2RlYCBvcHRpb25cblxuICovXG5mdW5jdGlvbiBoYW5kbGVSZWplY3Rpb24oXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJlYXNvbixcbiAgb3B0aW9ucyxcbikge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi83Y2Y2ZjllOTY0YWEwMDc3Mjk2NTM5MWMyM2FjZGE2ZDcxOTcyYTlhL2xpYi9pbnRlcm5hbC9wcm9jZXNzL3Byb21pc2VzLmpzI0wyMzQtTDI0MFxuICBjb25zdCByZWplY3Rpb25XYXJuaW5nID1cbiAgICAnVGhpcyBlcnJvciBvcmlnaW5hdGVkIGVpdGhlciBieSAnICtcbiAgICAndGhyb3dpbmcgaW5zaWRlIG9mIGFuIGFzeW5jIGZ1bmN0aW9uIHdpdGhvdXQgYSBjYXRjaCBibG9jaywgJyArXG4gICAgJ29yIGJ5IHJlamVjdGluZyBhIHByb21pc2Ugd2hpY2ggd2FzIG5vdCBoYW5kbGVkIHdpdGggLmNhdGNoKCkuJyArXG4gICAgJyBUaGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSByZWFzb246JztcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmIChvcHRpb25zLm1vZGUgPT09ICd3YXJuJykge1xuICAgIHV0aWxzLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIGNvbnNvbGUud2FybihyZWplY3Rpb25XYXJuaW5nKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uICYmIHJlYXNvbi5zdGFjayA/IHJlYXNvbi5zdGFjayA6IHJlYXNvbik7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5tb2RlID09PSAnc3RyaWN0Jykge1xuICAgIHV0aWxzLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIGNvbnNvbGUud2FybihyZWplY3Rpb25XYXJuaW5nKTtcbiAgICB9KTtcbiAgICBlcnJvcmhhbmRsaW5nLmxvZ0FuZEV4aXRQcm9jZXNzKHJlYXNvbik7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG59XG5cbmV4cG9ydHMubWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyID0gbWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyO1xuZXhwb3J0cy5vblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9udW5oYW5kbGVkcmVqZWN0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'ProcessAndThreadBreadcrumbs';\n\nconst _processThreadBreadcrumbIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(_client) {\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('child_process').subscribe((event) => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process , options);\n        }\n      });\n\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('worker_threads').subscribe((event) => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker );\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n */\nconst processThreadBreadcrumbIntegration = core.defineIntegration(_processThreadBreadcrumbIntegration);\n\nfunction captureChildProcessEvents(child, options) {\n  let hasExited = false;\n  let data;\n\n  child\n    .on('spawn', () => {\n      // This is Sentry getting macOS OS context\n      if (child.spawnfile === '/usr/bin/sw_vers') {\n        hasExited = true;\n        return;\n      }\n\n      data = { spawnfile: child.spawnfile };\n      if (options.includeChildProcessArgs) {\n        data.spawnargs = child.spawnargs;\n      }\n    })\n    .on('exit', code => {\n      if (!hasExited) {\n        hasExited = true;\n\n        // Only log for non-zero exit codes\n        if (code !== null && code !== 0) {\n          core.addBreadcrumb({\n            category: 'child_process',\n            message: `Child process exited with code '${code}'`,\n            level: 'warning',\n            data,\n          });\n        }\n      }\n    })\n    .on('error', error => {\n      if (!hasExited) {\n        hasExited = true;\n\n        core.addBreadcrumb({\n          category: 'child_process',\n          message: `Child process errored with '${error.message}'`,\n          level: 'error',\n          data,\n        });\n      }\n    });\n}\n\nfunction captureWorkerThreadEvents(worker) {\n  let threadId;\n\n  worker\n    .on('online', () => {\n      threadId = worker.threadId;\n    })\n    .on('error', error => {\n      core.addBreadcrumb({\n        category: 'worker_thread',\n        message: `Worker thread errored with '${error.message}'`,\n        level: 'error',\n        data: { threadId },\n      });\n    });\n}\n\nexports.processThreadBreadcrumbIntegration = processThreadBreadcrumbIntegration;\n//# sourceMappingURL=processThread.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvcHJvY2Vzc1RocmVhZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDJCQUEyQixtQkFBTyxDQUFDLDBEQUEwQjtBQUM3RCxhQUFhLG1CQUFPLENBQUMsaUhBQWM7O0FBRW5DOztBQUVBLDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELEtBQUs7QUFDN0Q7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0RBQWtELGNBQWM7QUFDaEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsY0FBYztBQUM5RDtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUEsMENBQTBDO0FBQzFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvcHJvY2Vzc1RocmVhZC5qcz80YzZjIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGRpYWdub3N0aWNzQ2hhbm5lbCA9IHJlcXVpcmUoJ25vZGU6ZGlhZ25vc3RpY3NfY2hhbm5lbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Byb2Nlc3NBbmRUaHJlYWRCcmVhZGNydW1icyc7XG5cbmNvbnN0IF9wcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKF9jbGllbnQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgZGlhZ25vc3RpY3NDaGFubmVsLmNoYW5uZWwoJ2NoaWxkX3Byb2Nlc3MnKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICdwcm9jZXNzJyBpbiBldmVudCkge1xuICAgICAgICAgIGNhcHR1cmVDaGlsZFByb2Nlc3NFdmVudHMoZXZlbnQucHJvY2VzcyAsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICBkaWFnbm9zdGljc0NoYW5uZWwuY2hhbm5lbCgnd29ya2VyX3RocmVhZHMnKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICd3b3JrZXInIGluIGV2ZW50KSB7XG4gICAgICAgICAgY2FwdHVyZVdvcmtlclRocmVhZEV2ZW50cyhldmVudC53b3JrZXIgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBDYXB0dXJlIGJyZWFkY3J1bWJzIGZvciBjaGlsZCBwcm9jZXNzZXMgYW5kIHdvcmtlciB0aHJlYWRzLlxuICovXG5jb25zdCBwcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcHJvY2Vzc1RocmVhZEJyZWFkY3J1bWJJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGNhcHR1cmVDaGlsZFByb2Nlc3NFdmVudHMoY2hpbGQsIG9wdGlvbnMpIHtcbiAgbGV0IGhhc0V4aXRlZCA9IGZhbHNlO1xuICBsZXQgZGF0YTtcblxuICBjaGlsZFxuICAgIC5vbignc3Bhd24nLCAoKSA9PiB7XG4gICAgICAvLyBUaGlzIGlzIFNlbnRyeSBnZXR0aW5nIG1hY09TIE9TIGNvbnRleHRcbiAgICAgIGlmIChjaGlsZC5zcGF3bmZpbGUgPT09ICcvdXNyL2Jpbi9zd192ZXJzJykge1xuICAgICAgICBoYXNFeGl0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRhdGEgPSB7IHNwYXduZmlsZTogY2hpbGQuc3Bhd25maWxlIH07XG4gICAgICBpZiAob3B0aW9ucy5pbmNsdWRlQ2hpbGRQcm9jZXNzQXJncykge1xuICAgICAgICBkYXRhLnNwYXduYXJncyA9IGNoaWxkLnNwYXduYXJncztcbiAgICAgIH1cbiAgICB9KVxuICAgIC5vbignZXhpdCcsIGNvZGUgPT4ge1xuICAgICAgaWYgKCFoYXNFeGl0ZWQpIHtcbiAgICAgICAgaGFzRXhpdGVkID0gdHJ1ZTtcblxuICAgICAgICAvLyBPbmx5IGxvZyBmb3Igbm9uLXplcm8gZXhpdCBjb2Rlc1xuICAgICAgICBpZiAoY29kZSAhPT0gbnVsbCAmJiBjb2RlICE9PSAwKSB7XG4gICAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY2hpbGRfcHJvY2VzcycsXG4gICAgICAgICAgICBtZXNzYWdlOiBgQ2hpbGQgcHJvY2VzcyBleGl0ZWQgd2l0aCBjb2RlICcke2NvZGV9J2AsXG4gICAgICAgICAgICBsZXZlbDogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIGlmICghaGFzRXhpdGVkKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG5cbiAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICBjYXRlZ29yeTogJ2NoaWxkX3Byb2Nlc3MnLFxuICAgICAgICAgIG1lc3NhZ2U6IGBDaGlsZCBwcm9jZXNzIGVycm9yZWQgd2l0aCAnJHtlcnJvci5tZXNzYWdlfSdgLFxuICAgICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlV29ya2VyVGhyZWFkRXZlbnRzKHdvcmtlcikge1xuICBsZXQgdGhyZWFkSWQ7XG5cbiAgd29ya2VyXG4gICAgLm9uKCdvbmxpbmUnLCAoKSA9PiB7XG4gICAgICB0aHJlYWRJZCA9IHdvcmtlci50aHJlYWRJZDtcbiAgICB9KVxuICAgIC5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICBjYXRlZ29yeTogJ3dvcmtlcl90aHJlYWQnLFxuICAgICAgICBtZXNzYWdlOiBgV29ya2VyIHRocmVhZCBlcnJvcmVkIHdpdGggJyR7ZXJyb3IubWVzc2FnZX0nYCxcbiAgICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICAgIGRhdGE6IHsgdGhyZWFkSWQgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnRzLnByb2Nlc3NUaHJlYWRCcmVhZGNydW1iSW50ZWdyYXRpb24gPSBwcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzc1RocmVhZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (typeof process === 'object' && process.env && \"development\" !== 'development') {}\n      connectToSpotlight(client, _options);\n    },\n  };\n}) ;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nconst spotlightIntegration = core.defineIntegration(_spotlightIntegration);\n\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  client.on('beforeEnvelope', (envelope) => {\n    if (failedRequests > 3) {\n      utils.logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = utils.serializeEnvelope(envelope);\n\n    const request = getNativeHttpRequest();\n    const req = request(\n      {\n        method: 'POST',\n        path: spotlightUrl.pathname,\n        hostname: spotlightUrl.hostname,\n        port: spotlightUrl.port,\n        headers: {\n          'Content-Type': 'application/x-sentry-envelope',\n        },\n      },\n      res => {\n        if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n          // Reset failed requests counter on success\n          failedRequests = 0;\n        }\n        res.on('data', () => {\n          // Drain socket\n        });\n\n        res.on('end', () => {\n          // Drain socket\n        });\n        res.setEncoding('utf8');\n      },\n    );\n\n    req.on('error', () => {\n      failedRequests++;\n      utils.logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\n\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch (e) {\n    utils.logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\n/**\n * We want to get an unpatched http request implementation to avoid capturing our own calls.\n */\nfunction getNativeHttpRequest() {\n  const { request } = http;\n  if (isWrapped(request)) {\n    return request.__sentry_original__;\n  }\n\n  return request;\n}\n\nfunction isWrapped(impl) {\n  return '__sentry_original__' in impl;\n}\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\nexports.getNativeHttpRequest = getNativeHttpRequest;\nexports.spotlightIntegration = spotlightIntegration;\n//# sourceMappingURL=spotlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvc3BvdGxpZ2h0LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyxpSEFBYztBQUNuQyxjQUFjLG1CQUFPLENBQUMsb0hBQWU7O0FBRXJDOztBQUVBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGFBQW9CLG9CQUFvQixFQUV6RjtBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsSUFBSTtBQUMxQixJQUFJO0FBQ0osMERBQTBELElBQUk7QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxVQUFVO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcz80OTdmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdub2RlOmh0dHAnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Nwb3RsaWdodCc7XG5cbmNvbnN0IF9zcG90bGlnaHRJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IF9vcHRpb25zID0ge1xuICAgIHNpZGVjYXJVcmw6IG9wdGlvbnMuc2lkZWNhclVybCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4OTY5L3N0cmVhbScsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICB1dGlscy5sb2dnZXIud2FybihcIltTcG90bGlnaHRdIEl0IHNlZW1zIHlvdSdyZSBub3QgaW4gZGV2IG1vZGUuIERvIHlvdSByZWFsbHkgd2FudCB0byBoYXZlIFNwb3RsaWdodCBlbmFibGVkP1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbm5lY3RUb1Nwb3RsaWdodChjbGllbnQsIF9vcHRpb25zKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIFVzZSB0aGlzIGludGVncmF0aW9uIHRvIHNlbmQgZXJyb3JzIGFuZCB0cmFuc2FjdGlvbnMgdG8gU3BvdGxpZ2h0LlxuICpcbiAqIExlYXJuIG1vcmUgYWJvdXQgc3BvdGxpZ2h0IGF0IGh0dHBzOi8vc3BvdGxpZ2h0anMuY29tXG4gKlxuICogSW1wb3J0YW50OiBUaGlzIGludGVncmF0aW9uIG9ubHkgd29ya3Mgd2l0aCBOb2RlIDE4IG9yIG5ld2VyLlxuICovXG5jb25zdCBzcG90bGlnaHRJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3Nwb3RsaWdodEludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gY29ubmVjdFRvU3BvdGxpZ2h0KGNsaWVudCwgb3B0aW9ucykge1xuICBjb25zdCBzcG90bGlnaHRVcmwgPSBwYXJzZVNpZGVjYXJVcmwob3B0aW9ucy5zaWRlY2FyVXJsKTtcbiAgaWYgKCFzcG90bGlnaHRVcmwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgZmFpbGVkUmVxdWVzdHMgPSAwO1xuXG4gIGNsaWVudC5vbignYmVmb3JlRW52ZWxvcGUnLCAoZW52ZWxvcGUpID0+IHtcbiAgICBpZiAoZmFpbGVkUmVxdWVzdHMgPiAzKSB7XG4gICAgICB1dGlscy5sb2dnZXIud2FybignW1Nwb3RsaWdodF0gRGlzYWJsZWQgU2VudHJ5IC0+IFNwb3RsaWdodCBpbnRlZ3JhdGlvbiBkdWUgdG8gdG9vIG1hbnkgZmFpbGVkIHJlcXVlc3RzJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2VyaWFsaXplZEVudmVsb3BlID0gdXRpbHMuc2VyaWFsaXplRW52ZWxvcGUoZW52ZWxvcGUpO1xuXG4gICAgY29uc3QgcmVxdWVzdCA9IGdldE5hdGl2ZUh0dHBSZXF1ZXN0KCk7XG4gICAgY29uc3QgcmVxID0gcmVxdWVzdChcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHBhdGg6IHNwb3RsaWdodFVybC5wYXRobmFtZSxcbiAgICAgICAgaG9zdG5hbWU6IHNwb3RsaWdodFVybC5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogc3BvdGxpZ2h0VXJsLnBvcnQsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtc2VudHJ5LWVudmVsb3BlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICByZXMgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgJiYgcmVzLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlcy5zdGF0dXNDb2RlIDwgNDAwKSB7XG4gICAgICAgICAgLy8gUmVzZXQgZmFpbGVkIHJlcXVlc3RzIGNvdW50ZXIgb24gc3VjY2Vzc1xuICAgICAgICAgIGZhaWxlZFJlcXVlc3RzID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXMub24oJ2RhdGEnLCAoKSA9PiB7XG4gICAgICAgICAgLy8gRHJhaW4gc29ja2V0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICByZXEub24oJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgZmFpbGVkUmVxdWVzdHMrKztcbiAgICAgIHV0aWxzLmxvZ2dlci53YXJuKCdbU3BvdGxpZ2h0XSBGYWlsZWQgdG8gc2VuZCBlbnZlbG9wZSB0byBTcG90bGlnaHQgU2lkZWNhcicpO1xuICAgIH0pO1xuICAgIHJlcS53cml0ZShzZXJpYWxpemVkRW52ZWxvcGUpO1xuICAgIHJlcS5lbmQoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2lkZWNhclVybCh1cmwpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFVSTChgJHt1cmx9YCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB1dGlscy5sb2dnZXIud2FybihgW1Nwb3RsaWdodF0gSW52YWxpZCBzaWRlY2FyIFVSTDogJHt1cmx9YCk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFdlIHdhbnQgdG8gZ2V0IGFuIHVucGF0Y2hlZCBodHRwIHJlcXVlc3QgaW1wbGVtZW50YXRpb24gdG8gYXZvaWQgY2FwdHVyaW5nIG91ciBvd24gY2FsbHMuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZUh0dHBSZXF1ZXN0KCkge1xuICBjb25zdCB7IHJlcXVlc3QgfSA9IGh0dHA7XG4gIGlmIChpc1dyYXBwZWQocmVxdWVzdCkpIHtcbiAgICByZXR1cm4gcmVxdWVzdC5fX3NlbnRyeV9vcmlnaW5hbF9fO1xuICB9XG5cbiAgcmV0dXJuIHJlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIGlzV3JhcHBlZChpbXBsKSB7XG4gIHJldHVybiAnX19zZW50cnlfb3JpZ2luYWxfXycgaW4gaW1wbDtcbn1cblxuZXhwb3J0cy5JTlRFR1JBVElPTl9OQU1FID0gSU5URUdSQVRJT05fTkFNRTtcbmV4cG9ydHMuZ2V0TmF0aXZlSHR0cFJlcXVlc3QgPSBnZXROYXRpdmVIdHRwUmVxdWVzdDtcbmV4cG9ydHMuc3BvdGxpZ2h0SW50ZWdyYXRpb24gPSBzcG90bGlnaHRJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwb3RsaWdodC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbXFwbGliLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsK0JBQStCLG1CQUFPLENBQUMsd05BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxpSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyx1SUFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsbUpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbXFwbGliLmpzP2ViZDYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQW1xcGxpYiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdBbXFwbGliJztcblxuY29uc3QgY29uZmlnID0ge1xuICBjb25zdW1lRW5kSG9vazogKHNwYW4pID0+IHtcbiAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5jb25zdW1lcicpO1xuICB9LFxuICBwdWJsaXNoSG9vazogKHNwYW4pID0+IHtcbiAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5wdWJsaXNoZXInKTtcbiAgfSxcbn07XG5cbmNvbnN0IGluc3RydW1lbnRBbXFwbGliID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25BbXFwbGliLkFtcXBsaWJJbnN0cnVtZW50YXRpb24oY29uZmlnKSk7XG5cbmNvbnN0IF9hbXFwbGliSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEFtcXBsaWIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG5jb25zdCBhbXFwbGliSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9hbXFwbGliSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmFtcXBsaWJJbnRlZ3JhdGlvbiA9IGFtcXBsaWJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEFtcXBsaWIgPSBpbnN0cnVtZW50QW1xcGxpYjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFtcXBsaWIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err);\n  next(err);\n}\n\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9jb25uZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsK0JBQStCLG1CQUFPLENBQUMsd05BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxpSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyx1SUFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsbUpBQWdDOztBQUVoRTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxLQUFLO0FBQ2pELEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9jb25uZWN0LmpzPzVkOWQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQ29ubmVjdCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0Jyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBlbnN1cmVJc1dyYXBwZWQgPSByZXF1aXJlKCcuLi8uLi91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDb25uZWN0JztcblxuY29uc3QgaW5zdHJ1bWVudENvbm5lY3QgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkNvbm5lY3QuQ29ubmVjdEluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2Nvbm5lY3RJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50Q29ubmVjdCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IGNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2Nvbm5lY3RJbnRlZ3JhdGlvbik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBjb25uZWN0RXJyb3JNaWRkbGV3YXJlKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycik7XG4gIG5leHQoZXJyKTtcbn1cblxuY29uc3Qgc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyID0gKGFwcCkgPT4ge1xuICBhcHAudXNlKGNvbm5lY3RFcnJvck1pZGRsZXdhcmUpO1xuXG4gIC8vIFNhZGx5LCBDb25uZWN0SW5zdHJ1bWVudGF0aW9uIGhhcyBubyByZXF1ZXN0SG9vaywgc28gd2UgbmVlZCB0byBhZGQgdGhlIGF0dHJpYnV0ZXMgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgY29ubmVjdFxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZENvbm5lY3RTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIGVuc3VyZUlzV3JhcHBlZC5lbnN1cmVJc1dyYXBwZWQoYXBwLnVzZSwgJ2Nvbm5lY3QnKTtcbn07XG5cbmZ1bmN0aW9uIGFkZENvbm5lY3RTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YSB8fCB7fTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogbWlkZGxld2FyZSwgcmVxdWVzdF9oYW5kbGVyXG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydjb25uZWN0LnR5cGUnXTtcblxuICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgc2V0LCBvciB3ZSBoYXZlIG5vIGNvbm5lY3Qgc3Bhbiwgbm8gbmVlZCB0byBwcm9jZXNzIGFnYWluLi4uXG4gIGlmIChhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gfHwgIXR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLmNvbm5lY3QnLFxuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBgJHt0eXBlfS5jb25uZWN0YCxcbiAgfSk7XG5cbiAgLy8gQWxzbyB1cGRhdGUgdGhlIG5hbWUsIHdlIGRvbid0IG5lZWQgdG8gXCJtaWRkbGV3YXJlIC0gXCIgcHJlZml4XG4gIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGVzWydjb25uZWN0Lm5hbWUnXTtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIHNwYW4udXBkYXRlTmFtZShuYW1lKTtcbiAgfVxufVxuXG5leHBvcnRzLmNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvbm5lY3RJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudENvbm5lY3QgPSBpbnN0cnVtZW50Q29ubmVjdDtcbmV4cG9ydHMuc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyID0gc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-dataloader@0.12.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentDataloader();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _ => _.description, 'optionalAccess', _2 => _2.startsWith, 'call', _3 => _3('dataloader')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n        }\n\n        // These are all possible dataloader span descriptions\n        // Still checking for the future versions\n        // in case they add support for `clear` and `prime`\n        if (\n          spanJSON.description === 'dataloader.load' ||\n          spanJSON.description === 'dataloader.loadMany' ||\n          spanJSON.description === 'dataloader.batch'\n        ) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n          // TODO: We can try adding `key` to the `data` attribute upstream.\n          // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Dataloader integration\n *\n * Capture tracing data for Dataloader.\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9kYXRhbG9hZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxvSEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxrQ0FBa0MsbUJBQU8sQ0FBQyxpT0FBMkM7QUFDckYsYUFBYSxtQkFBTyxDQUFDLGlIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLHVJQUEwQjs7QUFFckQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2RhdGFsb2FkZXIuanM/OThlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uRGF0YWxvYWRlciA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1kYXRhbG9hZGVyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRGF0YWxvYWRlcic7XG5cbmNvbnN0IGluc3RydW1lbnREYXRhbG9hZGVyID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25EYXRhbG9hZGVyLkRhdGFsb2FkZXJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVxdWlyZVBhcmVudFNwYW46IHRydWUsXG4gICAgfSksXG4pO1xuXG5jb25zdCBfZGF0YWxvYWRlckludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnREYXRhbG9hZGVyKCk7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgY29uc3Qgc3BhbkpTT04gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgIGlmIChfb3B0aW9uYWxDaGFpbihbc3BhbkpTT04sICdhY2Nlc3MnLCBfID0+IF8uZGVzY3JpcHRpb24sICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLnN0YXJ0c1dpdGgsICdjYWxsJywgXzMgPT4gXzMoJ2RhdGFsb2FkZXInKV0pKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5kYXRhbG9hZGVyJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGVzZSBhcmUgYWxsIHBvc3NpYmxlIGRhdGFsb2FkZXIgc3BhbiBkZXNjcmlwdGlvbnNcbiAgICAgICAgLy8gU3RpbGwgY2hlY2tpbmcgZm9yIHRoZSBmdXR1cmUgdmVyc2lvbnNcbiAgICAgICAgLy8gaW4gY2FzZSB0aGV5IGFkZCBzdXBwb3J0IGZvciBgY2xlYXJgIGFuZCBgcHJpbWVgXG4gICAgICAgIGlmIChcbiAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIubG9hZCcgfHxcbiAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIubG9hZE1hbnknIHx8XG4gICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmJhdGNoJ1xuICAgICAgICApIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdjYWNoZS5nZXQnKTtcbiAgICAgICAgICAvLyBUT0RPOiBXZSBjYW4gdHJ5IGFkZGluZyBga2V5YCB0byB0aGUgYGRhdGFgIGF0dHJpYnV0ZSB1cHN0cmVhbS5cbiAgICAgICAgICAvLyBPciBhbHRlcm5hdGl2ZWx5LCB3ZSBjYW4gYWRkIGByZXF1ZXN0SG9va2AgdG8gdGhlIGRhdGFsb2FkZXIgaW5zdHJ1bWVudGF0aW9uLlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIERhdGFsb2FkZXIgaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgRGF0YWxvYWRlci5cbiAqL1xuY29uc3QgZGF0YWxvYWRlckludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZGF0YWxvYWRlckludGVncmF0aW9uKTtcblxuZXhwb3J0cy5kYXRhbG9hZGVySW50ZWdyYXRpb24gPSBkYXRhbG9hZGVySW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnREYXRhbG9hZGVyID0gaW5zdHJ1bWVudERhdGFsb2FkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhbG9hZGVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-express@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Express';\n\nconst instrumentExpress = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.express');\n\n        const attributes = core.spanToJSON(span).data || {};\n        // this is one of: middleware, request_handler, router\n        const type = attributes['express.type'];\n\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n        }\n\n        // Also update the name, we don't need to \"middleware - \" prefix\n        const name = attributes['express.name'];\n        if (typeof name === 'string') {\n          span.updateName(name);\n        }\n      },\n      spanNameHook(info, defaultName) {\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD &&\n            utils.logger.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n          return defaultName;\n        }\n        if (info.layerType === 'request_handler') {\n          // type cast b/c Otel unfortunately types info.request as any :(\n          const req = info.request ;\n          const method = req.method ? req.method.toUpperCase() : 'GET';\n          core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n        }\n        return defaultName;\n      },\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    },\n  };\n}) ;\n\n/**\n * Express integration\n *\n * Capture tracing data for express.\n * In order to capture exceptions, you have to call `setupExpressErrorHandler(app)` before any other middleware and after all controllers.\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    _req,\n    res,\n    next,\n  ) {\n    const shouldHandleError = _optionalChain([options, 'optionalAccess', _ => _.shouldHandleError]) || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const client = core.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        // Check if the `SessionFlusher` is instantiated on the client to go into this branch that marks the\n        // `requestSession.status` as `Crashed`, and this check is necessary because the `SessionFlusher` is only\n        // instantiated when the the`requestHandler` middleware is initialised, which indicates that we should be\n        // running in SessionAggregates mode\n        const isSessionAggregatesMode = client['_sessionFlusher'] !== undefined;\n        if (isSessionAggregatesMode) {\n          const requestSession = core.getIsolationScope().getRequestSession();\n          // If an error bubbles to the `errorHandler`, then this is an unhandled error, and should be reported as a\n          // Crashed session. The `_requestSession.status` is checked to ensure that this error is happening within\n          // the bounds of a request, and if so the status is updated\n          if (requestSession && requestSession.status !== undefined) {\n            requestSession.status = 'crashed';\n          }\n        }\n      }\n\n      const eventId = core.captureException(error, { mechanism: { type: 'middleware', handled: false } });\n      (res ).sentry = eventId;\n      next(error);\n\n      return;\n    }\n\n    next(error);\n  };\n}\n\n/**\n * Setup an error handler for Express.\n * The error handler must be before any other middleware and after all controllers.\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressErrorHandler(options));\n  ensureIsWrapped.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFastify = __webpack_require__(/*! @opentelemetry/instrumentation-fastify */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-fastify@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fastify/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\n// We inline the types we care about here\n\nconst INTEGRATION_NAME = 'Fastify';\n\nconst instrumentFastify = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationFastify.FastifyInstrumentation({\n      requestHook(span) {\n        addFastifySpanAttributes(span);\n      },\n    }),\n);\n\nconst _fastifyIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFastify();\n    },\n  };\n}) ;\n\n/**\n * Express integration\n *\n * Capture tracing data for fastify.\n */\nconst fastifyIntegration = core.defineIntegration(_fastifyIntegration);\n\n/**\n * Setup an error handler for Fastify.\n */\nfunction setupFastifyErrorHandler(fastify) {\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (_request, _reply, error) => {\n        core.captureException(error);\n      });\n\n      // registering `onRequest` hook here instead of using Otel `onRequest` callback b/c `onRequest` hook\n      // is ironically called in the fastify `preHandler` hook which is called later in the lifecycle:\n      // https://fastify.dev/docs/latest/Reference/Lifecycle/\n      fastify.addHook('onRequest', async (request, _reply) => {\n        const reqWithRouteInfo = request ;\n\n        // Taken from Otel Fastify instrumentation:\n        // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts#L94-L96\n        const routeName = _optionalChain([reqWithRouteInfo, 'access', _ => _.routeOptions, 'optionalAccess', _2 => _2.url]) || reqWithRouteInfo.routerPath;\n        const method = _optionalChain([reqWithRouteInfo, 'access', _3 => _3.routeOptions, 'optionalAccess', _4 => _4.method]) || 'GET';\n\n        core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      });\n\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  fastify.register(plugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using fastify\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addFastifySpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(fastify.addHook, 'fastify');\n}\n\nfunction addFastifySpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Also remove `fastify -> ` prefix\n    span.updateName(name.replace(/^fastify -> /, ''));\n  }\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=fastify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxvSEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQyx3TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLGlIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLHVJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyxtSkFBZ0M7O0FBRWhFOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdURBQXVELFFBQVEsRUFBRSxVQUFVO0FBQzNFLE9BQU87O0FBRVA7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5LmpzPzZmMWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkZhc3RpZnkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZmFzdGlmeScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgZW5zdXJlSXNXcmFwcGVkID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzJyk7XG5cbi8vIFdlIGlubGluZSB0aGUgdHlwZXMgd2UgY2FyZSBhYm91dCBoZXJlXG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRmFzdGlmeSc7XG5cbmNvbnN0IGluc3RydW1lbnRGYXN0aWZ5ID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25GYXN0aWZ5LkZhc3RpZnlJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVxdWVzdEhvb2soc3Bhbikge1xuICAgICAgICBhZGRGYXN0aWZ5U3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2Zhc3RpZnlJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50RmFzdGlmeSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogRXhwcmVzcyBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBmYXN0aWZ5LlxuICovXG5jb25zdCBmYXN0aWZ5SW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9mYXN0aWZ5SW50ZWdyYXRpb24pO1xuXG4vKipcbiAqIFNldHVwIGFuIGVycm9yIGhhbmRsZXIgZm9yIEZhc3RpZnkuXG4gKi9cbmZ1bmN0aW9uIHNldHVwRmFzdGlmeUVycm9ySGFuZGxlcihmYXN0aWZ5KSB7XG4gIGNvbnN0IHBsdWdpbiA9IE9iamVjdC5hc3NpZ24oXG4gICAgZnVuY3Rpb24gKGZhc3RpZnksIF9vcHRpb25zLCBkb25lKSB7XG4gICAgICBmYXN0aWZ5LmFkZEhvb2soJ29uRXJyb3InLCBhc3luYyAoX3JlcXVlc3QsIF9yZXBseSwgZXJyb3IpID0+IHtcbiAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyByZWdpc3RlcmluZyBgb25SZXF1ZXN0YCBob29rIGhlcmUgaW5zdGVhZCBvZiB1c2luZyBPdGVsIGBvblJlcXVlc3RgIGNhbGxiYWNrIGIvYyBgb25SZXF1ZXN0YCBob29rXG4gICAgICAvLyBpcyBpcm9uaWNhbGx5IGNhbGxlZCBpbiB0aGUgZmFzdGlmeSBgcHJlSGFuZGxlcmAgaG9vayB3aGljaCBpcyBjYWxsZWQgbGF0ZXIgaW4gdGhlIGxpZmVjeWNsZTpcbiAgICAgIC8vIGh0dHBzOi8vZmFzdGlmeS5kZXYvZG9jcy9sYXRlc3QvUmVmZXJlbmNlL0xpZmVjeWNsZS9cbiAgICAgIGZhc3RpZnkuYWRkSG9vaygnb25SZXF1ZXN0JywgYXN5bmMgKHJlcXVlc3QsIF9yZXBseSkgPT4ge1xuICAgICAgICBjb25zdCByZXFXaXRoUm91dGVJbmZvID0gcmVxdWVzdCA7XG5cbiAgICAgICAgLy8gVGFrZW4gZnJvbSBPdGVsIEZhc3RpZnkgaW5zdHJ1bWVudGF0aW9uOlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvbWFpbi9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGlmeS9zcmMvaW5zdHJ1bWVudGF0aW9uLnRzI0w5NC1MOTZcbiAgICAgICAgY29uc3Qgcm91dGVOYW1lID0gX29wdGlvbmFsQ2hhaW4oW3JlcVdpdGhSb3V0ZUluZm8sICdhY2Nlc3MnLCBfID0+IF8ucm91dGVPcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi51cmxdKSB8fCByZXFXaXRoUm91dGVJbmZvLnJvdXRlclBhdGg7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IF9vcHRpb25hbENoYWluKFtyZXFXaXRoUm91dGVJbmZvLCAnYWNjZXNzJywgXzMgPT4gXzMucm91dGVPcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC5tZXRob2RdKSB8fCAnR0VUJztcblxuICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke21ldGhvZH0gJHtyb3V0ZU5hbWV9YCk7XG4gICAgICB9KTtcblxuICAgICAgZG9uZSgpO1xuICAgIH0sXG4gICAge1xuICAgICAgW1N5bWJvbC5mb3IoJ3NraXAtb3ZlcnJpZGUnKV06IHRydWUsXG4gICAgICBbU3ltYm9sLmZvcignZmFzdGlmeS5kaXNwbGF5LW5hbWUnKV06ICdzZW50cnktZmFzdGlmeS1lcnJvci1oYW5kbGVyJyxcbiAgICB9LFxuICApO1xuXG4gIGZhc3RpZnkucmVnaXN0ZXIocGx1Z2luKTtcblxuICAvLyBTYWRseSwgbWlkZGxld2FyZSBzcGFucyBkbyBub3QgZ28gdGhyb3VnaCBgcmVxdWVzdEhvb2tgLCBzbyB3ZSBoYW5kbGUgdGhvc2UgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgZmFzdGlmeVxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZEZhc3RpZnlTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIGVuc3VyZUlzV3JhcHBlZC5lbnN1cmVJc1dyYXBwZWQoZmFzdGlmeS5hZGRIb29rLCAnZmFzdGlmeScpO1xufVxuXG5mdW5jdGlvbiBhZGRGYXN0aWZ5U3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJlcXVlc3RfaGFuZGxlclxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1snZmFzdGlmeS50eXBlJ107XG5cbiAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IHNldCwgb3Igd2UgaGF2ZSBubyBmYXN0aWZ5IHNwYW4sIG5vIG5lZWQgdG8gcHJvY2VzcyBhZ2Fpbi4uLlxuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5mYXN0aWZ5JyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uZmFzdGlmeWAsXG4gIH0pO1xuXG4gIC8vIEFsc28gdXBkYXRlIHRoZSBuYW1lLCB3ZSBkb24ndCBuZWVkIHRvIFwibWlkZGxld2FyZSAtIFwiIHByZWZpeFxuICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1snZmFzdGlmeS5uYW1lJ10gfHwgYXR0cmlidXRlc1sncGx1Z2luLm5hbWUnXSB8fCBhdHRyaWJ1dGVzWydob29rLm5hbWUnXTtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIC8vIEFsc28gcmVtb3ZlIGBmYXN0aWZ5IC0+IGAgcHJlZml4XG4gICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUucmVwbGFjZSgvXmZhc3RpZnkgLT4gLywgJycpKTtcbiAgfVxufVxuXG5leHBvcnRzLmZhc3RpZnlJbnRlZ3JhdGlvbiA9IGZhc3RpZnlJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEZhc3RpZnkgPSBpbnN0cnVtZW50RmFzdGlmeTtcbmV4cG9ydHMuc2V0dXBGYXN0aWZ5RXJyb3JIYW5kbGVyID0gc2V0dXBGYXN0aWZ5RXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFzdGlmeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.39.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentGenericPool();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n\n        const spanDescription = spanJSON.description;\n\n        // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n        const isGenericPoolSpan =\n          spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n        if (isGenericPoolSpan) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * GenericPool integration\n *\n * Capture tracing data for GenericPool.\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9nZW5lcmljUG9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELG1DQUFtQyxtQkFBTyxDQUFDLHVPQUE2QztBQUN4RixhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCOztBQUVyRDs7QUFFQSxvSkFBb0o7O0FBRXBKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4QjtBQUM5Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dlbmVyaWNQb29sLmpzP2U2Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uR2VuZXJpY1Bvb2wgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ2VuZXJpYy1wb29sJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnR2VuZXJpY1Bvb2wnO1xuXG5jb25zdCBpbnN0cnVtZW50R2VuZXJpY1Bvb2wgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkdlbmVyaWNQb29sLkdlbmVyaWNQb29sSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF9nZW5lcmljUG9vbEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRHZW5lcmljUG9vbCgpO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuXG4gICAgICAgIGNvbnN0IHNwYW5EZXNjcmlwdGlvbiA9IHNwYW5KU09OLmRlc2NyaXB0aW9uO1xuXG4gICAgICAgIC8vIHR5cG8gaW4gZW1pdHRlZCBzcGFuIGZvciB2ZXJzaW9uIDw9IDAuMzguMCBvZiBAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ2VuZXJpYy1wb29sXG4gICAgICAgIGNvbnN0IGlzR2VuZXJpY1Bvb2xTcGFuID1cbiAgICAgICAgICBzcGFuRGVzY3JpcHRpb24gPT09ICdnZW5lcmljLXBvb2wuYXF1aXJlJyB8fCBzcGFuRGVzY3JpcHRpb24gPT09ICdnZW5lcmljLXBvb2wuYWNxdWlyZSc7XG5cbiAgICAgICAgaWYgKGlzR2VuZXJpY1Bvb2xTcGFuKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5nZW5lcmljX3Bvb2wnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBHZW5lcmljUG9vbCBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBHZW5lcmljUG9vbC5cbiAqL1xuY29uc3QgZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2dlbmVyaWNQb29sSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmdlbmVyaWNQb29sSW50ZWdyYXRpb24gPSBnZW5lcmljUG9vbEludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50R2VuZXJpY1Bvb2wgPSBpbnN0cnVtZW50R2VuZXJpY1Bvb2w7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmljUG9vbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  (_options = {}) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return new instrumentationGraphql.GraphQLInstrumentation({\n      ...options,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        const attributes = core.spanToJSON(span).data || {};\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n\n          // We guard to only do this on http.server spans\n\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data || {};\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            existingOperations.push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (existingOperations) {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n        }\n      },\n    });\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * GraphQL integration\n *\n * Capture tracing data for GraphQL.\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9ncmFwaHFsLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsK0JBQStCLG1CQUFPLENBQUMsd05BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxpSEFBYztBQUNuQyxzQkFBc0IsbUJBQU8sQ0FBQyx3T0FBdUI7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLG1KQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxrREFBa0QsZUFBZSxFQUFFLGNBQWMsT0FBTyxjQUFjOztBQUV0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ3JhcGhxbC5qcz84NDliIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkdyYXBocWwgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ3JhcGhxbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnR3JhcGhxbCc7XG5cbmNvbnN0IGluc3RydW1lbnRHcmFwaHFsID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoX29wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBnZXRPcHRpb25zV2l0aERlZmF1bHRzKF9vcHRpb25zKTtcblxuICAgIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uR3JhcGhxbC5HcmFwaFFMSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmdyYXBocWwub3RlbC5ncmFwaHFsJyk7XG5cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhIHx8IHt9O1xuXG4gICAgICAgIC8vIElmIG9wZXJhdGlvbi5uYW1lIGlzIG5vdCBzZXQsIHdlIGZhbGwgYmFjayB0byB1c2Ugb3BlcmF0aW9uLnR5cGUgb25seVxuICAgICAgICBjb25zdCBvcGVyYXRpb25UeXBlID0gYXR0cmlidXRlc1snZ3JhcGhxbC5vcGVyYXRpb24udHlwZSddO1xuICAgICAgICBjb25zdCBvcGVyYXRpb25OYW1lID0gYXR0cmlidXRlc1snZ3JhcGhxbC5vcGVyYXRpb24ubmFtZSddO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnVzZU9wZXJhdGlvbk5hbWVGb3JSb290U3BhbiAmJiBvcGVyYXRpb25UeXBlKSB7XG4gICAgICAgICAgY29uc3Qgcm9vdFNwYW4gPSBjb3JlLmdldFJvb3RTcGFuKHNwYW4pO1xuXG4gICAgICAgICAgLy8gV2UgZ3VhcmQgdG8gb25seSBkbyB0aGlzIG9uIGh0dHAuc2VydmVyIHNwYW5zXG5cbiAgICAgICAgICBjb25zdCByb290U3BhbkF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04ocm9vdFNwYW4pLmRhdGEgfHwge307XG5cbiAgICAgICAgICBjb25zdCBleGlzdGluZ09wZXJhdGlvbnMgPSByb290U3BhbkF0dHJpYnV0ZXNbb3BlbnRlbGVtZXRyeS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OXSB8fCBbXTtcblxuICAgICAgICAgIGNvbnN0IG5ld09wZXJhdGlvbiA9IG9wZXJhdGlvbk5hbWUgPyBgJHtvcGVyYXRpb25UeXBlfSAke29wZXJhdGlvbk5hbWV9YCA6IGAke29wZXJhdGlvblR5cGV9YDtcblxuICAgICAgICAgIC8vIFdlIGtlZXAgdHJhY2sgb2YgZWFjaCBvcGVyYXRpb24gb24gdGhlIHJvb3Qgc3BhblxuICAgICAgICAgIC8vIFRoaXMgY2FuIGVpdGhlciBiZSBhIHN0cmluZywgb3IgYW4gYXJyYXkgb2Ygc3RyaW5ncyAoaWYgdGhlcmUgYXJlIG11bHRpcGxlIG9wZXJhdGlvbnMpXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXhpc3RpbmdPcGVyYXRpb25zKSkge1xuICAgICAgICAgICAgZXhpc3RpbmdPcGVyYXRpb25zLnB1c2gobmV3T3BlcmF0aW9uKTtcbiAgICAgICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT04sIGV4aXN0aW5nT3BlcmF0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChleGlzdGluZ09wZXJhdGlvbnMpIHtcbiAgICAgICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT04sIFtleGlzdGluZ09wZXJhdGlvbnMsIG5ld09wZXJhdGlvbl0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb290U3Bhbi5zZXRBdHRyaWJ1dGUob3BlbnRlbGVtZXRyeS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OLCBuZXdPcGVyYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbik7XG5cbmNvbnN0IF9ncmFwaHFsSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgLy8gV2Ugc2V0IGRlZmF1bHRzIGhlcmUsIHRvbywgYmVjYXVzZSBvdGhlcndpc2Ugd2UnZCB1cGRhdGUgdGhlIGluc3RydW1lbnRhdGlvbiBjb25maWdcbiAgICAgIC8vIHRvIHRoZSBjb25maWcgd2l0aG91dCBkZWZhdWx0cywgYXMgYGdlbmVyYXRlSW5zdHJ1bWVudE9uY2VgIGF1dG9tYXRpY2FsbHkgY2FsbHMgYHNldENvbmZpZyhvcHRpb25zKWBcbiAgICAgIC8vIHdoZW4gYmVpbmcgY2FsbGVkIHRoZSBzZWNvbmQgdGltZVxuICAgICAgaW5zdHJ1bWVudEdyYXBocWwoZ2V0T3B0aW9uc1dpdGhEZWZhdWx0cyhvcHRpb25zKSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBHcmFwaFFMIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIEdyYXBoUUwuXG4gKi9cbmNvbnN0IGdyYXBocWxJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2dyYXBocWxJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGdldE9wdGlvbnNXaXRoRGVmYXVsdHMob3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIGlnbm9yZVJlc29sdmVTcGFuczogdHJ1ZSxcbiAgICBpZ25vcmVUcml2aWFsUmVzb2x2ZVNwYW5zOiB0cnVlLFxuICAgIHVzZU9wZXJhdGlvbk5hbWVGb3JSb290U3BhbjogdHJ1ZSxcbiAgICAuLi5vcHRpb25zLFxuICB9O1xufVxuXG5leHBvcnRzLmdyYXBocWxJbnRlZ3JhdGlvbiA9IGdyYXBocWxJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEdyYXBocWwgPSBpbnN0cnVtZW50R3JhcGhxbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYXBocWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../../utils/ensureIsWrapped.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Hapi integration\n *\n * Capture tracing data for Hapi.\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return event && (event ).error !== undefined;\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route && route.path) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([route, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          utils.logger.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  ensureIsWrapped.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9oYXBpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxvSEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCw0QkFBNEIsbUJBQU8sQ0FBQywrTUFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLGlIQUFjO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQyxvSEFBZTtBQUNyQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSUFBeUI7QUFDcEQsbUJBQW1CLG1CQUFPLENBQUMsMElBQTZCO0FBQ3hELHdCQUF3QixtQkFBTyxDQUFDLHNKQUFtQzs7QUFFbkU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixzQ0FBc0M7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EseURBQXlELHVIQUF1SCxFQUFFLFdBQVc7QUFDN0w7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHO0FBQ0g7O0FBRUEsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9oYXBpL2luZGV4LmpzP2YyOTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkhhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGVuc3VyZUlzV3JhcHBlZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0hhcGknO1xuXG5jb25zdCBpbnN0cnVtZW50SGFwaSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uSGFwaS5IYXBpSW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfaGFwaUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRIYXBpKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBIYXBpIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIEhhcGkuXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEhhcGlFcnJvckhhbmRsZXIoc2VydmVyKWAgYWZ0ZXIgeW91IHNldCB1cCB5b3VyIHNlcnZlci5cbiAqL1xuY29uc3QgaGFwaUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfaGFwaUludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gaXNFcnJvckV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudCAmJiAoZXZlbnQgKS5lcnJvciAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBzZW5kRXJyb3JUb1NlbnRyeShlcnJvckRhdGEpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yRGF0YSwge1xuICAgIG1lY2hhbmlzbToge1xuICAgICAgdHlwZTogJ2hhcGknLFxuICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGZ1bmN0aW9uOiAnaGFwaUVycm9yUGx1Z2luJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59XG5cbmNvbnN0IGhhcGlFcnJvclBsdWdpbiA9IHtcbiAgbmFtZTogJ1NlbnRyeUhhcGlFcnJvclBsdWdpbicsXG4gIHZlcnNpb246IGNvcmUuU0RLX1ZFUlNJT04sXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJlZ2lzdGVyOiBhc3luYyBmdW5jdGlvbiAoc2VydmVyQXJnKSB7XG4gICAgY29uc3Qgc2VydmVyID0gc2VydmVyQXJnIDtcblxuICAgIHNlcnZlci5ldmVudHMub24oeyBuYW1lOiAncmVxdWVzdCcsIGNoYW5uZWxzOiBbJ2Vycm9yJ10gfSwgKHJlcXVlc3QsIGV2ZW50KSA9PiB7XG4gICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpICE9PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gcmVxdWVzdC5yb3V0ZTtcbiAgICAgICAgaWYgKHJvdXRlICYmIHJvdXRlLnBhdGgpIHtcbiAgICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke19vcHRpb25hbENoYWluKFtyb3V0ZSwgJ2FjY2VzcycsIF8gPT4gXy5tZXRob2QsICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLnRvVXBwZXJDYXNlLCAnY2FsbCcsIF8zID0+IF8zKCldKSB8fCAnR0VUJ30gJHtyb3V0ZS5wYXRofWApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICAgICAgdXRpbHMubG9nZ2VyLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBzdGlsbCB0aGUgZGVmYXVsdCBpc29sYXRpb24gc2NvcGUgLSBza2lwcGluZyBzZXR0aW5nIHRyYW5zYWN0aW9uTmFtZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNFcnJvckV2ZW50KGV2ZW50KSkge1xuICAgICAgICBzZW5kRXJyb3JUb1NlbnRyeShldmVudC5lcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG59O1xuXG4vKipcbiAqIEFkZCBhIEhhcGkgcGx1Z2luIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcikge1xuICBhd2FpdCBzZXJ2ZXIucmVnaXN0ZXIoaGFwaUVycm9yUGx1Z2luKTtcblxuICAvLyBTYWRseSwgbWlkZGxld2FyZSBzcGFucyBkbyBub3QgZ28gdGhyb3VnaCBgcmVxdWVzdEhvb2tgLCBzbyB3ZSBoYW5kbGUgdGhvc2UgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgaGFwaVxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgZW5zdXJlSXNXcmFwcGVkLmVuc3VyZUlzV3JhcHBlZChzZXJ2ZXIucmVnaXN0ZXIsICdoYXBpJyk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YSB8fCB7fTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogcm91dGVyLCBwbHVnaW4sIHNlcnZlci5leHRcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2hhcGkudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gSGFwaSBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuaGFwaScsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9LmhhcGlgLFxuICB9KTtcbn1cblxuZXhwb3J0cy5oYXBpRXJyb3JQbHVnaW4gPSBoYXBpRXJyb3JQbHVnaW47XG5leHBvcnRzLmhhcGlJbnRlZ3JhdGlvbiA9IGhhcGlJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEhhcGkgPSBpbnN0cnVtZW50SGFwaTtcbmV4cG9ydHMuc2V0dXBIYXBpRXJyb3JIYW5kbGVyID0gc2V0dXBIYXBpRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index$1 = __webpack_require__(/*! ../http/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./fastify.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index = __webpack_require__(/*! ./hapi/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst nest = __webpack_require__(/*! ./nest/nest.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    fastify.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    // For now, we do not include prisma by default because it has ESM issues\n    // See https://github.com/prisma/prisma/issues/23410\n    // TODO v8: Figure out a better solution for this, maybe only disable in ESM mode?\n    // prismaIntegration(),\n    nest.nestIntegration(),\n    index.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    index$1.instrumentOtelHttp,\n    express.instrumentExpress,\n    connect.instrumentConnect,\n    fastify.instrumentFastify,\n    index.instrumentHapi,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    nest.instrumentNest,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGdCQUFnQixtQkFBTyxDQUFDLHVJQUFrQjtBQUMxQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3SUFBYztBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3SUFBYztBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3SUFBYztBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3SUFBYztBQUN0QyxvQkFBb0IsbUJBQU8sQ0FBQyxnSkFBa0I7QUFDOUMsZ0JBQWdCLG1CQUFPLENBQUMsd0lBQWM7QUFDdEMsY0FBYyxtQkFBTyxDQUFDLDhJQUFpQjtBQUN2QyxjQUFjLG1CQUFPLENBQUMsb0lBQVk7QUFDbEMsWUFBWSxtQkFBTyxDQUFDLGdJQUFVO0FBQzlCLG9CQUFvQixtQkFBTyxDQUFDLGdKQUFrQjtBQUM5QyxjQUFjLG1CQUFPLENBQUMsb0lBQVk7QUFDbEMsaUJBQWlCLG1CQUFPLENBQUMsMElBQWU7QUFDeEMsY0FBYyxtQkFBTyxDQUFDLG9JQUFZO0FBQ2xDLGVBQWUsbUJBQU8sQ0FBQyxzSUFBYTtBQUNwQyxhQUFhLG1CQUFPLENBQUMsNElBQWdCO0FBQ3JDLGlCQUFpQixtQkFBTyxDQUFDLDBJQUFlO0FBQ3hDLGNBQWMsbUJBQU8sQ0FBQyxvSUFBWTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QyxnREFBZ0Q7QUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2luZGV4LmpzPzUxZTgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5kZXgkMSA9IHJlcXVpcmUoJy4uL2h0dHAvaW5kZXguanMnKTtcbmNvbnN0IGFtcXBsaWIgPSByZXF1aXJlKCcuL2FtcXBsaWIuanMnKTtcbmNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKCcuL2Nvbm5lY3QuanMnKTtcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCcuL2V4cHJlc3MuanMnKTtcbmNvbnN0IGZhc3RpZnkgPSByZXF1aXJlKCcuL2Zhc3RpZnkuanMnKTtcbmNvbnN0IGdlbmVyaWNQb29sID0gcmVxdWlyZSgnLi9nZW5lcmljUG9vbC5qcycpO1xuY29uc3QgZ3JhcGhxbCA9IHJlcXVpcmUoJy4vZ3JhcGhxbC5qcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuL2hhcGkvaW5kZXguanMnKTtcbmNvbnN0IGthZmthID0gcmVxdWlyZSgnLi9rYWZrYS5qcycpO1xuY29uc3Qga29hID0gcmVxdWlyZSgnLi9rb2EuanMnKTtcbmNvbnN0IGxydW1lbW9pemVyID0gcmVxdWlyZSgnLi9scnVtZW1vaXplci5qcycpO1xuY29uc3QgbW9uZ28gPSByZXF1aXJlKCcuL21vbmdvLmpzJyk7XG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJy4vbW9uZ29vc2UuanMnKTtcbmNvbnN0IG15c3FsID0gcmVxdWlyZSgnLi9teXNxbC5qcycpO1xuY29uc3QgbXlzcWwyID0gcmVxdWlyZSgnLi9teXNxbDIuanMnKTtcbmNvbnN0IG5lc3QgPSByZXF1aXJlKCcuL25lc3QvbmVzdC5qcycpO1xuY29uc3QgcG9zdGdyZXMgPSByZXF1aXJlKCcuL3Bvc3RncmVzLmpzJyk7XG5jb25zdCByZWRpcyA9IHJlcXVpcmUoJy4vcmVkaXMuanMnKTtcblxuLyoqXG4gKiBXaXRoIE9URUwsIGFsbCBwZXJmb3JtYW5jZSBpbnRlZ3JhdGlvbnMgd2lsbCBiZSBhZGRlZCwgYXMgT1RFTCBvbmx5IGluaXRpYWxpemVzIHRoZW0gd2hlbiB0aGUgcGF0Y2hlZCBwYWNrYWdlIGlzIGFjdHVhbGx5IHJlcXVpcmVkLlxuICovXG5mdW5jdGlvbiBnZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMoKSB7XG4gIHJldHVybiBbXG4gICAgZXhwcmVzcy5leHByZXNzSW50ZWdyYXRpb24oKSxcbiAgICBmYXN0aWZ5LmZhc3RpZnlJbnRlZ3JhdGlvbigpLFxuICAgIGdyYXBocWwuZ3JhcGhxbEludGVncmF0aW9uKCksXG4gICAgbW9uZ28ubW9uZ29JbnRlZ3JhdGlvbigpLFxuICAgIG1vbmdvb3NlLm1vbmdvb3NlSW50ZWdyYXRpb24oKSxcbiAgICBteXNxbC5teXNxbEludGVncmF0aW9uKCksXG4gICAgbXlzcWwyLm15c3FsMkludGVncmF0aW9uKCksXG4gICAgcmVkaXMucmVkaXNJbnRlZ3JhdGlvbigpLFxuICAgIHBvc3RncmVzLnBvc3RncmVzSW50ZWdyYXRpb24oKSxcbiAgICAvLyBGb3Igbm93LCB3ZSBkbyBub3QgaW5jbHVkZSBwcmlzbWEgYnkgZGVmYXVsdCBiZWNhdXNlIGl0IGhhcyBFU00gaXNzdWVzXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hL2lzc3Vlcy8yMzQxMFxuICAgIC8vIFRPRE8gdjg6IEZpZ3VyZSBvdXQgYSBiZXR0ZXIgc29sdXRpb24gZm9yIHRoaXMsIG1heWJlIG9ubHkgZGlzYWJsZSBpbiBFU00gbW9kZT9cbiAgICAvLyBwcmlzbWFJbnRlZ3JhdGlvbigpLFxuICAgIG5lc3QubmVzdEludGVncmF0aW9uKCksXG4gICAgaW5kZXguaGFwaUludGVncmF0aW9uKCksXG4gICAga29hLmtvYUludGVncmF0aW9uKCksXG4gICAgY29ubmVjdC5jb25uZWN0SW50ZWdyYXRpb24oKSxcbiAgICBnZW5lcmljUG9vbC5nZW5lcmljUG9vbEludGVncmF0aW9uKCksXG4gICAga2Fma2Eua2Fma2FJbnRlZ3JhdGlvbigpLFxuICAgIGFtcXBsaWIuYW1xcGxpYkludGVncmF0aW9uKCksXG4gICAgbHJ1bWVtb2l6ZXIubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbigpLFxuICBdO1xufVxuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2YgbWV0aG9kcyB0byBpbnN0cnVtZW50IE9URUwsIHdoZW4gcHJlbG9hZCBpbnN0cnVtZW50YXRpb24uXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBnZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkKCkge1xuICByZXR1cm4gW1xuICAgIGluZGV4JDEuaW5zdHJ1bWVudE90ZWxIdHRwLFxuICAgIGV4cHJlc3MuaW5zdHJ1bWVudEV4cHJlc3MsXG4gICAgY29ubmVjdC5pbnN0cnVtZW50Q29ubmVjdCxcbiAgICBmYXN0aWZ5Lmluc3RydW1lbnRGYXN0aWZ5LFxuICAgIGluZGV4Lmluc3RydW1lbnRIYXBpLFxuICAgIGthZmthLmluc3RydW1lbnRLYWZrYSxcbiAgICBrb2EuaW5zdHJ1bWVudEtvYSxcbiAgICBscnVtZW1vaXplci5pbnN0cnVtZW50THJ1TWVtb2l6ZXIsXG4gICAgbmVzdC5pbnN0cnVtZW50TmVzdCxcbiAgICBtb25nby5pbnN0cnVtZW50TW9uZ28sXG4gICAgbW9uZ29vc2UuaW5zdHJ1bWVudE1vbmdvb3NlLFxuICAgIG15c3FsLmluc3RydW1lbnRNeXNxbCxcbiAgICBteXNxbDIuaW5zdHJ1bWVudE15c3FsMixcbiAgICBwb3N0Z3Jlcy5pbnN0cnVtZW50UG9zdGdyZXMsXG4gICAgaW5kZXguaW5zdHJ1bWVudEhhcGksXG4gICAgZ3JhcGhxbC5pbnN0cnVtZW50R3JhcGhxbCxcbiAgICByZWRpcy5pbnN0cnVtZW50UmVkaXMsXG4gICAgZ2VuZXJpY1Bvb2wuaW5zdHJ1bWVudEdlbmVyaWNQb29sLFxuICAgIGFtcXBsaWIuaW5zdHJ1bWVudEFtcXBsaWIsXG4gIF07XG59XG5cbmV4cG9ydHMuZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zID0gZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zO1xuZXhwb3J0cy5nZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkID0gZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.4.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * KafkaJs integration\n *\n * Capture tracing data for KafkaJs.\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rYWZrYS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLHVOQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLG1KQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rYWZrYS5qcz9lMGU1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkthZmthanMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta2Fma2FqcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnS2Fma2EnO1xuXG5jb25zdCBpbnN0cnVtZW50S2Fma2EgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbkthZmthanMuS2Fma2FKc0luc3RydW1lbnRhdGlvbih7XG4gICAgICBjb25zdW1lckhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmthZmthanMub3RlbC5jb25zdW1lcicpO1xuICAgICAgfSxcbiAgICAgIHByb2R1Y2VySG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8ua2Fma2Fqcy5vdGVsLnByb2R1Y2VyJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2thZmthSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEthZmthKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBLYWZrYUpzIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIEthZmthSnMuXG4gKi9cbmNvbnN0IGthZmthSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9rYWZrYUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50S2Fma2EgPSBpbnN0cnVtZW50S2Fma2E7XG5leHBvcnRzLmthZmthSW50ZWdyYXRpb24gPSBrYWZrYUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2Fma2EuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKoa.KoaInstrumentation({\n      requestHook(span, info) {\n        addKoaSpanAttributes(span);\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && utils.logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const attributes = core.spanToJSON(span).data;\n        const route = attributes && attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = _optionalChain([info, 'optionalAccess', _ => _.context, 'optionalAccess', _2 => _2.request, 'optionalAccess', _3 => _3.method, 'optionalAccess', _4 => _4.toUpperCase, 'call', _5 => _5()]) || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    }),\n);\n\nconst _koaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa();\n    },\n  };\n}) ;\n\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error);\n      throw error;\n    }\n  });\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'koa');\n};\n\nfunction addKoaSpanAttributes(span) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.http.otel.koa');\n\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, router\n  const type = attributes['koa.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n  }\n\n  // Also update the name\n  const name = attributes['koa.name'];\n  if (typeof name === 'string') {\n    // Somehow, name is sometimes `''` for middleware spans\n    // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n    span.updateName(name || '< unknown >');\n  }\n}\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rb2EuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLG9IQUFlOztBQUUzQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDJCQUEyQixtQkFBTyxDQUFDLDRNQUFvQztBQUN2RSw0QkFBNEIsbUJBQU8sQ0FBQyxzTEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLGlIQUFjO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQyxvSEFBZTtBQUNyQyxtQkFBbUIsbUJBQU8sQ0FBQywrSEFBc0I7QUFDakQsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLG1KQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLEVBQUUsTUFBTTtBQUN6RTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNERBQTRELEtBQUs7QUFDakU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIsc0JBQXNCO0FBQ3RCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva29hLmpzP2QyMTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbktvYSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EnKTtcbmNvbnN0IHNlbWFudGljQ29udmVudGlvbnMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGVuc3VyZUlzV3JhcHBlZCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0tvYSc7XG5cbmNvbnN0IGluc3RydW1lbnRLb2EgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbktvYS5Lb2FJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVxdWVzdEhvb2soc3BhbiwgaW5mbykge1xuICAgICAgICBhZGRLb2FTcGFuQXR0cmlidXRlcyhzcGFuKTtcblxuICAgICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpID09PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiB1dGlscy5sb2dnZXIud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlIC0gc2tpcHBpbmcgc2V0dGluZyB0cmFuc2FjdGlvbk5hbWUnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhO1xuICAgICAgICBjb25zdCByb3V0ZSA9IGF0dHJpYnV0ZXMgJiYgYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9ST1VURV07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgY29uc3QgbWV0aG9kID0gX29wdGlvbmFsQ2hhaW4oW2luZm8sICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5jb250ZXh0LCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5yZXF1ZXN0LCAnb3B0aW9uYWxBY2Nlc3MnLCBfMyA9PiBfMy5tZXRob2QsICdvcHRpb25hbEFjY2VzcycsIF80ID0+IF80LnRvVXBwZXJDYXNlLCAnY2FsbCcsIF81ID0+IF81KCldKSB8fCAnR0VUJztcbiAgICAgICAgaWYgKHJvdXRlKSB7XG4gICAgICAgICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFRyYW5zYWN0aW9uTmFtZShgJHttZXRob2R9ICR7cm91dGV9YCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfa29hSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEtvYSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IGtvYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa29hSW50ZWdyYXRpb24pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3Qgc2V0dXBLb2FFcnJvckhhbmRsZXIgPSAoYXBwKSA9PiB7XG4gIGFwcC51c2UoYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBuZXh0KCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0pO1xuXG4gIGVuc3VyZUlzV3JhcHBlZC5lbnN1cmVJc1dyYXBwZWQoYXBwLnVzZSwgJ2tvYScpO1xufTtcblxuZnVuY3Rpb24gYWRkS29hU3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5odHRwLm90ZWwua29hJyk7XG5cbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhIHx8IHt9O1xuXG4gIC8vIHRoaXMgaXMgb25lIG9mOiBtaWRkbGV3YXJlLCByb3V0ZXJcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2tvYS50eXBlJ107XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsIGAke3R5cGV9LmtvYWApO1xuICB9XG5cbiAgLy8gQWxzbyB1cGRhdGUgdGhlIG5hbWVcbiAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZXNbJ2tvYS5uYW1lJ107XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBTb21laG93LCBuYW1lIGlzIHNvbWV0aW1lcyBgJydgIGZvciBtaWRkbGV3YXJlIHNwYW5zXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2lzc3Vlcy8yMjIwXG4gICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUgfHwgJzwgdW5rbm93biA+Jyk7XG4gIH1cbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50S29hID0gaW5zdHJ1bWVudEtvYTtcbmV4cG9ydHMua29hSW50ZWdyYXRpb24gPSBrb2FJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0dXBLb2FFcnJvckhhbmRsZXIgPSBzZXR1cEtvYUVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtvYS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * LruMemoizer integration\n *\n * Propagate traces through LruMemoizer.\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9scnVtZW1vaXplci5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELG1DQUFtQyxtQkFBTyxDQUFDLHVPQUE2QztBQUN4RixhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCOztBQUVyRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkJBQTZCO0FBQzdCLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanM/OTNlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25McnVNZW1vaXplciA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdMcnVNZW1vaXplcic7XG5cbmNvbnN0IGluc3RydW1lbnRMcnVNZW1vaXplciA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uTHJ1TWVtb2l6ZXIuTHJ1TWVtb2l6ZXJJbnN0cnVtZW50YXRpb24oKSk7XG5cbmNvbnN0IF9scnVNZW1vaXplckludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRMcnVNZW1vaXplcigpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogTHJ1TWVtb2l6ZXIgaW50ZWdyYXRpb25cbiAqXG4gKiBQcm9wYWdhdGUgdHJhY2VzIHRocm91Z2ggTHJ1TWVtb2l6ZXIuXG4gKi9cbmNvbnN0IGxydU1lbW9pemVySW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9scnVNZW1vaXplckludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50THJ1TWVtb2l6ZXIgPSBpbnN0cnVtZW50THJ1TWVtb2l6ZXI7XG5leHBvcnRzLmxydU1lbW9pemVySW50ZWdyYXRpb24gPSBscnVNZW1vaXplckludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHJ1bWVtb2l6ZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.47.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * MongoDB integration\n *\n * Capture tracing data for MongoDB.\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nby5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLHdOQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLG1KQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanM/YjNjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Nb25nb2RiID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvZGInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vbmdvJztcblxuY29uc3QgaW5zdHJ1bWVudE1vbmdvID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25Nb25nb2RiLk1vbmdvREJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm1vbmdvJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX21vbmdvSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE1vbmdvKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBNb25nb0RCIGludGVncmF0aW9uXG4gKlxuICogQ2FwdHVyZSB0cmFjaW5nIGRhdGEgZm9yIE1vbmdvREIuXG4gKi9cbmNvbnN0IG1vbmdvSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ28gPSBpbnN0cnVtZW50TW9uZ287XG5leHBvcnRzLm1vbmdvSW50ZWdyYXRpb24gPSBtb25nb0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ28uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Mongoose integration\n *\n * Capture tracing data for Mongoose.\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nb29zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGdDQUFnQyxtQkFBTyxDQUFDLDJOQUF5QztBQUNqRixhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLG1KQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanM/N2VmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Nb25nb29zZSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb29zZScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTW9uZ29vc2UnO1xuXG5jb25zdCBpbnN0cnVtZW50TW9uZ29vc2UgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk1vbmdvb3NlLk1vbmdvb3NlSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nb29zZScpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9tb25nb29zZUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nb29zZSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogTW9uZ29vc2UgaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgTW9uZ29vc2UuXG4gKi9cbmNvbnN0IG1vbmdvb3NlSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb29zZUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ29vc2UgPSBpbnN0cnVtZW50TW9uZ29vc2U7XG5leHBvcnRzLm1vbmdvb3NlSW50ZWdyYXRpb24gPSBtb25nb29zZUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29vc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * MySQL integration\n *\n * Capture tracing data for mysql.\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9teXNxbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDZCQUE2QixtQkFBTyxDQUFDLGtOQUFzQztBQUMzRSxhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCOztBQUVyRDs7QUFFQSxrSUFBa0k7O0FBRWxJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9teXNxbC5qcz84ZjBiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk15c3FsID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTXlzcWwnO1xuXG5jb25zdCBpbnN0cnVtZW50TXlzcWwgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbk15c3FsLk15U1FMSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF9teXNxbEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNeXNxbCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogTXlTUUwgaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgbXlzcWwuXG4gKi9cbmNvbnN0IG15c3FsSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9teXNxbEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TXlzcWwgPSBpbnN0cnVtZW50TXlzcWw7XG5leHBvcnRzLm15c3FsSW50ZWdyYXRpb24gPSBteXNxbEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * MySQL2 integration\n *\n * Capture tracing data for mysql2\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9teXNxbDIuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCw4QkFBOEIsbUJBQU8sQ0FBQyxxTkFBdUM7QUFDN0UsYUFBYSxtQkFBTyxDQUFDLGlIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLHVJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyxtSkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsMi5qcz8wZWE1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk15c3FsMiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbDInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ015c3FsMic7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbDIgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk15c3FsMi5NeVNRTDJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm15c3FsMicpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9teXNxbDJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TXlzcWwyKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBNeVNRTDIgaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgbXlzcWwyXG4gKi9cbmNvbnN0IG15c3FsMkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbXlzcWwySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRNeXNxbDIgPSBpbnN0cnVtZW50TXlzcWwyO1xuZXhwb3J0cy5teXNxbDJJbnRlZ3JhdGlvbiA9IG15c3FsMkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst sentryPatched = 'sentryPatched';\n\n/**\n * Helper checking if a concrete target class is already patched.\n *\n * We already guard duplicate patching with isWrapped. However, isWrapped checks whether a file has been patched, whereas we use this check for concrete target classes.\n * This check might not be necessary, but better to play it safe.\n */\nfunction isPatched(target) {\n  if (target.sentryPatched) {\n    return true;\n  }\n\n  utils.addNonEnumerableProperty(target, sentryPatched, true);\n  return false;\n}\n\n/**\n * Returns span options for nest middleware spans.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction getMiddlewareSpanOptions(target, name = undefined) {\n  const span_name = _nullishCoalesce(name, () => ( target.name)); // fallback to class name if no name is provided\n\n  return {\n    name: span_name,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'middleware.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.middleware.nestjs',\n    },\n  };\n}\n\n/**\n * Adds instrumentation to a js observable and attaches the span to an active parent span.\n */\nfunction instrumentObservable(observable, activeSpan) {\n  if (activeSpan) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    observable.subscribe = new Proxy(observable.subscribe, {\n      apply: (originalSubscribe, thisArgSubscribe, argsSubscribe) => {\n        return core.withActiveSpan(activeSpan, () => {\n          const subscription = originalSubscribe.apply(thisArgSubscribe, argsSubscribe);\n          subscription.add(() => activeSpan.end());\n          return subscription;\n        });\n      },\n    });\n  }\n}\n\n/**\n * Proxies the next() call in a nestjs middleware to end the span when it is called.\n */\nfunction getNextProxy(next, span, prevSpan) {\n  return new Proxy(next, {\n    apply: (originalNext, thisArgNext, argsNext) => {\n      span.end();\n\n      if (prevSpan) {\n        return core.withActiveSpan(prevSpan, () => {\n          return Reflect.apply(originalNext, thisArgNext, argsNext);\n        });\n      } else {\n        return Reflect.apply(originalNext, thisArgNext, argsNext);\n      }\n    },\n  });\n}\n\nexports.getMiddlewareSpanOptions = getMiddlewareSpanOptions;\nexports.getNextProxy = getNextProxy;\nexports.instrumentObservable = instrumentObservable;\nexports.isPatched = isPatched;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9uZXN0L2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLG9IQUFlOztBQUUzQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyxpSEFBYztBQUNuQyxjQUFjLG1CQUFPLENBQUMsb0hBQWU7O0FBRXJDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLGdDQUFnQztBQUNoQyxvQkFBb0I7QUFDcEIsNEJBQTRCO0FBQzVCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9oZWxwZXJzLmpzPzE2ZjIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX251bGxpc2hDb2FsZXNjZVxufSA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbmNvbnN0IHNlbnRyeVBhdGNoZWQgPSAnc2VudHJ5UGF0Y2hlZCc7XG5cbi8qKlxuICogSGVscGVyIGNoZWNraW5nIGlmIGEgY29uY3JldGUgdGFyZ2V0IGNsYXNzIGlzIGFscmVhZHkgcGF0Y2hlZC5cbiAqXG4gKiBXZSBhbHJlYWR5IGd1YXJkIGR1cGxpY2F0ZSBwYXRjaGluZyB3aXRoIGlzV3JhcHBlZC4gSG93ZXZlciwgaXNXcmFwcGVkIGNoZWNrcyB3aGV0aGVyIGEgZmlsZSBoYXMgYmVlbiBwYXRjaGVkLCB3aGVyZWFzIHdlIHVzZSB0aGlzIGNoZWNrIGZvciBjb25jcmV0ZSB0YXJnZXQgY2xhc3Nlcy5cbiAqIFRoaXMgY2hlY2sgbWlnaHQgbm90IGJlIG5lY2Vzc2FyeSwgYnV0IGJldHRlciB0byBwbGF5IGl0IHNhZmUuXG4gKi9cbmZ1bmN0aW9uIGlzUGF0Y2hlZCh0YXJnZXQpIHtcbiAgaWYgKHRhcmdldC5zZW50cnlQYXRjaGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB1dGlscy5hZGROb25FbnVtZXJhYmxlUHJvcGVydHkodGFyZ2V0LCBzZW50cnlQYXRjaGVkLCB0cnVlKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgc3BhbiBvcHRpb25zIGZvciBuZXN0IG1pZGRsZXdhcmUgc3BhbnMuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGVcbmZ1bmN0aW9uIGdldE1pZGRsZXdhcmVTcGFuT3B0aW9ucyh0YXJnZXQsIG5hbWUgPSB1bmRlZmluZWQpIHtcbiAgY29uc3Qgc3Bhbl9uYW1lID0gX251bGxpc2hDb2FsZXNjZShuYW1lLCAoKSA9PiAoIHRhcmdldC5uYW1lKSk7IC8vIGZhbGxiYWNrIHRvIGNsYXNzIG5hbWUgaWYgbm8gbmFtZSBpcyBwcm92aWRlZFxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogc3Bhbl9uYW1lLFxuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiAnbWlkZGxld2FyZS5uZXN0anMnLFxuICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5taWRkbGV3YXJlLm5lc3RqcycsXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBBZGRzIGluc3RydW1lbnRhdGlvbiB0byBhIGpzIG9ic2VydmFibGUgYW5kIGF0dGFjaGVzIHRoZSBzcGFuIHRvIGFuIGFjdGl2ZSBwYXJlbnQgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE9ic2VydmFibGUob2JzZXJ2YWJsZSwgYWN0aXZlU3Bhbikge1xuICBpZiAoYWN0aXZlU3Bhbikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICBvYnNlcnZhYmxlLnN1YnNjcmliZSA9IG5ldyBQcm94eShvYnNlcnZhYmxlLnN1YnNjcmliZSwge1xuICAgICAgYXBwbHk6IChvcmlnaW5hbFN1YnNjcmliZSwgdGhpc0FyZ1N1YnNjcmliZSwgYXJnc1N1YnNjcmliZSkgPT4ge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoQWN0aXZlU3BhbihhY3RpdmVTcGFuLCAoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gb3JpZ2luYWxTdWJzY3JpYmUuYXBwbHkodGhpc0FyZ1N1YnNjcmliZSwgYXJnc1N1YnNjcmliZSk7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZCgoKSA9PiBhY3RpdmVTcGFuLmVuZCgpKTtcbiAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm94aWVzIHRoZSBuZXh0KCkgY2FsbCBpbiBhIG5lc3RqcyBtaWRkbGV3YXJlIHRvIGVuZCB0aGUgc3BhbiB3aGVuIGl0IGlzIGNhbGxlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dFByb3h5KG5leHQsIHNwYW4sIHByZXZTcGFuKSB7XG4gIHJldHVybiBuZXcgUHJveHkobmV4dCwge1xuICAgIGFwcGx5OiAob3JpZ2luYWxOZXh0LCB0aGlzQXJnTmV4dCwgYXJnc05leHQpID0+IHtcbiAgICAgIHNwYW4uZW5kKCk7XG5cbiAgICAgIGlmIChwcmV2U3Bhbikge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoQWN0aXZlU3BhbihwcmV2U3BhbiwgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KG9yaWdpbmFsTmV4dCwgdGhpc0FyZ05leHQsIGFyZ3NOZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseShvcmlnaW5hbE5leHQsIHRoaXNBcmdOZXh0LCBhcmdzTmV4dCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMuZ2V0TWlkZGxld2FyZVNwYW5PcHRpb25zID0gZ2V0TWlkZGxld2FyZVNwYW5PcHRpb25zO1xuZXhwb3J0cy5nZXROZXh0UHJveHkgPSBnZXROZXh0UHJveHk7XG5leHBvcnRzLmluc3RydW1lbnRPYnNlcnZhYmxlID0gaW5zdHJ1bWVudE9ic2VydmFibGU7XG5leHBvcnRzLmlzUGF0Y2hlZCA9IGlzUGF0Y2hlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationNestjsCore = __webpack_require__(/*! @opentelemetry/instrumentation-nestjs-core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-nestjs-core@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-nestjs-core/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst sentryNestInstrumentation = __webpack_require__(/*! ./sentry-nest-instrumentation.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Nest';\n\nconst instrumentNestCore = instrument.generateInstrumentOnce('Nest-Core', () => {\n  return new instrumentationNestjsCore.NestInstrumentation();\n});\n\nconst instrumentNestCommon = instrument.generateInstrumentOnce('Nest-Common', () => {\n  return new sentryNestInstrumentation.SentryNestInstrumentation();\n});\n\nconst instrumentNest = Object.assign(\n  () => {\n    instrumentNestCore();\n    instrumentNestCommon();\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _nestIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentNest();\n    },\n  };\n}) ;\n\n/**\n * Nest framework integration\n *\n * Capture tracing data for nest.\n */\nconst nestIntegration = core.defineIntegration(_nestIntegration);\n\n/**\n * Setup an error handler for Nest.\n */\nfunction setupNestErrorHandler(app, baseFilter) {\n  // Sadly, NestInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using Nest.js\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addNestSpanAttributes(span);\n    });\n  }\n\n  app.useGlobalInterceptors({\n    intercept(context, next) {\n      if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n        utils.logger.warn('Isolation scope is still the default isolation scope, skipping setting transactionName.');\n        return next.handle();\n      }\n\n      if (context.getType() === 'http') {\n        const req = context.switchToHttp().getRequest();\n        if (req.route) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([req, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${req.route.path}`);\n        }\n      }\n\n      return next.handle();\n    },\n  });\n\n  const wrappedFilter = new Proxy(baseFilter, {\n    get(target, prop, receiver) {\n      if (prop === 'catch') {\n        const originalCatch = Reflect.get(target, prop, receiver);\n\n        return (exception, host) => {\n          const exceptionIsObject = typeof exception === 'object' && exception !== null;\n          const exceptionStatusCode = exceptionIsObject && 'status' in exception ? exception.status : null;\n          const exceptionErrorProperty = exceptionIsObject && 'error' in exception ? exception.error : null;\n\n          /*\n          Don't report expected NestJS control flow errors\n          - `HttpException` errors will have a `status` property\n          - `RpcException` errors will have an `error` property\n           */\n          if (exceptionStatusCode !== null || exceptionErrorProperty !== null) {\n            return originalCatch.apply(target, [exception, host]);\n          }\n\n          core.captureException(exception);\n          return originalCatch.apply(target, [exception, host]);\n        };\n      }\n      return Reflect.get(target, prop, receiver);\n    },\n  });\n\n  app.useGlobalFilters(wrappedFilter);\n}\n\nfunction addNestSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: app_creation, request_context, handler\n  const type = attributes['nestjs.type'];\n\n  // If this is already set, or we have no nest.js span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.nestjs',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.nestjs`,\n  });\n}\n\nexports.instrumentNest = instrumentNest;\nexports.nestIntegration = nestIntegration;\nexports.setupNestErrorHandler = setupNestErrorHandler;\n//# sourceMappingURL=nest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9uZXN0L25lc3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLG9IQUFlOztBQUUzQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGtDQUFrQyxtQkFBTyxDQUFDLG9PQUE0QztBQUN0RixhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLG9IQUFlO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLDBJQUE2QjtBQUN4RCxrQ0FBa0MsbUJBQU8sQ0FBQyxxTEFBa0M7O0FBRTVFOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILElBQUksc0JBQXNCO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQscUhBQXFILEVBQUUsZUFBZTtBQUMvTDtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxLQUFLO0FBQ2pELEdBQUc7QUFDSDs7QUFFQSxzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9uZXN0LmpzPzk5ZjkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk5lc3Rqc0NvcmUgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbmVzdGpzLWNvcmUnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3Qgc2VudHJ5TmVzdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vc2VudHJ5LW5lc3QtaW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTmVzdCc7XG5cbmNvbnN0IGluc3RydW1lbnROZXN0Q29yZSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSgnTmVzdC1Db3JlJywgKCkgPT4ge1xuICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbk5lc3Rqc0NvcmUuTmVzdEluc3RydW1lbnRhdGlvbigpO1xufSk7XG5cbmNvbnN0IGluc3RydW1lbnROZXN0Q29tbW9uID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKCdOZXN0LUNvbW1vbicsICgpID0+IHtcbiAgcmV0dXJuIG5ldyBzZW50cnlOZXN0SW5zdHJ1bWVudGF0aW9uLlNlbnRyeU5lc3RJbnN0cnVtZW50YXRpb24oKTtcbn0pO1xuXG5jb25zdCBpbnN0cnVtZW50TmVzdCA9IE9iamVjdC5hc3NpZ24oXG4gICgpID0+IHtcbiAgICBpbnN0cnVtZW50TmVzdENvcmUoKTtcbiAgICBpbnN0cnVtZW50TmVzdENvbW1vbigpO1xuICB9LFxuICB7IGlkOiBJTlRFR1JBVElPTl9OQU1FIH0sXG4pO1xuXG5jb25zdCBfbmVzdEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnROZXN0KCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBOZXN0IGZyYW1ld29yayBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBuZXN0LlxuICovXG5jb25zdCBuZXN0SW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9uZXN0SW50ZWdyYXRpb24pO1xuXG4vKipcbiAqIFNldHVwIGFuIGVycm9yIGhhbmRsZXIgZm9yIE5lc3QuXG4gKi9cbmZ1bmN0aW9uIHNldHVwTmVzdEVycm9ySGFuZGxlcihhcHAsIGJhc2VGaWx0ZXIpIHtcbiAgLy8gU2FkbHksIE5lc3RJbnN0cnVtZW50YXRpb24gaGFzIG5vIHJlcXVlc3RIb29rLCBzbyB3ZSBuZWVkIHRvIGFkZCB0aGUgYXR0cmlidXRlcyBoZXJlXG4gIC8vIFdlIHJlZ2lzdGVyIHRoaXMgaG9vayBpbiB0aGlzIG1ldGhvZCwgYmVjYXVzZSBpZiB3ZSByZWdpc3RlciBpdCBpbiB0aGUgaW50ZWdyYXRpb24gYHNldHVwYCxcbiAgLy8gaXQgd291bGQgYWx3YXlzIHJ1biBldmVuIGZvciB1c2VycyB0aGF0IGFyZSBub3QgZXZlbiB1c2luZyBOZXN0LmpzXG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gIGlmIChjbGllbnQpIHtcbiAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgYWRkTmVzdFNwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuICAgIH0pO1xuICB9XG5cbiAgYXBwLnVzZUdsb2JhbEludGVyY2VwdG9ycyh7XG4gICAgaW50ZXJjZXB0KGNvbnRleHQsIG5leHQpIHtcbiAgICAgIGlmIChjb3JlLmdldElzb2xhdGlvblNjb3BlKCkgPT09IGNvcmUuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpIHtcbiAgICAgICAgdXRpbHMubG9nZ2VyLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBzdGlsbCB0aGUgZGVmYXVsdCBpc29sYXRpb24gc2NvcGUsIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lLicpO1xuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRleHQuZ2V0VHlwZSgpID09PSAnaHR0cCcpIHtcbiAgICAgICAgY29uc3QgcmVxID0gY29udGV4dC5zd2l0Y2hUb0h0dHAoKS5nZXRSZXF1ZXN0KCk7XG4gICAgICAgIGlmIChyZXEucm91dGUpIHtcbiAgICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke19vcHRpb25hbENoYWluKFtyZXEsICdhY2Nlc3MnLCBfID0+IF8ubWV0aG9kLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi50b1VwcGVyQ2FzZSwgJ2NhbGwnLCBfMyA9PiBfMygpXSkgfHwgJ0dFVCd9ICR7cmVxLnJvdXRlLnBhdGh9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKCk7XG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3Qgd3JhcHBlZEZpbHRlciA9IG5ldyBQcm94eShiYXNlRmlsdGVyLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIGlmIChwcm9wID09PSAnY2F0Y2gnKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsQ2F0Y2ggPSBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcblxuICAgICAgICByZXR1cm4gKGV4Y2VwdGlvbiwgaG9zdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGV4Y2VwdGlvbklzT2JqZWN0ID0gdHlwZW9mIGV4Y2VwdGlvbiA9PT0gJ29iamVjdCcgJiYgZXhjZXB0aW9uICE9PSBudWxsO1xuICAgICAgICAgIGNvbnN0IGV4Y2VwdGlvblN0YXR1c0NvZGUgPSBleGNlcHRpb25Jc09iamVjdCAmJiAnc3RhdHVzJyBpbiBleGNlcHRpb24gPyBleGNlcHRpb24uc3RhdHVzIDogbnVsbDtcbiAgICAgICAgICBjb25zdCBleGNlcHRpb25FcnJvclByb3BlcnR5ID0gZXhjZXB0aW9uSXNPYmplY3QgJiYgJ2Vycm9yJyBpbiBleGNlcHRpb24gPyBleGNlcHRpb24uZXJyb3IgOiBudWxsO1xuXG4gICAgICAgICAgLypcbiAgICAgICAgICBEb24ndCByZXBvcnQgZXhwZWN0ZWQgTmVzdEpTIGNvbnRyb2wgZmxvdyBlcnJvcnNcbiAgICAgICAgICAtIGBIdHRwRXhjZXB0aW9uYCBlcnJvcnMgd2lsbCBoYXZlIGEgYHN0YXR1c2AgcHJvcGVydHlcbiAgICAgICAgICAtIGBScGNFeGNlcHRpb25gIGVycm9ycyB3aWxsIGhhdmUgYW4gYGVycm9yYCBwcm9wZXJ0eVxuICAgICAgICAgICAqL1xuICAgICAgICAgIGlmIChleGNlcHRpb25TdGF0dXNDb2RlICE9PSBudWxsIHx8IGV4Y2VwdGlvbkVycm9yUHJvcGVydHkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbENhdGNoLmFwcGx5KHRhcmdldCwgW2V4Y2VwdGlvbiwgaG9zdF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihleGNlcHRpb24pO1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbENhdGNoLmFwcGx5KHRhcmdldCwgW2V4Y2VwdGlvbiwgaG9zdF0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgIH0sXG4gIH0pO1xuXG4gIGFwcC51c2VHbG9iYWxGaWx0ZXJzKHdyYXBwZWRGaWx0ZXIpO1xufVxuXG5mdW5jdGlvbiBhZGROZXN0U3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IGFwcF9jcmVhdGlvbiwgcmVxdWVzdF9jb250ZXh0LCBoYW5kbGVyXG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWyduZXN0anMudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gbmVzdC5qcyBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwubmVzdGpzJyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0ubmVzdGpzYCxcbiAgfSk7XG59XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE5lc3QgPSBpbnN0cnVtZW50TmVzdDtcbmV4cG9ydHMubmVzdEludGVncmF0aW9uID0gbmVzdEludGVncmF0aW9uO1xuZXhwb3J0cy5zZXR1cE5lc3RFcnJvckhhbmRsZXIgPSBzZXR1cE5lc3RFcnJvckhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXN0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Postgres integration\n *\n * Capture tracing data for pg.\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9wb3N0Z3Jlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDBCQUEwQixtQkFBTyxDQUFDLHlNQUFtQztBQUNyRSxhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLG1KQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9wb3N0Z3Jlcy5qcz80MmIxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvblBnID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQb3N0Z3Jlcyc7XG5cbmNvbnN0IGluc3RydW1lbnRQb3N0Z3JlcyA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uUGcuUGdJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVxdWlyZVBhcmVudFNwYW46IHRydWUsXG4gICAgICByZXF1ZXN0SG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5wb3N0Z3JlcycpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9wb3N0Z3Jlc0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRQb3N0Z3JlcygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogUG9zdGdyZXMgaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgcGcuXG4gKi9cbmNvbnN0IHBvc3RncmVzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wb3N0Z3Jlc0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50UG9zdGdyZXMgPSBpbnN0cnVtZW50UG9zdGdyZXM7XG5leHBvcnRzLnBvc3RncmVzSW50ZWdyYXRpb24gPSBwb3N0Z3Jlc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zdGdyZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst prismaInstrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(rsc)/./node_modules/.pnpm/@prisma+instrumentation@5.19.1/node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nconst instrumentPrisma = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => {\n  const EsmInteropPrismaInstrumentation =\n    // @ts-expect-error We need to do the following for interop reasons\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    _optionalChain([prismaInstrumentation, 'access', _ => _.default, 'optionalAccess', _2 => _2.PrismaInstrumentation]) || prismaInstrumentation.PrismaInstrumentation;\n\n  return new EsmInteropPrismaInstrumentation({});\n});\n\nconst _prismaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _3 => _3.description, 'optionalAccess', _4 => _4.startsWith, 'call', _5 => _5('prisma:')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        if (spanJSON.description === 'prisma:engine:db_query') {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Prisma integration\n *\n * Capture tracing data for prisma.\n * Note: This requieres to set:\n * previewFeatures = [\"tracing\"]\n * For the prisma client.\n * See https://www.prisma.io/docs/concepts/components/prisma-client/opentelemetry-tracing for more details.\n */\nconst prismaIntegration = core.defineIntegration(_prismaIntegration);\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9wcmlzbWEuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLG9IQUFlOztBQUUzQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDhCQUE4QixtQkFBTyxDQUFDLDZJQUF5QjtBQUMvRCxhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsdUlBQTBCOztBQUVyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQztBQUMvQyxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9wcmlzbWEuanM/ZTk3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgcHJpc21hSW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQHByaXNtYS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQcmlzbWEnO1xuXG5jb25zdCBpbnN0cnVtZW50UHJpc21hID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IHtcbiAgY29uc3QgRXNtSW50ZXJvcFByaXNtYUluc3RydW1lbnRhdGlvbiA9XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBuZWVkIHRvIGRvIHRoZSBmb2xsb3dpbmcgZm9yIGludGVyb3AgcmVhc29uc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICBfb3B0aW9uYWxDaGFpbihbcHJpc21hSW5zdHJ1bWVudGF0aW9uLCAnYWNjZXNzJywgXyA9PiBfLmRlZmF1bHQsICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLlByaXNtYUluc3RydW1lbnRhdGlvbl0pIHx8IHByaXNtYUluc3RydW1lbnRhdGlvbi5QcmlzbWFJbnN0cnVtZW50YXRpb247XG5cbiAgcmV0dXJuIG5ldyBFc21JbnRlcm9wUHJpc21hSW5zdHJ1bWVudGF0aW9uKHt9KTtcbn0pO1xuXG5jb25zdCBfcHJpc21hSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudFByaXNtYSgpO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICBpZiAoX29wdGlvbmFsQ2hhaW4oW3NwYW5KU09OLCAnYWNjZXNzJywgXzMgPT4gXzMuZGVzY3JpcHRpb24sICdvcHRpb25hbEFjY2VzcycsIF80ID0+IF80LnN0YXJ0c1dpdGgsICdjYWxsJywgXzUgPT4gXzUoJ3ByaXNtYTonKV0pKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5wcmlzbWEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ3ByaXNtYTplbmdpbmU6ZGJfcXVlcnknKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2RiLnN5c3RlbScsICdwcmlzbWEnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBQcmlzbWEgaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgcHJpc21hLlxuICogTm90ZTogVGhpcyByZXF1aWVyZXMgdG8gc2V0OlxuICogcHJldmlld0ZlYXR1cmVzID0gW1widHJhY2luZ1wiXVxuICogRm9yIHRoZSBwcmlzbWEgY2xpZW50LlxuICogU2VlIGh0dHBzOi8vd3d3LnByaXNtYS5pby9kb2NzL2NvbmNlcHRzL2NvbXBvbmVudHMvcHJpc21hLWNsaWVudC9vcGVudGVsZW1ldHJ5LXRyYWNpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuY29uc3QgcHJpc21hSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wcmlzbWFJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFByaXNtYSA9IGluc3RydW1lbnRQcmlzbWE7XG5leHBvcnRzLnByaXNtYUludGVncmF0aW9uID0gcHJpc21hSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmlzbWEuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis4 = __webpack_require__(/*! @opentelemetry/instrumentation-redis-4 */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_optionalChain([_redisOptions, 'optionalAccess', _ => _.cachePrefixes]) ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = _optionalChain([core.spanToJSON, 'call', _2 => _2(span), 'access', _3 => _3.data, 'optionalAccess', _4 => _4['net.peer.name']]);\n  const networkPeerPort = _optionalChain([core.spanToJSON, 'call', _5 => _5(span), 'access', _6 => _6.data, 'optionalAccess', _7 => _7['net.peer.port']]);\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(utils.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = instrument.generateInstrumentOnce('IORedis', () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedis4 = instrument.generateInstrumentOnce('Redis-4', () => {\n  return new instrumentationRedis4.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedis4();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Redis integration for \"ioredis\"\n *\n * Capture tracing data for redis and ioredis.\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9yZWRpcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsb0hBQWU7O0FBRTNCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsK0JBQStCLG1CQUFPLENBQUMsd05BQXdDO0FBQy9FLDhCQUE4QixtQkFBTyxDQUFDLHdOQUF3QztBQUM5RSxhQUFhLG1CQUFPLENBQUMsaUhBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLG9IQUFlO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLHVJQUEwQjtBQUNyRCxtQkFBbUIsbUJBQU8sQ0FBQyx5SUFBMkI7O0FBRXREOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrRkFBa0Y7QUFDM0c7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QztBQUN4QyxHQUFHO0FBQ0gsSUFBSSxzQkFBc0I7QUFDMUI7O0FBRUEsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9yZWRpcy5qcz84YTY1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Jb3JlZGlzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWlvcmVkaXMnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvblJlZGlzNCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00Jyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IHJlZGlzQ2FjaGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9yZWRpc0NhY2hlLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUmVkaXMnO1xuXG5sZXQgX3JlZGlzT3B0aW9ucyA9IHt9O1xuXG5jb25zdCBjYWNoZVJlc3BvbnNlSG9vayA9IChzcGFuLCByZWRpc0NvbW1hbmQsIGNtZEFyZ3MsIHJlc3BvbnNlKSA9PiB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwucmVkaXMnKTtcblxuICBjb25zdCBzYWZlS2V5ID0gcmVkaXNDYWNoZS5nZXRDYWNoZUtleVNhZmVseShyZWRpc0NvbW1hbmQsIGNtZEFyZ3MpO1xuICBjb25zdCBjYWNoZU9wZXJhdGlvbiA9IHJlZGlzQ2FjaGUuZ2V0Q2FjaGVPcGVyYXRpb24ocmVkaXNDb21tYW5kKTtcblxuICBpZiAoXG4gICAgIXNhZmVLZXkgfHxcbiAgICAhY2FjaGVPcGVyYXRpb24gfHxcbiAgICAhX29wdGlvbmFsQ2hhaW4oW19yZWRpc09wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5jYWNoZVByZWZpeGVzXSkgfHxcbiAgICAhcmVkaXNDYWNoZS5zaG91bGRDb25zaWRlckZvckNhY2hlKHJlZGlzQ29tbWFuZCwgc2FmZUtleSwgX3JlZGlzT3B0aW9ucy5jYWNoZVByZWZpeGVzKVxuICApIHtcbiAgICAvLyBub3QgcmVsZXZhbnQgZm9yIGNhY2hlXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gb3RlbC9pb3JlZGlzIHNlZW1zIHRvIGJlIHVzaW5nIHRoZSBvbGQgc3RhbmRhcmQsIGFzIHRoZXJlIHdhcyBhIGNoYW5nZSB0byB0aG9zZSBwYXJhbXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LXNwZWNpZmljYXRpb24vaXNzdWVzLzMxOTlcbiAgLy8gV2UgYXJlIHVzaW5nIHBhcmFtcyBiYXNlZCBvbiB0aGUgZG9jczogaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvc2VtY29udi9hdHRyaWJ1dGVzLXJlZ2lzdHJ5L25ldHdvcmsvXG4gIGNvbnN0IG5ldHdvcmtQZWVyQWRkcmVzcyA9IF9vcHRpb25hbENoYWluKFtjb3JlLnNwYW5Ub0pTT04sICdjYWxsJywgXzIgPT4gXzIoc3BhbiksICdhY2Nlc3MnLCBfMyA9PiBfMy5kYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNFsnbmV0LnBlZXIubmFtZSddXSk7XG4gIGNvbnN0IG5ldHdvcmtQZWVyUG9ydCA9IF9vcHRpb25hbENoYWluKFtjb3JlLnNwYW5Ub0pTT04sICdjYWxsJywgXzUgPT4gXzUoc3BhbiksICdhY2Nlc3MnLCBfNiA9PiBfNi5kYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNyA9PiBfN1snbmV0LnBlZXIucG9ydCddXSk7XG4gIGlmIChuZXR3b3JrUGVlclBvcnQgJiYgbmV0d29ya1BlZXJBZGRyZXNzKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHsgJ25ldHdvcmsucGVlci5hZGRyZXNzJzogbmV0d29ya1BlZXJBZGRyZXNzLCAnbmV0d29yay5wZWVyLnBvcnQnOiBuZXR3b3JrUGVlclBvcnQgfSk7XG4gIH1cblxuICBjb25zdCBjYWNoZUl0ZW1TaXplID0gcmVkaXNDYWNoZS5jYWxjdWxhdGVDYWNoZUl0ZW1TaXplKHJlc3BvbnNlKTtcblxuICBpZiAoY2FjaGVJdGVtU2l6ZSkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSwgY2FjaGVJdGVtU2l6ZSk7XG4gIH1cblxuICBpZiAocmVkaXNDYWNoZS5pc0luQ29tbWFuZHMocmVkaXNDYWNoZS5HRVRfQ09NTUFORFMsIHJlZGlzQ29tbWFuZCkgJiYgY2FjaGVJdGVtU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElULCBjYWNoZUl0ZW1TaXplID4gMCk7XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBjYWNoZU9wZXJhdGlvbixcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZXTogc2FmZUtleSxcbiAgfSk7XG5cbiAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc2FmZUtleS5qb2luKCcsICcpO1xuXG4gIHNwYW4udXBkYXRlTmFtZSh1dGlscy50cnVuY2F0ZShzcGFuRGVzY3JpcHRpb24sIDEwMjQpKTtcbn07XG5cbmNvbnN0IGluc3RydW1lbnRJT1JlZGlzID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKCdJT1JlZGlzJywgKCkgPT4ge1xuICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbklvcmVkaXMuSU9SZWRpc0luc3RydW1lbnRhdGlvbih7XG4gICAgcmVzcG9uc2VIb29rOiBjYWNoZVJlc3BvbnNlSG9vayxcbiAgfSk7XG59KTtcblxuY29uc3QgaW5zdHJ1bWVudFJlZGlzNCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSgnUmVkaXMtNCcsICgpID0+IHtcbiAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb25SZWRpczQuUmVkaXNJbnN0cnVtZW50YXRpb24oe1xuICAgIHJlc3BvbnNlSG9vazogY2FjaGVSZXNwb25zZUhvb2ssXG4gIH0pO1xufSk7XG5cbi8qKiBUbyBiZSBhYmxlIHRvIHByZWxvYWQgYWxsIFJlZGlzIE9UZWwgaW5zdHJ1bWVudGF0aW9ucyB3aXRoIGp1c3Qgb25lIElEIChcIlJlZGlzXCIpLCBhbGwgdGhlIGluc3RydW1lbnRhdGlvbnMgYXJlIGdlbmVyYXRlZCBpbiB0aGlzIG9uZSBmdW5jdGlvbiAgKi9cbmNvbnN0IGluc3RydW1lbnRSZWRpcyA9IE9iamVjdC5hc3NpZ24oXG4gICgpID0+IHtcbiAgICBpbnN0cnVtZW50SU9SZWRpcygpO1xuICAgIGluc3RydW1lbnRSZWRpczQoKTtcblxuICAgIC8vIHRvZG86IGltcGxlbWVudCB0aGVtIGdyYWR1YWxseVxuICAgIC8vIG5ldyBMZWdhY3lSZWRpc0luc3RydW1lbnRhdGlvbih7fSksXG4gIH0sXG4gIHsgaWQ6IElOVEVHUkFUSU9OX05BTUUgfSxcbik7XG5cbmNvbnN0IF9yZWRpc0ludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIF9yZWRpc09wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgaW5zdHJ1bWVudFJlZGlzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBSZWRpcyBpbnRlZ3JhdGlvbiBmb3IgXCJpb3JlZGlzXCJcbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgcmVkaXMgYW5kIGlvcmVkaXMuXG4gKi9cbmNvbnN0IHJlZGlzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9yZWRpc0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50UmVkaXMgPSBpbnN0cnVtZW50UmVkaXM7XG5leHBvcnRzLnJlZGlzSW50ZWdyYXRpb24gPSByZWRpc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkaXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst NODE_VERSION = utils.parseSemver(process.versions.node) ;\nconst NODE_MAJOR = NODE_VERSION.major;\n\nexports.NODE_MAJOR = NODE_MAJOR;\nexports.NODE_VERSION = NODE_VERSION;\n//# sourceMappingURL=nodeVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9ub2RlVmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGNBQWMsbUJBQU8sQ0FBQyxvSEFBZTs7QUFFckM7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9ub2RlVmVyc2lvbi5qcz9lMjQxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5jb25zdCBOT0RFX1ZFUlNJT04gPSB1dGlscy5wYXJzZVNlbXZlcihwcm9jZXNzLnZlcnNpb25zLm5vZGUpIDtcbmNvbnN0IE5PREVfTUFKT1IgPSBOT0RFX1ZFUlNJT04ubWFqb3I7XG5cbmV4cG9ydHMuTk9ERV9NQUpPUiA9IE5PREVfTUFKT1I7XG5leHBvcnRzLk5PREVfVkVSU0lPTiA9IE5PREVfVkVSU0lPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGVWZXJzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst contextAsyncHooks = __webpack_require__(/*! @opentelemetry/context-async-hooks */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+context-async-hooks@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/build/src/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Hub are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nconst SentryContextManager = opentelemetry.wrapContextManagerClass(contextAsyncHooks.AsyncLocalStorageContextManager);\n\nexports.SentryContextManager = SentryContextManager;\n//# sourceMappingURL=contextManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9vdGVsL2NvbnRleHRNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsMEJBQTBCLG1CQUFPLENBQUMsNE1BQW9DO0FBQ3RFLHNCQUFzQixtQkFBTyxDQUFDLHdPQUF1Qjs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL290ZWwvY29udGV4dE1hbmFnZXIuanM/NzY1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb250ZXh0QXN5bmNIb29rcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2NvbnRleHQtYXN5bmMtaG9va3MnKTtcbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgY3VzdG9tIENvbnRleHRNYW5hZ2VyIGZvciBPcGVuVGVsZW1ldHJ5LCB3aGljaCBleHRlbmRzIHRoZSBkZWZhdWx0IEFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIuXG4gKiBJdCBlbnN1cmVzIHRoYXQgd2UgY3JlYXRlIGEgbmV3IGh1YiBwZXIgY29udGV4dCwgc28gdGhhdCB0aGUgT1RFTCBDb250ZXh0ICYgdGhlIFNlbnRyeSBIdWIgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICpcbiAqIE5vdGUgdGhhdCB3ZSBjdXJyZW50bHkgb25seSBzdXBwb3J0IEFzeW5jSG9va3Mgd2l0aCB0aGlzLFxuICogYnV0IHNpbmNlIHRoaXMgc2hvdWxkIHdvcmsgZm9yIE5vZGUgMTQrIGFueWhvdyB0aGF0IHNob3VsZCBiZSBnb29kIGVub3VnaC5cbiAqL1xuY29uc3QgU2VudHJ5Q29udGV4dE1hbmFnZXIgPSBvcGVudGVsZW1ldHJ5LndyYXBDb250ZXh0TWFuYWdlckNsYXNzKGNvbnRleHRBc3luY0hvb2tzLkFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIpO1xuXG5leHBvcnRzLlNlbnRyeUNvbnRleHRNYW5hZ2VyID0gU2VudHJ5Q29udGV4dE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0TWFuYWdlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/** Exported only for tests. */\nconst INSTRUMENTED = {};\n\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nfunction generateInstrumentOnce(\n  name,\n  creator,\n) {\n  return Object.assign(\n    (options) => {\n      const instrumented = INSTRUMENTED[name];\n      if (instrumented) {\n        // If options are provided, ensure we update them\n        if (options) {\n          instrumented.setConfig(options);\n        }\n        return;\n      }\n\n      const instrumentation = creator(options);\n      INSTRUMENTED[name] = instrumentation;\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n    { id: name },\n  );\n}\n\nexports.INSTRUMENTED = INSTRUMENTED;\nexports.generateInstrumentOnce = generateInstrumentOnce;\n//# sourceMappingURL=instrument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9vdGVsL2luc3RydW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxzQkFBc0IsbUJBQU8sQ0FBQyx3T0FBdUI7O0FBRXJEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsTUFBTSxVQUFVO0FBQ2hCO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9pbnN0cnVtZW50LmpzP2I0YTkiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuXG4vKiogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuICovXG5jb25zdCBJTlNUUlVNRU5URUQgPSB7fTtcblxuLyoqXG4gKiBJbnN0cnVtZW50IGFuIE9wZW5UZWxlbWV0cnkgaW5zdHJ1bWVudGF0aW9uIG9uY2UuXG4gKiBUaGlzIHdpbGwgc2tpcCBydW5uaW5nIGluc3RydW1lbnRhdGlvbiBhZ2FpbiBpZiBpdCB3YXMgYWxyZWFkeSBpbnN0cnVtZW50ZWQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIG5hbWUsXG4gIGNyZWF0b3IsXG4pIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgKG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRlZCA9IElOU1RSVU1FTlRFRFtuYW1lXTtcbiAgICAgIGlmIChpbnN0cnVtZW50ZWQpIHtcbiAgICAgICAgLy8gSWYgb3B0aW9ucyBhcmUgcHJvdmlkZWQsIGVuc3VyZSB3ZSB1cGRhdGUgdGhlbVxuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGluc3RydW1lbnRlZC5zZXRDb25maWcob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBjcmVhdG9yKG9wdGlvbnMpO1xuICAgICAgSU5TVFJVTUVOVEVEW25hbWVdID0gaW5zdHJ1bWVudGF0aW9uO1xuXG4gICAgICBvcGVudGVsZW1ldHJ5LmFkZE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb24oaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuICAgIHsgaWQ6IG5hbWUgfSxcbiAgKTtcbn1cblxuZXhwb3J0cy5JTlNUUlVNRU5URUQgPSBJTlNUUlVNRU5URUQ7XG5leHBvcnRzLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UgPSBnZW5lcmF0ZUluc3RydW1lbnRPbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/base.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/base.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n* This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n* With the following LICENSE:\n*\n* (The MIT License)\n*\n* Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* 'Software'), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:*\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.*\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\nclass Agent extends http.Agent {\n\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      if (typeof (options ).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort() {\n    return _nullishCoalesce(this[INTERNAL].defaultPort, () => ( (this.protocol === 'https:' ? 443 : 80)));\n  }\n\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol() {\n    return _nullishCoalesce(this[INTERNAL].protocol, () => ( (this.isSecureEndpoint() ? 'https:' : 'http:')));\n  }\n\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n\nexports.Agent = Agent;\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9wcm94eS9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxvSEFBZTs7QUFFM0IsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsNEJBQVc7QUFDaEMsbUJBQU8sQ0FBQyw4QkFBWTs7QUFFcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvYmFzZS5qcz84MGVlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9udWxsaXNoQ29hbGVzY2Vcbn0gPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdub2RlOmh0dHAnKTtcbnJlcXVpcmUoJ25vZGU6aHR0cHMnKTtcblxuLyoqXG4qIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSBmb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vVG9vVGFsbE5hdGUvcHJveHktYWdlbnRzL3RyZWUvYjEzMzI5NWZkMTZmNjQ3NTU3OGI2YjE1YmQ5YjRlMzNlY2IwZDBiN1xuKiBXaXRoIHRoZSBmb2xsb3dpbmcgTElDRU5TRTpcbipcbiogKFRoZSBNSVQgTGljZW5zZSlcbipcbiogQ29weXJpZ2h0IChjKSAyMDEzIE5hdGhhbiBSYWpsaWNoIDxuYXRoYW5AdG9vdGFsbG5hdGUubmV0PipcbipcbiogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4qIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4qIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4qIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6KlxuKlxuKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4qXG4qXG4qIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuKiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiovXG5cbmNvbnN0IElOVEVSTkFMID0gU3ltYm9sKCdBZ2VudEJhc2VJbnRlcm5hbFN0YXRlJyk7XG5cbmNsYXNzIEFnZW50IGV4dGVuZHMgaHR0cC5BZ2VudCB7XG5cbiAgLy8gU2V0IGJ5IGBodHRwLkFnZW50YCAtIG1pc3NpbmcgZnJvbSBgQHR5cGVzL25vZGVgXG5cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXNbSU5URVJOQUxdID0ge307XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhbiBgaHR0cGAgb3IgYGh0dHBzYCByZXF1ZXN0LlxuICAgKi9cbiAgaXNTZWN1cmVFbmRwb2ludChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIC8vIEZpcnN0IGNoZWNrIHRoZSBgc2VjdXJlRW5kcG9pbnRgIHByb3BlcnR5IGV4cGxpY2l0bHksIHNpbmNlIHRoaXNcbiAgICAgIC8vIG1lYW5zIHRoYXQgYSBwYXJlbnQgYEFnZW50YCBpcyBcInBhc3NpbmcgdGhyb3VnaFwiIHRvIHRoaXMgaW5zdGFuY2UuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICBpZiAodHlwZW9mIChvcHRpb25zICkuc2VjdXJlRW5kcG9pbnQgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5zZWN1cmVFbmRwb2ludDtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gZXhwbGljaXQgYHNlY3VyZWAgZW5kcG9pbnQsIGNoZWNrIGlmIGBwcm90b2NvbGAgcHJvcGVydHkgaXNcbiAgICAgIC8vIHNldC4gVGhpcyB3aWxsIHVzdWFsbHkgYmUgdGhlIGNhc2Ugc2luY2UgdXNpbmcgYSBmdWxsIHN0cmluZyBVUkxcbiAgICAgIC8vIG9yIGBVUkxgIGluc3RhbmNlIHNob3VsZCBiZSB0aGUgbW9zdCBjb21tb24gdXNhZ2UuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJvdG9jb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnByb3RvY29sID09PSAnaHR0cHM6JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5LCBpZiBubyBgcHJvdG9jb2xgIHByb3BlcnR5IHdhcyBzZXQsIHRoZW4gZmFsbCBiYWNrIHRvXG4gICAgLy8gY2hlY2tpbmcgdGhlIHN0YWNrIHRyYWNlIG9mIHRoZSBjdXJyZW50IGNhbGwgc3RhY2ssIGFuZCB0cnkgdG9cbiAgICAvLyBkZXRlY3QgdGhlIFwiaHR0cHNcIiBtb2R1bGUuXG4gICAgY29uc3QgeyBzdGFjayB9ID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKHR5cGVvZiBzdGFjayAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3RhY2suc3BsaXQoJ1xcbicpLnNvbWUobCA9PiBsLmluZGV4T2YoJyhodHRwcy5qczonKSAhPT0gLTEgfHwgbC5pbmRleE9mKCdub2RlOmh0dHBzOicpICE9PSAtMSk7XG4gIH1cblxuICBjcmVhdGVTb2NrZXQocmVxLCBvcHRpb25zLCBjYikge1xuICAgIGNvbnN0IGNvbm5lY3RPcHRzID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHNlY3VyZUVuZHBvaW50OiB0aGlzLmlzU2VjdXJlRW5kcG9pbnQob3B0aW9ucyksXG4gICAgfTtcbiAgICBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5jb25uZWN0KHJlcSwgY29ubmVjdE9wdHMpKVxuICAgICAgLnRoZW4oc29ja2V0ID0+IHtcbiAgICAgICAgaWYgKHNvY2tldCBpbnN0YW5jZW9mIGh0dHAuQWdlbnQpIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBhZGRSZXF1ZXN0KClgIGlzbid0IGRlZmluZWQgaW4gYEB0eXBlcy9ub2RlYFxuICAgICAgICAgIHJldHVybiBzb2NrZXQuYWRkUmVxdWVzdChyZXEsIGNvbm5lY3RPcHRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gc29ja2V0O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBjcmVhdGVTb2NrZXQoKWAgaXNuJ3QgZGVmaW5lZCBpbiBgQHR5cGVzL25vZGVgXG4gICAgICAgIHN1cGVyLmNyZWF0ZVNvY2tldChyZXEsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH0sIGNiKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbm5lY3Rpb24oKSB7XG4gICAgY29uc3Qgc29ja2V0ID0gdGhpc1tJTlRFUk5BTF0uY3VycmVudFNvY2tldDtcbiAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gdW5kZWZpbmVkO1xuICAgIGlmICghc29ja2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNvY2tldCB3YXMgcmV0dXJuZWQgaW4gdGhlIGBjb25uZWN0KClgIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiBzb2NrZXQ7XG4gIH1cblxuICBnZXQgZGVmYXVsdFBvcnQoKSB7XG4gICAgcmV0dXJuIF9udWxsaXNoQ29hbGVzY2UodGhpc1tJTlRFUk5BTF0uZGVmYXVsdFBvcnQsICgpID0+ICggKHRoaXMucHJvdG9jb2wgPT09ICdodHRwczonID8gNDQzIDogODApKSk7XG4gIH1cblxuICBzZXQgZGVmYXVsdFBvcnQodikge1xuICAgIGlmICh0aGlzW0lOVEVSTkFMXSkge1xuICAgICAgdGhpc1tJTlRFUk5BTF0uZGVmYXVsdFBvcnQgPSB2O1xuICAgIH1cbiAgfVxuXG4gIGdldCBwcm90b2NvbCgpIHtcbiAgICByZXR1cm4gX251bGxpc2hDb2FsZXNjZSh0aGlzW0lOVEVSTkFMXS5wcm90b2NvbCwgKCkgPT4gKCAodGhpcy5pc1NlY3VyZUVuZHBvaW50KCkgPyAnaHR0cHM6JyA6ICdodHRwOicpKSk7XG4gIH1cblxuICBzZXQgcHJvdG9jb2wodikge1xuICAgIGlmICh0aGlzW0lOVEVSTkFMXSkge1xuICAgICAgdGhpc1tJTlRFUk5BTF0ucHJvdG9jb2wgPSB2O1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLkFnZW50ID0gQWdlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/index.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/index.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst tls = __webpack_require__(/*! node:tls */ \"node:tls\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst base = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/base.js\");\nconst parseProxyResponse = __webpack_require__(/*! ./parse-proxy-response.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\");\n\nfunction debug(...args) {\n  utils.logger.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends base.Agent {\n  static __initStatic() {this.protocols = ['http', 'https']; }\n\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = _nullishCoalesce(_optionalChain([opts, 'optionalAccess', _2 => _2.headers]), () => ( {}));\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse.parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s) => {\n      debug('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n}HttpsProxyAgent.__initStatic();\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction omit(\n  obj,\n  ...keys\n)\n\n {\n  const ret = {}\n\n;\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\nexports.HttpsProxyAgent = HttpsProxyAgent;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nfunction debug(...args) {\n  utils.logger.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debug('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.slice(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debug('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9wcm94eS9wYXJzZS1wcm94eS1yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGNBQWMsbUJBQU8sQ0FBQyxvSEFBZTs7QUFFckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0ZBQWtGLE9BQU87QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9wcm94eS9wYXJzZS1wcm94eS1yZXNwb25zZS5qcz84YjFhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5mdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG4gIHV0aWxzLmxvZ2dlci5sb2coJ1todHRwcy1wcm94eS1hZ2VudDpwYXJzZS1wcm94eS1yZXNwb25zZV0nLCAuLi5hcmdzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VQcm94eVJlc3BvbnNlKHNvY2tldCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIHdlIG5lZWQgdG8gYnVmZmVyIGFueSBIVFRQIHRyYWZmaWMgdGhhdCBoYXBwZW5zIHdpdGggdGhlIHByb3h5IGJlZm9yZSB3ZSBnZXRcbiAgICAvLyB0aGUgQ09OTkVDVCByZXNwb25zZSwgc28gdGhhdCBpZiB0aGUgcmVzcG9uc2UgaXMgYW55dGhpbmcgb3RoZXIgdGhhbiBhbiBcIjIwMFwiXG4gICAgLy8gcmVzcG9uc2UgY29kZSwgdGhlbiB3ZSBjYW4gcmUtcGxheSB0aGUgXCJkYXRhXCIgZXZlbnRzIG9uIHRoZSBzb2NrZXQgb25jZSB0aGVcbiAgICAvLyBIVFRQIHBhcnNlciBpcyBob29rZWQgdXAuLi5cbiAgICBsZXQgYnVmZmVyc0xlbmd0aCA9IDA7XG4gICAgY29uc3QgYnVmZmVycyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgIGNvbnN0IGIgPSBzb2NrZXQucmVhZCgpO1xuICAgICAgaWYgKGIpIG9uZGF0YShiKTtcbiAgICAgIGVsc2Ugc29ja2V0Lm9uY2UoJ3JlYWRhYmxlJywgcmVhZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIHJlYWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgZGVidWcoJ29uZW5kJyk7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdQcm94eSBjb25uZWN0aW9uIGVuZGVkIGJlZm9yZSByZWNlaXZpbmcgQ09OTkVDVCByZXNwb25zZScpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgZGVidWcoJ29uZXJyb3IgJW8nLCBlcnIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25kYXRhKGIpIHtcbiAgICAgIGJ1ZmZlcnMucHVzaChiKTtcbiAgICAgIGJ1ZmZlcnNMZW5ndGggKz0gYi5sZW5ndGg7XG5cbiAgICAgIGNvbnN0IGJ1ZmZlcmVkID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBidWZmZXJzTGVuZ3RoKTtcbiAgICAgIGNvbnN0IGVuZE9mSGVhZGVycyA9IGJ1ZmZlcmVkLmluZGV4T2YoJ1xcclxcblxcclxcbicpO1xuXG4gICAgICBpZiAoZW5kT2ZIZWFkZXJzID09PSAtMSkge1xuICAgICAgICAvLyBrZWVwIGJ1ZmZlcmluZ1xuICAgICAgICBkZWJ1ZygnaGF2ZSBub3QgcmVjZWl2ZWQgZW5kIG9mIEhUVFAgaGVhZGVycyB5ZXQuLi4nKTtcbiAgICAgICAgcmVhZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGhlYWRlclBhcnRzID0gYnVmZmVyZWQuc2xpY2UoMCwgZW5kT2ZIZWFkZXJzKS50b1N0cmluZygnYXNjaWknKS5zcGxpdCgnXFxyXFxuJyk7XG4gICAgICBjb25zdCBmaXJzdExpbmUgPSBoZWFkZXJQYXJ0cy5zaGlmdCgpO1xuICAgICAgaWYgKCFmaXJzdExpbmUpIHtcbiAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ05vIGhlYWRlciByZWNlaXZlZCBmcm9tIHByb3h5IENPTk5FQ1QgcmVzcG9uc2UnKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBmaXJzdExpbmVQYXJ0cyA9IGZpcnN0TGluZS5zcGxpdCgnICcpO1xuICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9ICsoZmlyc3RMaW5lUGFydHNbMV0gfHwgMCk7XG4gICAgICBjb25zdCBzdGF0dXNUZXh0ID0gZmlyc3RMaW5lUGFydHMuc2xpY2UoMikuam9pbignICcpO1xuICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgZm9yIChjb25zdCBoZWFkZXIgb2YgaGVhZGVyUGFydHMpIHtcbiAgICAgICAgaWYgKCFoZWFkZXIpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBmaXJzdENvbG9uID0gaGVhZGVyLmluZGV4T2YoJzonKTtcbiAgICAgICAgaWYgKGZpcnN0Q29sb24gPT09IC0xKSB7XG4gICAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgSW52YWxpZCBoZWFkZXIgZnJvbSBwcm94eSBDT05ORUNUIHJlc3BvbnNlOiBcIiR7aGVhZGVyfVwiYCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleSA9IGhlYWRlci5zbGljZSgwLCBmaXJzdENvbG9uKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWRlci5zbGljZShmaXJzdENvbG9uICsgMSkudHJpbVN0YXJ0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBoZWFkZXJzW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBoZWFkZXJzW2tleV0gPSBbY3VycmVudCwgdmFsdWVdO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudCkpIHtcbiAgICAgICAgICBjdXJyZW50LnB1c2godmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWJ1ZygnZ290IHByb3h5IHNlcnZlciByZXNwb25zZTogJW8gJW8nLCBmaXJzdExpbmUsIGhlYWRlcnMpO1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIGNvbm5lY3Q6IHtcbiAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgIHN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgYnVmZmVyZWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzb2NrZXQub24oJ2Vycm9yJywgb25lcnJvcik7XG4gICAgc29ja2V0Lm9uKCdlbmQnLCBvbmVuZCk7XG5cbiAgICByZWFkKCk7XG4gIH0pO1xufVxuXG5leHBvcnRzLnBhcnNlUHJveHlSZXNwb25zZSA9IHBhcnNlUHJveHlSZXNwb25zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLXByb3h5LXJlc3BvbnNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst module$1 = __webpack_require__(/*! ../utils/module.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (utils.GLOBAL_OBJ.SENTRY_RELEASE && utils.GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return utils.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = utils.createStackParser(utils.nodeStackLineParser(module$1.createGetModuleFromFilename()));\n\nexports.defaultStackParser = defaultStackParser;\nexports.getSentryRelease = getSentryRelease;\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst worker_threads = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nclass NodeClient extends core.ServerRuntimeClient {\n\n   constructor(options) {\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname(),\n    };\n\n    core.applySdkMetadata(clientOptions, 'node');\n\n    utils.logger.log(\n      `Initializing Sentry: process: ${process.pid}, thread: ${worker_threads.isMainThread ? 'main' : `worker-${worker_threads.threadId}`}.`,\n    );\n\n    super(clientOptions);\n  }\n\n  /** Get the OTEL tracer. */\n   get tracer() {\n    if (this._tracer) {\n      return this._tracer;\n    }\n\n    const name = '@sentry/node';\n    const version = core.SDK_VERSION;\n    const tracer = api.trace.getTracer(name, version);\n    this._tracer = tracer;\n\n    return tracer;\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   async flush(timeout) {\n    const provider = this.traceProvider;\n    const spanProcessor = _optionalChain([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   close(timeout) {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n\n    return super.close(timeout);\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n   startClientReportTracking() {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n\n      this._clientReportInterval = setInterval(\n        () => {\n          debugBuild.DEBUG_BUILD && utils.logger.log('Flushing client reports based on interval.');\n          this._flushOutcomes();\n        },\n        _nullishCoalesce(clientOptions.clientReportFlushInterval, () => ( DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS)),\n      )\n        // Unref is critical for not preventing the process from exiting because the interval is active.\n        .unref();\n\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n}\n\nexports.NodeClient = NodeClient;\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9zZGsvY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLG9IQUFlOztBQUUzQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELFdBQVcsbUJBQU8sQ0FBQyx3QkFBUztBQUM1QixZQUFZLG1CQUFPLENBQUMsa0lBQW9CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyxpSEFBYztBQUNuQyxjQUFjLG1CQUFPLENBQUMsb0hBQWU7QUFDckMsdUJBQXVCLG1CQUFPLENBQUMsc0NBQWdCO0FBQy9DLG1CQUFtQixtQkFBTyxDQUFDLDRIQUFtQjs7QUFFOUMsdURBQXVEOztBQUV2RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLCtDQUErQztBQUNoRTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsdUNBQXVDLFlBQVksWUFBWSxpREFBaUQsd0JBQXdCLEVBQUU7QUFDMUk7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9jbGllbnQuanM/YWVhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfbnVsbGlzaENvYWxlc2NlLFxuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgb3MgPSByZXF1aXJlKCdub2RlOm9zJyk7XG5jb25zdCBhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9hcGknKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuY29uc3Qgd29ya2VyX3RocmVhZHMgPSByZXF1aXJlKCd3b3JrZXJfdGhyZWFkcycpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbmNvbnN0IERFRkFVTFRfQ0xJRU5UX1JFUE9SVF9GTFVTSF9JTlRFUlZBTF9NUyA9IDYwMDAwOyAvLyA2MHMgd2FzIGNob3NlbiBhcmJpdHJhcmlseVxuXG4vKiogQSBjbGllbnQgZm9yIHVzaW5nIFNlbnRyeSB3aXRoIE5vZGUgJiBPcGVuVGVsZW1ldHJ5LiAqL1xuY2xhc3MgTm9kZUNsaWVudCBleHRlbmRzIGNvcmUuU2VydmVyUnVudGltZUNsaWVudCB7XG5cbiAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBjb25zdCBjbGllbnRPcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHBsYXRmb3JtOiAnbm9kZScsXG4gICAgICBydW50aW1lOiB7IG5hbWU6ICdub2RlJywgdmVyc2lvbjogZ2xvYmFsLnByb2Nlc3MudmVyc2lvbiB9LFxuICAgICAgc2VydmVyTmFtZTogb3B0aW9ucy5zZXJ2ZXJOYW1lIHx8IGdsb2JhbC5wcm9jZXNzLmVudi5TRU5UUllfTkFNRSB8fCBvcy5ob3N0bmFtZSgpLFxuICAgIH07XG5cbiAgICBjb3JlLmFwcGx5U2RrTWV0YWRhdGEoY2xpZW50T3B0aW9ucywgJ25vZGUnKTtcblxuICAgIHV0aWxzLmxvZ2dlci5sb2coXG4gICAgICBgSW5pdGlhbGl6aW5nIFNlbnRyeTogcHJvY2VzczogJHtwcm9jZXNzLnBpZH0sIHRocmVhZDogJHt3b3JrZXJfdGhyZWFkcy5pc01haW5UaHJlYWQgPyAnbWFpbicgOiBgd29ya2VyLSR7d29ya2VyX3RocmVhZHMudGhyZWFkSWR9YH0uYCxcbiAgICApO1xuXG4gICAgc3VwZXIoY2xpZW50T3B0aW9ucyk7XG4gIH1cblxuICAvKiogR2V0IHRoZSBPVEVMIHRyYWNlci4gKi9cbiAgIGdldCB0cmFjZXIoKSB7XG4gICAgaWYgKHRoaXMuX3RyYWNlcikge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYWNlcjtcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lID0gJ0BzZW50cnkvbm9kZSc7XG4gICAgY29uc3QgdmVyc2lvbiA9IGNvcmUuU0RLX1ZFUlNJT047XG4gICAgY29uc3QgdHJhY2VyID0gYXBpLnRyYWNlLmdldFRyYWNlcihuYW1lLCB2ZXJzaW9uKTtcbiAgICB0aGlzLl90cmFjZXIgPSB0cmFjZXI7XG5cbiAgICByZXR1cm4gdHJhY2VyO1xuICB9XG5cbiAgLy8gRXNsaW50IGlnbm9yZSBleHBsYW5hdGlvbjogVGhpcyBpcyBhbHJlYWR5IGRvY3VtZW50ZWQgaW4gc3VwZXIuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG4gICBhc3luYyBmbHVzaCh0aW1lb3V0KSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLnRyYWNlUHJvdmlkZXI7XG4gICAgY29uc3Qgc3BhblByb2Nlc3NvciA9IF9vcHRpb25hbENoYWluKFtwcm92aWRlciwgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLmFjdGl2ZVNwYW5Qcm9jZXNzb3JdKTtcblxuICAgIGlmIChzcGFuUHJvY2Vzc29yKSB7XG4gICAgICBhd2FpdCBzcGFuUHJvY2Vzc29yLmZvcmNlRmx1c2goKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXRPcHRpb25zKCkuc2VuZENsaWVudFJlcG9ydHMpIHtcbiAgICAgIHRoaXMuX2ZsdXNoT3V0Y29tZXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuZmx1c2godGltZW91dCk7XG4gIH1cblxuICAvLyBFc2xpbnQgaWdub3JlIGV4cGxhbmF0aW9uOiBUaGlzIGlzIGFscmVhZHkgZG9jdW1lbnRlZCBpbiBzdXBlci5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbiAgIGNsb3NlKHRpbWVvdXQpIHtcbiAgICBpZiAodGhpcy5fY2xpZW50UmVwb3J0SW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fY2xpZW50UmVwb3J0SW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jbGllbnRSZXBvcnRPbkV4aXRGbHVzaExpc3RlbmVyKSB7XG4gICAgICBwcm9jZXNzLm9mZignYmVmb3JlRXhpdCcsIHRoaXMuX2NsaWVudFJlcG9ydE9uRXhpdEZsdXNoTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5jbG9zZSh0aW1lb3V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaWxsIHN0YXJ0IHRyYWNraW5nIGNsaWVudCByZXBvcnRzIGZvciB0aGlzIGNsaWVudC5cbiAgICpcbiAgICogTk9USUNFOiBUaGlzIG1ldGhvZCB3aWxsIGNyZWF0ZSBhbiBpbnRlcnZhbCB0aGF0IGlzIHBlcmlvZGljYWxseSBjYWxsZWQgYW5kIGF0dGFjaCBhIGBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JylgXG4gICAqIGhvb2suIFRvIGNsZWFuIHVwIHRoZXNlIHJlc291cmNlcywgY2FsbCBgLmNsb3NlKClgIHdoZW4geW91IG5vIGxvbmdlciBpbnRlbmQgdG8gdXNlIHRoZSBjbGllbnQuIE5vdCBkb2luZyBzbyB3aWxsXG4gICAqIHJlc3VsdCBpbiBhIG1lbW9yeSBsZWFrLlxuICAgKi9cbiAgLy8gVGhlIHJlYXNvbiBjbGllbnQgcmVwb3J0cyBuZWVkIHRvIGJlIG1hbnVhbGx5IGFjdGl2YXRlZCB3aXRoIHRoaXMgbWV0aG9kIGluc3RlYWQgb2YganVzdCBlbmFibGluZyB0aGVtIGluIGFcbiAgLy8gY29uc3RydWN0b3IsIGlzIHRoYXQgaWYgdXNlcnMgcGVyaW9kaWNhbGx5IGFuZCB1bmJvdW5kZWRseSBjcmVhdGUgbmV3IGNsaWVudHMsIHdlIHdpbGwgY3JlYXRlIG1vcmUgYW5kIG1vcmVcbiAgLy8gaW50ZXJ2YWxzIGFuZCBiZWZvcmVFeGl0IGxpc3RlbmVycywgdGh1cyBsZWFraW5nIG1lbW9yeS4gSW4gdGhlc2Ugc2l0dWF0aW9ucywgdXNlcnMgYXJlIHJlcXVpcmVkIHRvIGNhbGxcbiAgLy8gYGNsaWVudC5jbG9zZSgpYCBpbiBvcmRlciB0byBkaXNwb3NlIG9mIHRoZSBhY3F1aXJlZCByZXNvdXJjZXMuXG4gIC8vIFdlIGFzc3VtZSB0aGF0IGNhbGxpbmcgdGhpcyBtZXRob2QgaW4gU2VudHJ5LmluaXQoKSBpcyBhIHNlbnNpYmxlIGRlZmF1bHQsIGJlY2F1c2UgY2FsbGluZyBTZW50cnkuaW5pdCgpIG92ZXIgYW5kXG4gIC8vIG92ZXIgYWdhaW4gd291bGQgYWxzbyByZXN1bHQgaW4gbWVtb3J5IGxlYWtzLlxuICAvLyBOb3RlOiBXZSBoYXZlIGV4cGVyaW1lbnRlZCB3aXRoIHVzaW5nIGBGaW5hbGl6YXRpb25SZWdpc3R5YCB0byBjbGVhciB0aGUgaW50ZXJ2YWwgd2hlbiB0aGUgY2xpZW50IGlzIGdhcmJhZ2VcbiAgLy8gY29sbGVjdGVkLCBidXQgaXQgZGlkIG5vdCB3b3JrLCBiZWNhdXNlIHRoZSBjbGVhbnVwIGZ1bmN0aW9uIG5ldmVyIGdvdCBjYWxsZWQuXG4gICBzdGFydENsaWVudFJlcG9ydFRyYWNraW5nKCkge1xuICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICBpZiAoY2xpZW50T3B0aW9ucy5zZW5kQ2xpZW50UmVwb3J0cykge1xuICAgICAgdGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5fZmx1c2hPdXRjb21lcygpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fY2xpZW50UmVwb3J0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgdXRpbHMubG9nZ2VyLmxvZygnRmx1c2hpbmcgY2xpZW50IHJlcG9ydHMgYmFzZWQgb24gaW50ZXJ2YWwuJyk7XG4gICAgICAgICAgdGhpcy5fZmx1c2hPdXRjb21lcygpO1xuICAgICAgICB9LFxuICAgICAgICBfbnVsbGlzaENvYWxlc2NlKGNsaWVudE9wdGlvbnMuY2xpZW50UmVwb3J0Rmx1c2hJbnRlcnZhbCwgKCkgPT4gKCBERUZBVUxUX0NMSUVOVF9SRVBPUlRfRkxVU0hfSU5URVJWQUxfTVMpKSxcbiAgICAgIClcbiAgICAgICAgLy8gVW5yZWYgaXMgY3JpdGljYWwgZm9yIG5vdCBwcmV2ZW50aW5nIHRoZSBwcm9jZXNzIGZyb20gZXhpdGluZyBiZWNhdXNlIHRoZSBpbnRlcnZhbCBpcyBhY3RpdmUuXG4gICAgICAgIC51bnJlZigpO1xuXG4gICAgICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgdGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lcik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuTm9kZUNsaWVudCA9IE5vZGVDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst console$1 = __webpack_require__(/*! ../integrations/console.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ../integrations/context.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ../integrations/contextlines.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst index = __webpack_require__(/*! ../integrations/http/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst index$1 = __webpack_require__(/*! ../integrations/local-variables/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ../integrations/modules.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst nodeFetch = __webpack_require__(/*! ../integrations/node-fetch.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst onuncaughtexception = __webpack_require__(/*! ../integrations/onuncaughtexception.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ../integrations/onunhandledrejection.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst processThread = __webpack_require__(/*! ../integrations/processThread.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/processThread.js\");\nconst spotlight = __webpack_require__(/*! ../integrations/spotlight.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst index$2 = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst http = __webpack_require__(/*! ../transports/http.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst envToBool = __webpack_require__(/*! ../utils/envToBool.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\n\nfunction getCjsOnlyIntegrations() {\n  return commonjs.isCjs() ? [modules.modulesIntegration()] : [];\n}\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  return [\n    // Common\n    core.inboundFiltersIntegration(),\n    core.functionToStringIntegration(),\n    core.linkedErrorsIntegration(),\n    core.requestDataIntegration(),\n    // Native Wrappers\n    console$1.consoleIntegration(),\n    index.httpIntegration(),\n    nodeFetch.nativeNodeFetchIntegration(),\n    // Global Handlers\n    onuncaughtexception.onUncaughtExceptionIntegration(),\n    onunhandledrejection.onUnhandledRejectionIntegration(),\n    // Event Info\n    contextlines.contextLinesIntegration(),\n    index$1.localVariablesIntegration(),\n    context.nodeContextIntegration(),\n    processThread.processThreadBreadcrumbIntegration(),\n    ...getCjsOnlyIntegrations(),\n  ];\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(shouldAddPerformanceIntegrations(options) ? index$2.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\nfunction shouldAddPerformanceIntegrations(options) {\n  if (!core.hasTracingEnabled(options)) {\n    return false;\n  }\n\n  // We want to ensure `tracesSampleRate` is not just undefined/null here\n  // eslint-disable-next-line deprecation/deprecation\n  return options.enableTracing || options.tracesSampleRate != null || 'tracesSampler' in options;\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(\n  _options = {},\n  getDefaultIntegrationsImpl,\n) {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      utils.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      utils.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n\n  if (!commonjs.isCjs() && options.registerEsmLoaderHooks !== false) {\n    initOtel.maybeInitializeEsmLoader(options.registerEsmLoaderHooks === true ? undefined : options.registerEsmLoaderHooks);\n  }\n\n  opentelemetry.setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.spotlight && !options.integrations.some(({ name }) => name === spotlight.INTEGRATION_NAME)) {\n    options.integrations.push(\n      spotlight.spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined,\n      }),\n    );\n  }\n\n  const client$1 = new client.NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client$1);\n\n  client$1.init();\n\n  utils.logger.log(`Running in ${commonjs.isCjs() ? 'CommonJS' : 'ESM'} mode.`);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n\n  client$1.startClientReportTracking();\n\n  updateScopeFromEnvVariables();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client$1);\n    validateOpenTelemetrySetup();\n  }\n\n  opentelemetry.enhanceDscWithOpenTelemetryRootSpanName(client$1);\n  opentelemetry.setupEventContextTrace(client$1);\n\n  return client$1;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nfunction validateOpenTelemetrySetup() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = opentelemetry.openTelemetrySetupCheck();\n\n  const required = ['SentryContextManager', 'SentryPropagator'];\n\n  if (core.hasTracingEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      utils.logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    utils.logger.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\nfunction getClientOptions(\n  options,\n  getDefaultIntegrationsImpl,\n) {\n  const release = getRelease(options.release);\n\n  const autoSessionTracking =\n    typeof release !== 'string'\n      ? false\n      : options.autoSessionTracking === undefined\n        ? true\n        : options.autoSessionTracking;\n\n  if (options.spotlight == null) {\n    const spotlightEnv = envToBool.envToBool(process.env.SENTRY_SPOTLIGHT, { strict: true });\n    if (spotlightEnv == null) {\n      options.spotlight = process.env.SENTRY_SPOTLIGHT;\n    } else {\n      options.spotlight = spotlightEnv;\n    }\n  }\n\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n\n  const baseOptions = utils.dropUndefinedKeys({\n    transport: http.makeNodeTransport,\n    dsn: process.env.SENTRY_DSN,\n    environment: process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: true,\n  });\n\n  const overwriteOptions = utils.dropUndefinedKeys({\n    release,\n    autoSessionTracking,\n    tracesSampleRate,\n  });\n\n  const mergedOptions = {\n    ...baseOptions,\n    ...options,\n    ...overwriteOptions,\n  };\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrationsImpl(mergedOptions);\n  }\n\n  const clientOptions = {\n    ...mergedOptions,\n    stackParser: utils.stackParserFromStackParserOptions(options.stackParser || api.defaultStackParser),\n    integrations: core.getIntegrationsToSetup({\n      defaultIntegrations: options.defaultIntegrations,\n      integrations: options.integrations,\n    }),\n  };\n\n  return clientOptions;\n}\n\nfunction getRelease(release) {\n  if (release !== undefined) {\n    return release;\n  }\n\n  const detectedRelease = api.getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n\n  return undefined;\n}\n\nfunction getTracesSampleRate(tracesSampleRate) {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  if (envToBool.envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = utils.propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    core.getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n\n/**\n * Enable automatic Session Tracking for the node process.\n */\nfunction startSessionTracking() {\n  const client = core.getClient();\n  if (client && client.getOptions().autoSessionTracking) {\n    client.initSessionFlusher();\n  }\n\n  core.startSession();\n\n  // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n  // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n  // such as calling process.exit() or uncaught exceptions.\n  // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n  process.on('beforeExit', () => {\n    const session = core.getIsolationScope().getSession();\n\n    // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n    // Terminal Status i.e. Exited or Crashed because\n    // \"When a session is moved away from ok it must not be updated anymore.\"\n    // Ref: https://develop.sentry.dev/sdk/sessions/\n    if (session && session.status !== 'ok') {\n      core.endSession();\n    }\n  });\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = validateOpenTelemetrySetup;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+resources@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/./node_modules/.pnpm/@sentry+opentelemetry@8.36.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.27.0_@opentelemet_aarsph53n2fdele3tn5jya3dwm/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ \"(rsc)/./node_modules/.pnpm/import-in-the-middle@1.11.2/node_modules/import-in-the-middle/index.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst contextManager = __webpack_require__(/*! ../otel/contextManager.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client) {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client);\n  client.traceProvider = provider;\n}\n\nfunction getRegisterOptions(esmHookConfig) {\n  if (_optionalChain([esmHookConfig, 'optionalAccess', _ => _.onlyIncludeInstrumentedModules])) {\n    const { addHookMessagePort } = importInTheMiddle.createAddHookMessageChannel();\n    // If the user supplied include, we need to use that as a starting point or use an empty array to ensure no modules\n    // are wrapped if they are not hooked\n    return { data: { addHookMessagePort, include: esmHookConfig.include || [] }, transferList: [addHookMessagePort] };\n  }\n\n  return { data: esmHookConfig };\n}\n\n/** Initialize the ESM loader. */\nfunction maybeInitializeEsmLoader(esmHookConfig) {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split('.').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 22 || (nodeMajor === 20 && nodeMinor >= 6) || (nodeMajor === 18 && nodeMinor >= 19)) {\n    // We need to work around using import.meta.url directly because jest complains about it.\n    const importMetaUrl =\n      typeof (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) !== 'undefined' ? (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) : undefined;\n\n    if (!utils.GLOBAL_OBJ._sentryEsmLoaderHookRegistered && importMetaUrl) {\n      try {\n        // @ts-expect-error register is available in these versions\n        moduleModule.default.register('import-in-the-middle/hook.mjs', importMetaUrl, getRegisterOptions(esmHookConfig));\n        utils.GLOBAL_OBJ._sentryEsmLoaderHookRegistered = true;\n      } catch (error) {\n        utils.logger.warn('Failed to register ESM hook', error);\n      }\n    }\n  } else {\n    utils.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] You are using Node.js in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or use version 7.x of the Sentry Node.js SDK.',\n      );\n    });\n  }\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    utils.logger.enable();\n    setupOpenTelemetryLogger();\n  }\n\n  if (!commonjs.isCjs()) {\n    maybeInitializeEsmLoader(options.registerEsmLoaderHooks);\n  }\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      utils.logger.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  return instruments.filter(instrumentation => integrationNames.includes(instrumentation.id));\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: new resources.Resource({\n      [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n      // eslint-disable-next-line deprecation/deprecation\n      [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n  });\n  provider.addSpanProcessor(\n    new opentelemetry.SentrySpanProcessor({\n      timeout: client.getOptions().maxSpanWaitDuration,\n    }),\n  );\n\n  // Initialize the provider\n  provider.register({\n    propagator: new opentelemetry.SentryPropagator(),\n    contextManager: new contextManager.SentryContextManager(),\n  });\n\n  return provider;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger() {\n  const otelLogger = new Proxy(utils.logger , {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(otelLogger, api.DiagLogLevel.DEBUG);\n}\n\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.maybeInitializeEsmLoader = maybeInitializeEsmLoader;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst node_stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst index = __webpack_require__(/*! ../proxy/index.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/proxy/index.js\");\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body) {\n  return new node_stream.Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nfunction makeNodeTransport(options) {\n  let urlSegments;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    utils.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return core.createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v9): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new index.HttpsProxyAgent(proxy) )\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, _nullishCoalesce(options.httpModule, () => ( nativeHttpModule)), agent);\n  return core.createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments, proxy) {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy =\n    no_proxy &&\n    no_proxy\n      .split(',')\n      .some(\n        exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n      );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options,\n  httpModule,\n  agent,\n) {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request) {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      core.suppressTracing(() => {\n        let body = streamFromBody(request.body);\n\n        const headers = { ...options.headers };\n\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(node_zlib.createGzip());\n        }\n\n        const req = httpModule.request(\n          {\n            method: 'POST',\n            agent,\n            headers,\n            hostname,\n            path: `${pathname}${search}`,\n            port,\n            protocol,\n            ca: options.caCerts,\n          },\n          res => {\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            res.setEncoding('utf8');\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = _nullishCoalesce(res.headers['retry-after'], () => ( null));\n            const rateLimitsHeader = _nullishCoalesce(res.headers['x-sentry-rate-limits'], () => ( null));\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: {\n                'retry-after': retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              },\n            });\n          },\n        );\n\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\n\nexports.makeNodeTransport = makeNodeTransport;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/transports/http.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** Adds an origin to an OTEL Span. */\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\nexports.addOriginToSpan = addOriginToSpan;\n//# sourceMappingURL=addOriginToSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsaUhBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzP2I5ODMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKiogQWRkcyBhbiBvcmlnaW4gdG8gYW4gT1RFTCBTcGFuLiAqL1xuZnVuY3Rpb24gYWRkT3JpZ2luVG9TcGFuKHNwYW4sIG9yaWdpbikge1xuICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCBvcmlnaW4pO1xufVxuXG5leHBvcnRzLmFkZE9yaWdpblRvU3BhbiA9IGFkZE9yaWdpblRvU3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZE9yaWdpblRvU3Bhbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Detect CommonJS. */\nfunction isCjs() {\n  return \"function\" !== 'undefined';\n}\n\nexports.isCjs = isCjs;\n//# sourceMappingURL=commonjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9jb21tb25qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQSxTQUFTLFVBQWM7QUFDdkI7O0FBRUEsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9jb21tb25qcy5qcz82NjdiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKiBEZXRlY3QgQ29tbW9uSlMuICovXG5mdW5jdGlvbiBpc0NqcygpIHtcbiAgcmV0dXJuIHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJztcbn1cblxuZXhwb3J0cy5pc0NqcyA9IGlzQ2pzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uanMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nconst createMissingInstrumentationContext = (pkg) => ({\n  package: pkg,\n  'javascript.is_cjs': commonjs.isCjs(),\n});\n\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext;\n//# sourceMappingURL=createMissingInstrumentationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGlCQUFpQixtQkFBTyxDQUFDLDJIQUFlOztBQUV4QztBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDJDQUEyQztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanM/NjI2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb21tb25qcyA9IHJlcXVpcmUoJy4vY29tbW9uanMuanMnKTtcblxuY29uc3QgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSAocGtnKSA9PiAoe1xuICBwYWNrYWdlOiBwa2csXG4gICdqYXZhc2NyaXB0LmlzX2Nqcyc6IGNvbW1vbmpzLmlzQ2pzKCksXG59KTtcblxuZXhwb3J0cy5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@1.27.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./createMissingInstrumentationContext.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\");\n\n/**\n * Checks and warns if a framework isn't wrapped by opentelemetry.\n */\nfunction ensureIsWrapped(\n  maybeWrappedFunction,\n  name,\n) {\n  const client = core.getClient();\n  if (\n    !_optionalChain([client, 'optionalAccess', _ => _.getOptions, 'call', _2 => _2(), 'access', _3 => _3.disableInstrumentationWarnings]) &&\n    !core$1.isWrapped(maybeWrappedFunction) &&\n    core.isEnabled() &&\n    core.hasTracingEnabled()\n  ) {\n    utils.consoleSandbox(() => {\n      if (commonjs.isCjs()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. This is likely because you required/imported ${name} before calling \\`Sentry.init()\\`.`,\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. Please make sure to initialize Sentry in a separate file that you \\`--import\\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${name}/install/esm/.`,\n        );\n      }\n    });\n\n    core.getGlobalScope().setContext('missing_instrumentation', createMissingInstrumentationContext.createMissingInstrumentationContext(name));\n  }\n}\n\nexports.ensureIsWrapped = ensureIsWrapped;\n//# sourceMappingURL=ensureIsWrapped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLG9IQUFlOztBQUUzQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGVBQWUsbUJBQU8sQ0FBQywrSkFBcUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLGlIQUFjO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQyxvSEFBZTtBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQywySEFBZTtBQUN4Qyw0Q0FBNEMsbUJBQU8sQ0FBQyxpTEFBMEM7O0FBRTlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixNQUFNLG9FQUFvRSxNQUFNO0FBQ3RHO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTSxpTEFBaUwsS0FBSztBQUNsTjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnN1cmVJc1dyYXBwZWQuanM/YzFmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSQxID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvY29yZScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdAc2VudHJ5L3V0aWxzJyk7XG5jb25zdCBjb21tb25qcyA9IHJlcXVpcmUoJy4vY29tbW9uanMuanMnKTtcbmNvbnN0IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0ID0gcmVxdWlyZSgnLi9jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcycpO1xuXG4vKipcbiAqIENoZWNrcyBhbmQgd2FybnMgaWYgYSBmcmFtZXdvcmsgaXNuJ3Qgd3JhcHBlZCBieSBvcGVudGVsZW1ldHJ5LlxuICovXG5mdW5jdGlvbiBlbnN1cmVJc1dyYXBwZWQoXG4gIG1heWJlV3JhcHBlZEZ1bmN0aW9uLFxuICBuYW1lLFxuKSB7XG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gIGlmIChcbiAgICAhX29wdGlvbmFsQ2hhaW4oW2NsaWVudCwgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLmdldE9wdGlvbnMsICdjYWxsJywgXzIgPT4gXzIoKSwgJ2FjY2VzcycsIF8zID0+IF8zLmRpc2FibGVJbnN0cnVtZW50YXRpb25XYXJuaW5nc10pICYmXG4gICAgIWNvcmUkMS5pc1dyYXBwZWQobWF5YmVXcmFwcGVkRnVuY3Rpb24pICYmXG4gICAgY29yZS5pc0VuYWJsZWQoKSAmJlxuICAgIGNvcmUuaGFzVHJhY2luZ0VuYWJsZWQoKVxuICApIHtcbiAgICB1dGlscy5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICBpZiAoY29tbW9uanMuaXNDanMoKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFtTZW50cnldICR7bmFtZX0gaXMgbm90IGluc3RydW1lbnRlZC4gVGhpcyBpcyBsaWtlbHkgYmVjYXVzZSB5b3UgcmVxdWlyZWQvaW1wb3J0ZWQgJHtuYW1lfSBiZWZvcmUgY2FsbGluZyBcXGBTZW50cnkuaW5pdCgpXFxgLmAsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFtTZW50cnldICR7bmFtZX0gaXMgbm90IGluc3RydW1lbnRlZC4gUGxlYXNlIG1ha2Ugc3VyZSB0byBpbml0aWFsaXplIFNlbnRyeSBpbiBhIHNlcGFyYXRlIGZpbGUgdGhhdCB5b3UgXFxgLS1pbXBvcnRcXGAgd2hlbiBydW5uaW5nIG5vZGUsIHNlZTogaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvJHtuYW1lfS9pbnN0YWxsL2VzbS8uYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvcmUuZ2V0R2xvYmFsU2NvcGUoKS5zZXRDb250ZXh0KCdtaXNzaW5nX2luc3RydW1lbnRhdGlvbicsIGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0KG5hbWUpKTtcbiAgfVxufVxuXG5leHBvcnRzLmVuc3VyZUlzV3JhcHBlZCA9IGVuc3VyZUlzV3JhcHBlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuc3VyZUlzV3JhcHBlZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nconst TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nfunction envToBool(value, options) {\n  const normalized = String(value).toLowerCase();\n\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n\n  return options && options.strict ? null : Boolean(value);\n}\n\nexports.FALSY_ENV_VALUES = FALSY_ENV_VALUES;\nexports.TRUTHY_ENV_VALUES = TRUTHY_ENV_VALUES;\nexports.envToBool = envToBool;\n//# sourceMappingURL=envToBool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnZUb0Jvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnZUb0Jvb2wuanM/YjE4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBGQUxTWV9FTlZfVkFMVUVTID0gbmV3IFNldChbJ2ZhbHNlJywgJ2YnLCAnbicsICdubycsICdvZmYnLCAnMCddKTtcbmNvbnN0IFRSVVRIWV9FTlZfVkFMVUVTID0gbmV3IFNldChbJ3RydWUnLCAndCcsICd5JywgJ3llcycsICdvbicsICcxJ10pO1xuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHdoaWNoIGNhc3RzIGFuIEVOViB2YXJpYWJsZSB2YWx1ZSB0byBgdHJ1ZWAgb3IgYGZhbHNlYCB1c2luZyB0aGUgY29uc3RhbnRzIGRlZmluZWQgYWJvdmUuXG4gKiBJbiBzdHJpY3QgbW9kZSwgaXQgbWF5IHJldHVybiBgbnVsbGAgaWYgdGhlIHZhbHVlIGRvZXNuJ3QgbWF0Y2ggYW55IG9mIHRoZSBwcmVkZWZpbmVkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBlbnYgdmFyaWFibGVcbiAqIEBwYXJhbSBvcHRpb25zIC0tIE9ubHkgaGFzIGBzdHJpY3RgIGtleSBmb3Igbm93LCB3aGljaCByZXF1aXJlcyBhIHN0cmljdCBtYXRjaCBmb3IgYHRydWVgIGluIFRSVVRIWV9FTlZfVkFMVUVTXG4gKiBAcmV0dXJucyB0cnVlL2ZhbHNlIGlmIHRoZSBsb3dlcmNhc2UgdmFsdWUgbWF0Y2hlcyB0aGUgcHJlZGVmaW5lZCB2YWx1ZXMgYWJvdmUuIElmIG5vdCwgbnVsbCBpbiBzdHJpY3QgbW9kZSxcbiAqICAgICAgICAgIGFuZCBCb29sZWFuKHZhbHVlKSBpbiBsb29zZSBtb2RlLlxuICovXG5mdW5jdGlvbiBlbnZUb0Jvb2wodmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoRkFMU1lfRU5WX1ZBTFVFUy5oYXMobm9ybWFsaXplZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoVFJVVEhZX0VOVl9WQUxVRVMuaGFzKG5vcm1hbGl6ZWQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnN0cmljdCA/IG51bGwgOiBCb29sZWFuKHZhbHVlKTtcbn1cblxuZXhwb3J0cy5GQUxTWV9FTlZfVkFMVUVTID0gRkFMU1lfRU5WX1ZBTFVFUztcbmV4cG9ydHMuVFJVVEhZX0VOVl9WQUxVRVMgPSBUUlVUSFlfRU5WX1ZBTFVFUztcbmV4cG9ydHMuZW52VG9Cb29sID0gZW52VG9Cb29sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52VG9Cb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/./node_modules/.pnpm/@sentry+core@8.36.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n  utils.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = core.getClient();\n\n  if (client === undefined) {\n    debugBuild.DEBUG_BUILD && utils.logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result) => {\n      if (!result) {\n        debugBuild.DEBUG_BUILD && utils.logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      debugBuild.DEBUG_BUILD && utils.logger.error(error);\n    },\n  );\n}\n\nexports.logAndExitProcess = logAndExitProcess;\n//# sourceMappingURL=errorhandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lcnJvcmhhbmRsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLGlIQUFjO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQyxvSEFBZTtBQUNyQyxtQkFBbUIsbUJBQU8sQ0FBQyw0SEFBbUI7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC4zNi4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2Vycm9yaGFuZGxpbmcuanM/OTAzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBERUZBVUxUX1NIVVRET1dOX1RJTUVPVVQgPSAyMDAwO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gbG9nQW5kRXhpdFByb2Nlc3MoZXJyb3IpIHtcbiAgdXRpbHMuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH0pO1xuXG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG5cbiAgaWYgKGNsaWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiB1dGlscy5sb2dnZXIud2FybignTm8gTm9kZUNsaWVudCB3YXMgZGVmaW5lZCwgd2UgYXJlIGV4aXRpbmcgdGhlIHByb2Nlc3Mgbm93LicpO1xuICAgIGdsb2JhbC5wcm9jZXNzLmV4aXQoMSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG4gIGNvbnN0IHRpbWVvdXQgPVxuICAgIChvcHRpb25zICYmIG9wdGlvbnMuc2h1dGRvd25UaW1lb3V0ICYmIG9wdGlvbnMuc2h1dGRvd25UaW1lb3V0ID4gMCAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCkgfHxcbiAgICBERUZBVUxUX1NIVVRET1dOX1RJTUVPVVQ7XG4gIGNsaWVudC5jbG9zZSh0aW1lb3V0KS50aGVuKFxuICAgIChyZXN1bHQpID0+IHtcbiAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgdXRpbHMubG9nZ2VyLndhcm4oJ1dlIHJlYWNoZWQgdGhlIHRpbWVvdXQgZm9yIGVtcHR5aW5nIHRoZSByZXF1ZXN0IGJ1ZmZlciwgc3RpbGwgZXhpdGluZyBub3chJyk7XG4gICAgICB9XG4gICAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIH0sXG4gICAgZXJyb3IgPT4ge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiB1dGlscy5sb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgIH0sXG4gICk7XG59XG5cbmV4cG9ydHMubG9nQW5kRXhpdFByb2Nlc3MgPSBsb2dBbmRFeGl0UHJvY2Vzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yaGFuZGxpbmcuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Build a full URL from request options. */\nfunction getRequestUrl(requestOptions) {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\nexports.getRequestUrl = getRequestUrl;\n//# sourceMappingURL=getRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9nZXRSZXF1ZXN0VXJsLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQSxZQUFZLFNBQVMsSUFBSSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUs7QUFDaEQ7O0FBRUEscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9nZXRSZXF1ZXN0VXJsLmpzPzc3Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqIEJ1aWxkIGEgZnVsbCBVUkwgZnJvbSByZXF1ZXN0IG9wdGlvbnMuICovXG5mdW5jdGlvbiBnZXRSZXF1ZXN0VXJsKHJlcXVlc3RPcHRpb25zKSB7XG4gIGNvbnN0IHByb3RvY29sID0gcmVxdWVzdE9wdGlvbnMucHJvdG9jb2wgfHwgJyc7XG4gIGNvbnN0IGhvc3RuYW1lID0gcmVxdWVzdE9wdGlvbnMuaG9zdG5hbWUgfHwgcmVxdWVzdE9wdGlvbnMuaG9zdCB8fCAnJztcbiAgLy8gRG9uJ3QgbG9nIHN0YW5kYXJkIDo4MCAoaHR0cCkgYW5kIDo0NDMgKGh0dHBzKSBwb3J0cyB0byByZWR1Y2UgdGhlIG5vaXNlXG4gIC8vIEFsc28gZG9uJ3QgYWRkIHBvcnQgaWYgdGhlIGhvc3RuYW1lIGFscmVhZHkgaW5jbHVkZXMgYSBwb3J0XG4gIGNvbnN0IHBvcnQgPVxuICAgICFyZXF1ZXN0T3B0aW9ucy5wb3J0IHx8IHJlcXVlc3RPcHRpb25zLnBvcnQgPT09IDgwIHx8IHJlcXVlc3RPcHRpb25zLnBvcnQgPT09IDQ0MyB8fCAvXiguKik6KFxcZCspJC8udGVzdChob3N0bmFtZSlcbiAgICAgID8gJydcbiAgICAgIDogYDoke3JlcXVlc3RPcHRpb25zLnBvcnR9YDtcbiAgY29uc3QgcGF0aCA9IHJlcXVlc3RPcHRpb25zLnBhdGggPyByZXF1ZXN0T3B0aW9ucy5wYXRoIDogJy8nO1xuICByZXR1cm4gYCR7cHJvdG9jb2x9Ly8ke2hvc3RuYW1lfSR7cG9ydH0ke3BhdGh9YDtcbn1cblxuZXhwb3J0cy5nZXRSZXF1ZXN0VXJsID0gZ2V0UmVxdWVzdFVybDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFJlcXVlc3RVcmwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(\n  basePath = process.argv[1] ? utils.dirname(process.argv[1]) : process.cwd(),\n  isWindows = node_path.sep === '\\\\',\n) {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = node_path.posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      let moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n\n      if (moduleName) {\n        moduleName += ':';\n      }\n      moduleName += file;\n\n      return moduleName;\n    }\n\n    return file;\n  };\n}\n\nexports.createGetModuleFromFilename = createGetModuleFromFilename;\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9tb2R1bGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVztBQUNyQyxjQUFjLG1CQUFPLENBQUMsb0hBQWU7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFVBQVUsdUJBQXVCOztBQUVqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixzQ0FBc0MsR0FBRyxLQUFLO0FBQzlEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvbW9kdWxlLmpzPzA0MWYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgbm9kZV9wYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ0BzZW50cnkvdXRpbHMnKTtcblxuLyoqIG5vcm1hbGl6ZXMgV2luZG93cyBwYXRocyAqL1xuZnVuY3Rpb24gbm9ybWFsaXplV2luZG93c1BhdGgocGF0aCkge1xuICByZXR1cm4gcGF0aFxuICAgIC5yZXBsYWNlKC9eW0EtWl06LywgJycpIC8vIHJlbW92ZSBXaW5kb3dzLXN0eWxlIHByZWZpeFxuICAgIC5yZXBsYWNlKC9cXFxcL2csICcvJyk7IC8vIHJlcGxhY2UgYWxsIGBcXGAgaW5zdGFuY2VzIHdpdGggYC9gXG59XG5cbi8qKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBtb2R1bGUgbmFtZSBmcm9tIGEgZmlsZW5hbWUgKi9cbmZ1bmN0aW9uIGNyZWF0ZUdldE1vZHVsZUZyb21GaWxlbmFtZShcbiAgYmFzZVBhdGggPSBwcm9jZXNzLmFyZ3ZbMV0gPyB1dGlscy5kaXJuYW1lKHByb2Nlc3MuYXJndlsxXSkgOiBwcm9jZXNzLmN3ZCgpLFxuICBpc1dpbmRvd3MgPSBub2RlX3BhdGguc2VwID09PSAnXFxcXCcsXG4pIHtcbiAgY29uc3Qgbm9ybWFsaXplZEJhc2UgPSBpc1dpbmRvd3MgPyBub3JtYWxpemVXaW5kb3dzUGF0aChiYXNlUGF0aCkgOiBiYXNlUGF0aDtcblxuICByZXR1cm4gKGZpbGVuYW1lKSA9PiB7XG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5vcm1hbGl6ZWRGaWxlbmFtZSA9IGlzV2luZG93cyA/IG5vcm1hbGl6ZVdpbmRvd3NQYXRoKGZpbGVuYW1lKSA6IGZpbGVuYW1lO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgIGxldCB7IGRpciwgYmFzZTogZmlsZSwgZXh0IH0gPSBub2RlX3BhdGgucG9zaXgucGFyc2Uobm9ybWFsaXplZEZpbGVuYW1lKTtcblxuICAgIGlmIChleHQgPT09ICcuanMnIHx8IGV4dCA9PT0gJy5tanMnIHx8IGV4dCA9PT0gJy5janMnKSB7XG4gICAgICBmaWxlID0gZmlsZS5zbGljZSgwLCBleHQubGVuZ3RoICogLTEpO1xuICAgIH1cblxuICAgIGlmICghZGlyKSB7XG4gICAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICAgIGRpciA9ICcuJztcbiAgICB9XG5cbiAgICBjb25zdCBuID0gZGlyLmxhc3RJbmRleE9mKCcvbm9kZV9tb2R1bGVzJyk7XG4gICAgaWYgKG4gPiAtMSkge1xuICAgICAgcmV0dXJuIGAke2Rpci5zbGljZShuICsgMTQpLnJlcGxhY2UoL1xcLy9nLCAnLicpfToke2ZpbGV9YDtcbiAgICB9XG5cbiAgICAvLyBMZXQncyBzZWUgaWYgaXQncyBhIHBhcnQgb2YgdGhlIG1haW4gbW9kdWxlXG4gICAgLy8gVG8gYmUgYSBwYXJ0IG9mIG1haW4gbW9kdWxlLCBpdCBoYXMgdG8gc2hhcmUgdGhlIHNhbWUgYmFzZVxuICAgIGlmIChkaXIuc3RhcnRzV2l0aChub3JtYWxpemVkQmFzZSkpIHtcbiAgICAgIGxldCBtb2R1bGVOYW1lID0gZGlyLnNsaWNlKG5vcm1hbGl6ZWRCYXNlLmxlbmd0aCArIDEpLnJlcGxhY2UoL1xcLy9nLCAnLicpO1xuXG4gICAgICBpZiAobW9kdWxlTmFtZSkge1xuICAgICAgICBtb2R1bGVOYW1lICs9ICc6JztcbiAgICAgIH1cbiAgICAgIG1vZHVsZU5hbWUgKz0gZmlsZTtcblxuICAgICAgcmV0dXJuIG1vZHVsZU5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGU7XG4gIH07XG59XG5cbmV4cG9ydHMuY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lID0gY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/module.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst utils = __webpack_require__(/*! @sentry/utils */ \"(rsc)/./node_modules/.pnpm/@sentry+utils@8.36.0/node_modules/@sentry/utils/build/cjs/index.js\");\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return utils.flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return utils.flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguMzYuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9yZWRpc0NhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsY0FBYyxtQkFBTyxDQUFDLG9IQUFlOztBQUVyQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIsb0JBQW9CO0FBQ3BCLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjM2LjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvcmVkaXNDYWNoZS5qcz84MzcxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnQHNlbnRyeS91dGlscycpO1xuXG5jb25zdCBTSU5HTEVfQVJHX0NPTU1BTkRTID0gWydnZXQnLCAnc2V0JywgJ3NldGV4J107XG5cbmNvbnN0IEdFVF9DT01NQU5EUyA9IFsnZ2V0JywgJ21nZXQnXTtcbmNvbnN0IFNFVF9DT01NQU5EUyA9IFsnc2V0JywgJ3NldGV4J107XG4vLyB0b2RvOiBkZWwsIGV4cGlyZVxuXG4vKiogQ2hlY2tzIGlmIGEgZ2l2ZW4gY29tbWFuZCBpcyBpbiB0aGUgbGlzdCBvZiByZWRpcyBjb21tYW5kcy5cbiAqICBVc2VmdWwgYmVjYXVzZSBjb21tYW5kcyBjYW4gY29tZSBpbiBsb3dlcmNhc2Ugb3IgdXBwZXJjYXNlIChkZXBlbmRpbmcgb24gdGhlIGxpYnJhcnkpLiAqL1xuZnVuY3Rpb24gaXNJbkNvbW1hbmRzKHJlZGlzQ29tbWFuZHMsIGNvbW1hbmQpIHtcbiAgcmV0dXJuIHJlZGlzQ29tbWFuZHMuaW5jbHVkZXMoY29tbWFuZC50b0xvd2VyQ2FzZSgpKTtcbn1cblxuLyoqIERldGVybWluZSBjYWNoZSBvcGVyYXRpb24gYmFzZWQgb24gcmVkaXMgc3RhdGVtZW50ICovXG5mdW5jdGlvbiBnZXRDYWNoZU9wZXJhdGlvbihcbiAgY29tbWFuZCxcbikge1xuICBpZiAoaXNJbkNvbW1hbmRzKEdFVF9DT01NQU5EUywgY29tbWFuZCkpIHtcbiAgICByZXR1cm4gJ2NhY2hlLmdldCc7XG4gIH0gZWxzZSBpZiAoaXNJbkNvbW1hbmRzKFNFVF9DT01NQU5EUywgY29tbWFuZCkpIHtcbiAgICByZXR1cm4gJ2NhY2hlLnB1dCc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBrZXlIYXNQcmVmaXgoa2V5LCBwcmVmaXhlcykge1xuICByZXR1cm4gcHJlZml4ZXMuc29tZShwcmVmaXggPT4ga2V5LnN0YXJ0c1dpdGgocHJlZml4KSk7XG59XG5cbi8qKiBTYWZlbHkgY29udmVydHMgYSByZWRpcyBrZXkgdG8gYSBzdHJpbmcgKGNvbW1hLXNlcGFyYXRlZCBpZiB0aGVyZSBhcmUgbXVsdGlwbGUga2V5cykgKi9cbmZ1bmN0aW9uIGdldENhY2hlS2V5U2FmZWx5KHJlZGlzQ29tbWFuZCwgY21kQXJncykge1xuICB0cnkge1xuICAgIGlmIChjbWRBcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHByb2Nlc3NBcmcgPSAoYXJnKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgQnVmZmVyLmlzQnVmZmVyKGFyZykpIHtcbiAgICAgICAgcmV0dXJuIFthcmcudG9TdHJpbmcoKV07XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICByZXR1cm4gdXRpbHMuZmxhdHRlbihhcmcubWFwKGFyZyA9PiBwcm9jZXNzQXJnKGFyZykpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbJzx1bmtub3duPiddO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBmaXJzdEFyZyA9IGNtZEFyZ3NbMF07XG4gICAgaWYgKGlzSW5Db21tYW5kcyhTSU5HTEVfQVJHX0NPTU1BTkRTLCByZWRpc0NvbW1hbmQpICYmIGZpcnN0QXJnICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzQXJnKGZpcnN0QXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuZmxhdHRlbihjbWRBcmdzLm1hcChhcmcgPT4gcHJvY2Vzc0FyZyhhcmcpKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSByZWRpcyBvcGVyYXRpb24gc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgXCJjYWNoZSBvcGVyYXRpb25cIiBieSBjaGVja2luZyBpZiBhIGtleSBpcyBwcmVmaXhlZC5cbiAqICBXZSBvbmx5IHN1cHBvcnQgY2VydGFpbiBjb21tYW5kcyAoc3VjaCBhcyAnc2V0JywgJ2dldCcsICdtZ2V0JykuICovXG5mdW5jdGlvbiBzaG91bGRDb25zaWRlckZvckNhY2hlKHJlZGlzQ29tbWFuZCwga2V5cywgcHJlZml4ZXMpIHtcbiAgaWYgKCFnZXRDYWNoZU9wZXJhdGlvbihyZWRpc0NvbW1hbmQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGlmIChrZXlIYXNQcmVmaXgoa2V5LCBwcmVmaXhlcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKiBDYWxjdWxhdGVzIHNpemUgYmFzZWQgb24gdGhlIGNhY2hlIHJlc3BvbnNlIHZhbHVlICovXG5mdW5jdGlvbiBjYWxjdWxhdGVDYWNoZUl0ZW1TaXplKHJlc3BvbnNlKSB7XG4gIGNvbnN0IGdldFNpemUgPSAodmFsdWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHJldHVybiB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlLmxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB2YWx1ZS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5sZW5ndGg7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmVzcG9uc2UpXG4gICAgPyByZXNwb25zZS5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgICAgICBjb25zdCBzaXplID0gZ2V0U2l6ZShjdXJyKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzaXplID09PSAnbnVtYmVyJyA/IChhY2MgIT09IHVuZGVmaW5lZCA/IGFjYyArIHNpemUgOiBzaXplKSA6IGFjYztcbiAgICAgIH0sIDApXG4gICAgOiBnZXRTaXplKHJlc3BvbnNlKTtcbn1cblxuZXhwb3J0cy5HRVRfQ09NTUFORFMgPSBHRVRfQ09NTUFORFM7XG5leHBvcnRzLlNFVF9DT01NQU5EUyA9IFNFVF9DT01NQU5EUztcbmV4cG9ydHMuY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZSA9IGNhbGN1bGF0ZUNhY2hlSXRlbVNpemU7XG5leHBvcnRzLmdldENhY2hlS2V5U2FmZWx5ID0gZ2V0Q2FjaGVLZXlTYWZlbHk7XG5leHBvcnRzLmdldENhY2hlT3BlcmF0aW9uID0gZ2V0Q2FjaGVPcGVyYXRpb247XG5leHBvcnRzLmlzSW5Db21tYW5kcyA9IGlzSW5Db21tYW5kcztcbmV4cG9ydHMuc2hvdWxkQ29uc2lkZXJGb3JDYWNoZSA9IHNob3VsZENvbnNpZGVyRm9yQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpc0NhY2hlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sentry+node@8.36.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ })

};
;